profile

target ES6

ACE {
	OpenProfile {
		on userInfoRead (UserInfo.renderUserInfo)
		on error ( common.Error.renderError ) triggers ( common.RouteHome )
	}
	SaveProfile {
		on saved triggers (common.Route)
		on dataInvalid ( common.Error.renderError )
	}
	SaveBox {
		on saved triggers (common.Route)
		on dataInvalid ( common.Error.renderError )
	}
	DeleteBox {
		on deleted triggers (common.Route common.CloseAllDialogs)
	}
	LoadBox {
		on loaded ( UserInfo.renderBox )
		on error ( common.Error.renderError ) triggers ( common.RouteHome )
	}
	OpenBoxCreation {
		on ok ( UserInfo.renderBox )
	}
	SaveBoxConfig {
		on saved triggers (FillBoxWithCards)
	}
	FillBoxWithCards {
		on filled triggers (common.Route)
	}
	UpdatePassword {
		on dataInvalid (common.Error.renderError)
		on mismatch (common.Error.renderError)
		on saved ( common.Common.initUserInLocalStorage ) triggers (common.Route)
	}
	OpenChangePassword {
		on ok (UserInfo.renderPasswordChange)
	}
	ValidatePassword {
		on empty (UserInfo.passwordEmpty)
		on ok (UserInfo.passwordOK)
		on mismatch (UserInfo.passwordMismatch)
	}
	OpenForgotPassword {
		on ok (UserInfo.renderForgotPassword)
	}
	SubmitForgotPasswordRequest {
		on dataInvalid (common.Error.renderError)
		on ok (common.Message.renderMessage)
	}
	OpenNewPassword {
		on ok (UserInfo.renderNewPassword)
	}
	SubmitNewPassword {
		on dataInvalid (common.Error.renderError)
		on mismatch (common.Error.renderError)
		on saved triggers (common.Route)
	}
	OpenRegistration {
		on ok (UserInfo.renderRegistration)
	}
	SubmitRegistration {
		on dataInvalid (common.Error.renderError)
		on mismatch (common.Error.renderError)
		on saved (common.Common.initUserInLocalStorage) triggers (common.Route)
		on error ( common.Error.renderError ) triggers ( common.RouteHome )
	}
	CheckUsername {
		on empty (common.Validation.fieldEmpty)
		on available (UserInfo.renderUsernameIsAvailable)
		on notAvailable (UserInfo.renderUsernameIsNotAvailable)
	}
	ConfirmEmail {
		on saved (common.Common.initUserInLocalStorage) triggers (common.Route)
	}
}

views {
	UserInfo {
		renderUserInfo
		renderBox
		renderPasswordChange
		passwordOK
		passwordMismatch
		passwordEmpty
		renderForgotPassword
		renderNewPassword
		renderRegistration
		renderUsernameIsAvailable
		renderUsernameIsNotAvailable
	}
}