HttpClient 

common

ACE 
Init 
	fromAppState (username, password )
	on user ( 
		set loggedInUser 
		set language
	) triggers ( InitialLogin )
	on noUser ( 
		reset loggedInUser 
		set language
	) triggers ( RouteChanged )

RouteChanged
	fromAppState ( hash, loggedInUser ) 
	on login ( 
		set loginView 
	)
	on registration ( 
		set registrationView
	)
	on confirmEmail triggers (registration.ConfirmEmail)
	on forgotPassword ( 
		set forgotPasswordView 
	)
	on resetPassword ( 
		set resetPasswordView 
	)
	on dashboard triggers (box.InitBoxesForDay)
	on categories triggers (category.LoadCategoryTree )
	on profile triggers ( profile.LoadUser )
	on userList triggers (admin.GetAllUsers) 
	on nextCard (set cardView.boxId) triggers (box.LoadNextCard)
	on boxSettings triggers (box.LoadSettings)
	on boxCreate ( set common.boxSettingsView )
	on invalid triggers (Route)
	
Route ( hash ) 
	on ok ( set hash )
	
InitialLogin
	call com.anfelisa.user.GetRole
	loadingFlag displaySpinner 
	on ok (set loggedInUser.role) triggers ( RouteChanged )
	on unauthorized triggers ( DisplayError Logout )
	
Logout 
	on ok ( 
		reset loggedInUser
		reset username
		reset password
	) triggers ( Route )

DisplayError ( error ) 
	fromAppState( language, texts)
	on ok ( set message) 

DisplayErrorAndLogout ( error ) 
	fromAppState( language, texts)
	on ok (set message) triggers ( Logout)

DisplayMessage ( messageKey ) 
	fromAppState( language, texts)
	on ok (set message) 

ClearToast 
	on ok (reset message)
	
DisplaySaveBugDialog
	on ok (set displaySaveBugDialog)

async CallSaveBug
	fromAppState( loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set displaySaveBugDialog)

HideSaveBugDialog
	on ok (set displaySaveBugDialog) triggers (DisplayMessage)



appState {
	String loggedInUser {
		String username
		String role
		String password
	}
	String hash location.hash
	String username storage
	String password storage
	Boolean displaySpinner
	String language
	texts
	Boolean displaySaveBugDialog
	message {
		String type
		String text
	}
	group {
		loginView {
			String username
			Boolean saveInLocalStorage
		}
		registrationView {
			Boolean displayUsernameSpinner
	        Boolean available
	        String username
	        String email
	        Boolean emailInvalid
	        Boolean passwordMismatch
		}
		forgotPasswordView {
			String username
		}
		resetPasswordView {
			String token
			Boolean passwordMismatch
		}
		dashboardView {
	    	List boxList serverModel com.anfelisa.box.BoxWithStatistics {
				Integer openTodaysCards
				String categoryName
				String categoryId
				String boxId
				Integer quality0Count
				Integer quality1Count
				Integer quality2Count
				Integer quality3Count
				Integer quality4Count
				Integer quality5Count
				List Integer countsPerDayNextWeek
				Integer maxCardsPerDay
	    	}
	        deleteBox {
	            Boolean confirmDelete
	            String boxId
	        }
		}
		boxSettingsView serverModel com.anfelisa.box.BoxSettings {
	    	Boolean maxIntervalInvalid
	    	Boolean maxCardsPerDayInvalid
			Boolean dictionaryLookupInvalid
			
			String boxId
			Integer maxInterval
			Integer maxCardsPerDay
			String categoryName
			Boolean dictionaryLookup
			String givenLanguage
			String wantedLanguage
			String categoryId
		} 
		profileView {
			String username
			String email
			String role
			Boolean showDeleteUserDialog
		}
		userListView serverModel com.anfelisa.user.UserList {
			List userList serverModel com.anfelisa.user.User {
				NotNull String userId 
				NotNull String username
				NotNull String password
				NotNull String email
				NotNull String role
				NotNull Boolean emailConfirmed
			} 
			NotNull Boolean showDeleteUserDialog 
			String usernameToBeDeleted
		}
		cardView {
			String cardId
			String categoryId
			Integer count
			String given
			String image
			Integer lastQuality
			String rootCategoryId
			String scheduledCardId
			String reinforceCardId
			DateTime scheduledDate
			DateTime scoredDate
			String wanted
			Integer openTodaysCards
			Integer allTodaysCards
			Integer index
			Boolean enableScoreButtons
			Boolean displayImage
			String boxId
		}
		authorView {
			categoryTree {
				selectedCategory {
					String categoryId
					String categoryName
					Integer categoryIndex
					Boolean empty
					String parentCategoryId
					Boolean dictionaryLookup
					String givenLanguage
					String wantedLanguage
					String rootCategoryId
					List CategoryTreeItem childCategories
				}
				rootCategory {
					String categoryId
					String categoryName
					Integer categoryIndex
					Boolean empty
					String parentCategoryId
					Boolean dictionaryLookup
					String givenLanguage
					String wantedLanguage
					String rootCategoryId
					List CategoryTreeItem childCategories
				}
				
				Boolean displayDeleteCategory
				
				String categoryName
				Boolean displayEditCategory
				Boolean displayNewCategory
				
				Boolean dropAllowed
				String dropTargetCategoryId
				String movedCategory {
					String categoryId
					String categoryName
					Integer categoryIndex
					Boolean empty
					String parentCategoryId
					Boolean dictionaryLookup
					String givenLanguage
					String wantedLanguage
					String rootCategoryId
					List CategoryTreeItem childCategories
				}
				
				previewCsv
			}
	        cardView {
		        List cardList serverModel com.anfelisa.card.CardWithInfo {
					String cardId
					String given
					String wanted
					String image
					String cardAuthor
					Integer cardIndex
					String categoryId
					String rootCategoryId
		        	DateTime next
		        }
		        Boolean naturalInputOrder
		        String filter
		        Boolean filterNonScheduled
		        editedCard {
		        	String cardId
		        	String given
		        	String wanted
		        	Integer index
		        	String image
		        }
		        newCard {
		        	String given
		        	String wanted
		        	Integer index
		        	String image
		        	String file
		        	Boolean displaySpinner
		        	Boolean displayTranslateSpinner
		        }
		        List cardDuplicates
		        deleteCard {
		        	Boolean confirmDelete
		        	String cardId
		        }
		        String dictionaryValue
		        List String selectedCardIds
		        List String movedCardIds
		        String dragTargetCardId
	        }
        }
	}
}