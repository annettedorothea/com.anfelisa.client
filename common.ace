HttpClient common

ACE 
Init 
	fromAppState (rootContainer.token )
	on ok (
		set rootContainer.language
		set rootContainer.messageContainer.messages
		set rootContainer.spinner
	)
	on user (
		set rootContainer.loggedInUser.token
		set rootContainer.spinner
	) triggers ( GetUserInfo )
	on noUser triggers ( 
		RouteChanged
	)
	
GetUserInfo (token)
	call com.anfelisa.user.GetUserInfo
	set loading rootContainer.spinner.display 
	on ok (
		set rootContainer.loggedInUser.username
		set rootContainer.loggedInUser.token
	) triggers (RouteChanged)
	on error triggers (Logout) 
	


RouteChanged
	fromAppState ( rootContainer.hash, rootContainer.loggedInUser ) 
	on login ( 
		set rootContainer.mainView.loginView
	)
	on privacyPolicy ( 
		set rootContainer.mainView.privacyPolicyView 
	)
	on registration ( 
		set rootContainer.mainView.registrationView
	)
	on confirmEmail triggers (
		registration.ConfirmEmail
	)
	on forgotPassword ( 
		set rootContainer.mainView.forgotPasswordView
	)
	on resetPassword ( 
		set rootContainer.mainView.resetPasswordView
	)
	on dashboard (
		set rootContainer.mainView.dashboardView
	) triggers (
		box.InitBoxesForDay
	)
	on categories (
		set rootContainer.mainView.authorView
	) triggers (
		category.LoadCategoryTree
	)
	on profile (
		set rootContainer.mainView.profileView
	) triggers ( 
		profile.LoadUser
	)
	on nextCard (
		set rootContainer.mainView.queryCardView
	) triggers (
		box.LoadNextCard
	)
	on boxSettings (
		set rootContainer.mainView.boxSettingsView
	) triggers (
		box.LoadSettings
	)
	on allActiveCards (
		set rootContainer.mainView.allActiveCardsView
	) triggers (
		box.LoadActiveCards
	)
	on boxCreate ( 
		set rootContainer.mainView.boxSettingsView
	)
	
RouteToDefault on ok ( set rootContainer.hash )
RouteToQueryCards (boxId) on ok ( set rootContainer.hash )
RouteToAuthorView (categoryId, reverse) on ok ( set rootContainer.hash )
RouteToBoxSettings (boxId) on ok ( set rootContainer.hash )
RouteToBoxCreate (boxId) on ok ( set rootContainer.hash )
RouteToActiveCards (boxId) on ok ( set rootContainer.hash )
RouteToForgotPassword on ok ( set rootContainer.hash )
RouteToPrivacyPolicy on ok ( set rootContainer.hash )
RouteToRegistration on ok ( set rootContainer.hash )
RouteToProfileView on ok ( set rootContainer.hash )
RouteToSelectedCategory (rootCategoryId, categoryId, reverse) on ok ( set rootContainer.hash )
	
Logout 
	on ok ( 
		set rootContainer.loggedInUser
		set rootContainer.token
	) triggers ( RouteToDefault RouteChanged )
	
DisplayToast ( textKey, args ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

DisplayErrorToast ( textKey, args  ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

DisplayWarningToast ( textKey, args ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

HideToast (id)
	fromAppState( rootContainer.messageContainer.messages)
	on ok (
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 1200 DestroyToast ) 
	
DestroyToast (id)
	fromAppState( rootContainer.messageContainer.messages)
	on ok (set rootContainer.messageContainer.messages)
	
DisplaySaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

DisplayVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

CancelVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

DisplayVersionMismatchErrorDialog
	on ok (set rootContainer.versionMismatchErrorDialog.display)

async CallSaveBug
	fromAppState( rootContainer.loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

HideSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display) triggers (DisplayToast )
	



ui JSX rootContainer {
	hash location
	token storage
	language
	messageContainer {
		List messages {
			type
			text
			id
			visible
			code
			textKey
			args
			actions {
				"destroyToast" DestroyToast
			}
		}
	}
	loggedInUser {
		username
		token fromParent
		actions {
			"routeToDefault" RouteToDefault
			"logout" Logout
			"routeToProfileView" RouteToProfileView
		}
	}
	spinner { 
		display
	} 
	saveBugDialog {
		display
		actions {
			"callSaveBug" CallSaveBug
			"cancelSaveBugDialog" CancelSaveBugDialog
		}
	}
	versionMismatchDialog {
		display
		actions {
			"cancelVersionMismatchDialog" CancelVersionMismatchDialog
		}
	}
	versionMismatchErrorDialog {
		display
	}
	exclusiveView mainView {
		privacyPolicyView {
			actions {
				"onClick" RouteToDefault
			}
		}
		loginView {
			username TextInput {
				value
				actions {
					"onChange" login.UsernameChanged
					"onClick" RouteToRegistration
				}
			}
			password PasswordInput {
				value
				actions {
					"onChange" login.PasswordChanged
					"onClick" RouteToForgotPassword
				}
			}
			saveInLocalStorage CheckBox {
				checked
				actions {
					"onChange" login.ToggleSaveInLocalStorage
				}			
			}
			login Button {
				disabled
				actions {
					"onClick" login.Login
				}
			}
		}
		registrationView {
	        username TextInput {
	        	value
	        	displayUsernameSpinner
	        	available
	        	actions {
	        		"onChange" registration.UsernameChanged
	        	}
	        }
			password PasswordInput {
				value
				actions {
	        		"onChange" registration.PasswordChanged
	        	}
			}
			passwordRepetition PasswordInput {
				value
				passwordMismatch
				actions {
	        		"onChange" registration.PasswordRepetitionChanged
	        	}
			}
	        email TextInput {
	        	value
		        emailInvalid
	        	actions {
	        		"onChange" registration.EmailChanged
	        	}
	        }
	        buttons {
				register Button {
					disabled
					actions {
						"onClick" registration.RegisterUser
					}
				}
				cancel Button {
					actions {
						"onClick" RouteToDefault
					}
				}
			}
		}
		forgotPasswordView {
			username TextInput {
	        	value
	        	actions {
	        		"onChange" password.UsernameForgotPasswordChanged
	        	}
	        }
	        buttons {
				forgotPassword Button {
					disabled
					actions {
						"onClick" password.ForgotPassword
					}
				}
				cancel Button {
					actions {
						"onClick" RouteToDefault
					}
				}
			}
		}
		resetPasswordView {
			token
			password PasswordInput {
				value
				actions {
	        		"onChange" password.PasswordChanged
	        	}
			}
			passwordRepetition PasswordInput {
				value
				passwordMismatch
				actions {
	        		"onChange" password.PasswordRepetitionChanged
	        	}
			}
	        buttons {
				resetPassword Button {
					disabled
					actions {
						"onClick" password.ResetPassword
					}
				}
				cancel Button {
					actions {
						"onClick" RouteToDefault
					}
				}
			}
		}
		dashboardView {
	    	List boxList {
				openTodaysCards
				categoryName
				categoryId
				listId boxId
				quality0Count
				quality1Count
				quality2Count
				quality3Count
				quality4Count
				quality5Count
				cardsCount
				List countsPerDayNextWeek
				editable
				reverse
				archived
				deletable
				todaysWeekDay
				tileHeader {
					boxId fromParent
					categoryId fromParent
					categoryName fromParent
					reverse fromParent
					archived fromParent
					deletable fromParent
					edit Button {
						categoryId fromParent
						reverse fromParent
						archived fromParent
						actions {
							"onClick" RouteToAuthorView
						}
					}
					settings Button {
						boxId fromParent
						archived fromParent
						actions {
							"onClick" RouteToBoxSettings
						}
					}
					statistics Button {
						boxId fromParent
						archived fromParent
						actions {
							"onClick" RouteToActiveCards
						}
					}
					archive Button {
						boxId fromParent
						archived fromParent
						actions {
							"onClick" box.ArchiveBox
						}
					}
					delete Button {
						boxId fromParent
						deletable fromParent
						archived fromParent
						actions {
							"onClick" box.DeleteBoxClick
						}
					}
				}
				statistics {
					quality0Count fromParent
					quality1Count fromParent
					quality2Count fromParent
					quality3Count fromParent
					quality4Count fromParent
					quality5Count fromParent
					cardsCount fromParent
					archived fromParent
				}
				cardsNextDays {
					countsPerDayNextWeek fromParent
					archived fromParent
					todaysWeekDay fromParent
				}
				actions {
					"onClick" box.BoxClick
				}
	    	}
	        newBox Button {
	        	actions {
	        		"onClick" RouteToBoxCreate
	        	}
	        }
	        
	        deleteBox {
	            boxId
	            actions {
	            	"onConfirm" box.DeleteBox
	            	"onCancel" box.CancelDeleteBox
	            }
	        }
		}
		boxSettingsView {
			boxId
			boxSettings {
		    	maxIntervalInvalid
		    	maxCardsPerDayInvalid
		    	tooManyCardsStatus
				dictionaryLookupInvalid
				
				boxId fromParent
				maxInterval
				maxCardsPerDay
				categoryName
				dictionaryLookup
				givenLanguage
				wantedLanguage
				categoryId
				editable
				
				allActiveCards
				allCards
				actions {
					"createRootCategory" box.CreateRootCategory
					"dictionaryLookupChanged" box.DictionaryLookupChanged
					"givenLanguageChanged" box.GivenLanguageChanged
					"maxCardsPerDayChanged" box.MaxCardsPerDayChanged
					"maxIntervalChanged" box.MaxIntervalChanged
					"rootCategoryNameChanged" box.RootCategoryNameChanged
					"saveBoxSettings" box.SaveBoxSettings
					"wantedLanguageChanged" box.WantedLanguageChanged
					"routeToDefault" RouteToDefault
				}
			}
		} 
		allActiveCardsView {
			boxId
			editable
			List activeCardList {
				List selectedCardIds fromParent
				editable fromParent
				listId cardId
				given
				wanted
				cardAuthor
				cardIndex
				categoryId
				rootCategoryId
				priority
				next
				ef
				interval
				count
				lastQuality
				actions {
					"selectScheduleCardRange" box.SelectScheduleCardRange
					"toggleScheduleCardSelection" box.ToggleScheduleCardSelection
					"updateCardPriority" box.UpdateCardPriority
				}
			}
			List selectedCardIds

			List selectedLastQualityFilters
			actions {
				"filterActiveCardListWithLastQualityChanged" box.FilterActiveCardListWithLastQualityChanged
				"scheduleSelectedCards" box.ScheduleSelectedCards
				"sortSelectedCardsOut" box.SortSelectedCardsOut
				"toggleAllScheduleCardSelection" box.ToggleAllScheduleCardSelection
			}
		} 
		profileView {
			role
			deletable
			showDeleteUserDialog
	        username TextInput {
	        	value
	        }
	        email TextInput {
	        	value
	        }
	        buttons {
	        	deletable fromParent
				delete Button {
					deletable fromParent
					actions {
						"onClick" profile.DeleteUserClick
					}
				}
				cancel Button {
					actions {
						"onClick" RouteToDefault
					}
				}
			}
			actions {
				"deleteUserCancel" profile.DeleteUserCancel
				"deleteUser" profile.DeleteUser
			}
		}
		queryCardView {
			nextCard {
				disableScoreButtons
				disableSortOutButton
				cardId
				categoryId
				categoryName
				count
				given
				lastQuality
				rootCategoryId
				scheduledCardId
				reinforceCardId
				scheduledDate
				scoredDate
				wanted
				index
				actions {
					"displayWanted" box.DisplayWanted
					"scoreCard" box.ScoreCard
					"scoreReinforceCard" box.ScoreReinforceCard
					"sortCardOut" box.SortCardOut
					"routeToSelectedCategory" RouteToSelectedCategory
				}
			}
			openTodaysCards
			allTodaysCards
			reverse
			boxId
			boxName
			actions {
				"routeToDefault" RouteToDefault
			}
		}
		authorView {
			boxId
	        reverse
			categoryTree {
				reverseBoxExists
		        reverse fromParent
				noComponent selectedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
					dictionaryLookup
					givenLanguage
					wantedLanguage
				}
				buttons {
					selectedCategory fromParent
					rootCategory fromParent 
					reverseBoxExists fromParent
					back Button {
						actions {
							"onClick" RouteToDefault
						}
					}
					new Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.NewCategoryClick
						}
					}
					edit Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.EditCategoryClick
						}
					}
					delete Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.DeleteCategoryClick
						}
					}
					move Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.MoveCategoryClicked
						}
					}
					toggleOrderUp Button {
						rootCategory fromParent
						actions {
							"onClick" category.ToggleCategoryOrder
						}
					}
					toggleOrderDown Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.ToggleCategoryOrder
						}
					}
					invite Button {
						selectedCategory fromParent
						rootCategory fromParent
						actions {
							"onClick" category.InviteUserClick
						}
					}
					reverse Button {
						selectedCategory fromParent
						rootCategory fromParent
						reverseBoxExists fromParent
						actions {
							"onClick" category.CreateReverseBox
						}
					}
				}
				filter {
			        filterNonScheduled CheckBox {
			        	value
			        	actions {
			        		"onChange" category.FilterNonScheduledCards
			        	}
			        }
		        	priority {
		        		value
			        	actions {
			        		"onClick" category.PriorityChanged
				        }
		        	}
				}
				rootCategory {
					selectedCategory fromParent
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					nonScheduledCount
					editable
					Tree childCategories {
						selectedCategory fromParent
						expanded
						childCategories
						listId categoryId
						categoryName
						categoryIndex
						empty
						parentCategoryId
						dictionaryLookup
						givenLanguage
						wantedLanguage
						rootCategoryId
						nonScheduledCount
						editable
						actions {
							"collapseTreeItem" category.CollapseTreeItem
							"expandTreeItem" category.ExpandTreeItem
							"selectTreeItem" category.SelectTreeItem
						}
					}
					actions {
						"selectTreeItem" category.SelectTreeItem
					}
				}
				categoryDialog {
					categoryName
					newCategory
					display
					actions {
						"cancelCategoryDialog" category.CancelCategoryDialog
						"categoryNameChanged" category.CategoryNameChanged
						"createCategory" category.CreateCategory
						"updateCategory" category.UpdateCategory
					}
				}
				inviteUserDialog {
					display
					usernameSearchString
					List usernames
					List invitedUsers
					actions {
						"cancelInviteUser" category.CancelInviteUser
						"invitedUsernameChanged" category.InvitedUsernameChanged
						"inviteUserNextStep" category.InviteUserNextStep
					}
				}
				inviteUserEditableDialog {
					invitedUsername
					editable
					display
					actions {
						"cancelInviteUser" category.CancelInviteUser
						"inviteUser" category.InviteUser
						"inviteUserChangeEditable" category.InviteUserChangeEditable
					}
				}
				deleteCategoryDialog {
					display
					actions {
						"cancelDeleteCategory" category.CancelDeleteCategory
						"deleteCategory" category.DeleteCategory
					}
				}
		        moveCategory {
			        display
					moveAllowed
					rootCategoryInMoveDialog {
						selectedCategory
						categoryId
						categoryName
						categoryIndex
						empty
						parentCategoryId
						dictionaryLookup
						givenLanguage
						wantedLanguage
						rootCategoryId
						nonScheduledCount
						editable
						Tree childCategories {
							selectedCategory fromParent
							expanded
							childCategories
							listId categoryId
							categoryName
							categoryIndex
							empty
							parentCategoryId
							dictionaryLookup
							givenLanguage
							wantedLanguage
							rootCategoryId
							nonScheduledCount
							editable
							actions {
								"collapseTreeItem" category.CollapseTreeItemInMoveDialog
								"expandTreeItem" category.ExpandTreeItemInMoveDialog
								"selectTreeItem" category.SelectTargetCategory
							}
						}
						actions {
								"selectTreeItem" category.SelectTargetCategory
						}
					}
		        	actions {
		        		"moveCardsCancelled" category.MoveCategoryCancelled
		        		"moveCards" category.MoveCategory
		        	}
		        }
		        cardView {
			        naturalInputOrder
			        dictionaryValue
			        List selectedCardIds
		        	rootCategory fromParent
		        	selectedCategory fromParent
		        	reverse fromParent
			        noComponent editedCard {
			        	cardId
			        	given
			        	givenImage
			        	wanted
			        	wantedImage
			        	index
			        }
		        	cardTable {
		        		filter
		        		buttons {
			        		List selectedCardIds fromParent
			        		List cardList fromParent
							toggleInputOrder Button {
								actions {
									"onClick" card.ToggleInputOrder
								}
							}
							scheduleCards Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.ScheduleSelectedCards
								}
							}
							sortCardsOut Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.SortSelectedCardsOut
								}
							}
							deleteCards Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.DeleteCardClick
								}
							}
							moveCards Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.MoveCardsClicked
								}
							}
							moveUp Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.ToggleCardOrder
								}
							}
							moveDown Button {
				        		List selectedCardIds fromParent
								actions {
									"onClick" card.ToggleCardOrder
								}
							}
					        actions {
					        	"filterCards" card.FilterCards
					        	"toggleAllScheduleCardSelection" card.ToggleAllScheduleCardSelection
				        	}
		        		}
			        	selectedCategory fromParent
		        		List selectedCardIds fromParent
		        		editedCard fromParent
		        		rootCategory fromParent
		        		naturalInputOrder fromParent
		        		reverse fromParent
				        List cardList {
							listId cardId
							given
							givenImage
							wanted
							wantedImage
							cardAuthor
							cardIndex
							categoryId
							rootCategoryId
				        	next
				        	rootCategory fromParent
				        	editedCard fromParent
				        	List selectedCardIds fromParent
				        	naturalInputOrder fromParent
				        	filter fromParent
				        	actions {
				        		"cancelEditCard" card.CancelEditCard
				        		"editCard" card.EditCard
				        		"givenOfEditedCardChanged" card.GivenOfEditedCardChanged
				        		"givenImageOfEditedCardChanged" card.GivenImageOfEditedCardChanged
				        		"wantedOfEditedCardChanged" card.WantedOfEditedCardChanged
				        		"wantedImageOfEditedCardChanged" card.WantedImageOfEditedCardChanged
				        		"selectScheduleCardRange" card.SelectScheduleCardRange
				        		"toggleScheduleCardSelection" card.ToggleScheduleCardSelection
				        		"updateCard" card.UpdateCard
				        		"updateCardPriority" card.UpdateCardPriority
				        	}
				        }
				        newCard {
				        	given
				        	givenImage
				        	wanted
				        	wantedImage
				        	index
				        	displaySpinner
				        	naturalInputOrder fromParent
				        	rootCategory fromParent
				        	actions {
				        		"cancelNewCard" card.CancelNewCard
				        		"createCard" card.CreateCard
				        		"givenOfNewCardChanged" card.GivenOfNewCardChanged
				        		"givenImageOfNewCardChanged" card.GivenImageOfNewCardChanged
				        		"wantedOfNewCardChanged" card.WantedOfNewCardChanged
				        		"wantedImageOfNewCardChanged" card.WantedImageOfNewCardChanged
				        		"passValueToDictionary" card.PassValueToDictionary
				        		"translate" card.Translate
				        	}
				        }
				        List cardDuplicates {
							listId cardId
							given
							givenImage
							wanted
							wantedImage
							cardAuthor
							cardIndex
							categoryId
							rootCategoryId
				        	next
				        	categoryName
				        	naturalInputOrder fromParent
				        	rootCategory fromParent
				        	reverse fromParent
				        	actions {
				        		"routeToSelectedCategory" RouteToSelectedCategory
				        	}
				        }
				        actions {
				        	"filterCards" card.FilterCards
				        }
		        	}
			        deleteCard {
				        List selectedCardIds fromParent
				        confirmDelete
			        	actions {
			        		"deleteCard" card.DeleteCard
			        		"cancelDeleteCard" card.CancelDeleteCard
			        	}
			        }
			        moveCards {
				        display
						rootCategoryInMoveDialog {
							selectedCategory
							dropAllowed
							dropTargetCategoryId
							categoryId
							categoryName
							categoryIndex
							empty
							parentCategoryId
							dictionaryLookup
							givenLanguage
							wantedLanguage
							rootCategoryId
							nonScheduledCount
							editable
							Tree childCategories {
								selectedCategory fromParent
								dropAllowed fromParent
								dropTargetCategoryId fromParent
								expanded
								childCategories
								listId categoryId
								categoryName
								categoryIndex
								empty
								parentCategoryId
								dictionaryLookup
								givenLanguage
								wantedLanguage
								rootCategoryId
								nonScheduledCount
								editable
								actions {
									"collapseTreeItem" card.CollapseTreeItemInMoveDialog
									"expandTreeItem" card.ExpandTreeItemInMoveDialog
									"selectTreeItem" card.SelectTargetCategory
								}
							}
							actions {
									"selectTreeItem" card.SelectTargetCategory
							}
						}
			        	actions {
			        		"moveCardsCancelled" card.MoveCardsCancelled
			        		"moveCards" card.MoveCards
			        	}
			        }
		        }
			}
        }
	}
	footer {
		loggedInUser fromParent
		actions {
			"onClick" RouteToPrivacyPolicy
		}
	}
}








