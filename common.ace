HttpClient 

common



ACE 
Init 
	fromAppState (username, password )
	on user ( 
		set loggedInUser 
		set language
	) triggers ( InitialLogin )
	on noUser ( 
		set loggedInUser 
		set language
	) triggers ( RouteChanged )

RouteChanged
	fromAppState ( hash, loggedInUser ) 
	on login ( 
		set mainView.loginView 
	)
	on privacyPolicy ( 
		set mainView.privacyPolicyView 
	)
	on registration ( 
		set mainView.registrationView
	)
	on confirmEmail triggers (registration.ConfirmEmail)
	on forgotPassword ( 
		set mainView.forgotPasswordView 
	)
	on resetPassword ( 
		set mainView.resetPasswordView 
	)
	on dashboard triggers (box.InitBoxesForDay)
	on categories (
		set mainView.authorView.filterNonScheduled
		set mainView.authorView.priority
		set mainView.authorView.reverse
	) triggers (category.LoadCategoryTree )
	on profile triggers ( profile.LoadUser )
	on userList triggers (admin.GetAllUsers) 
	on nextCard (set mainView.cardView.boxId) triggers (box.LoadNextCard)
	on boxSettings (set mainView.boxSettingsView.boxId) triggers (box.LoadSettings)
	on allActiveCards (set mainView.allActiveCardsView.boxId) triggers (box.LoadActiveCards)
	on boxCreate ( set mainView.boxSettingsView )
	on invalid triggers (Route)
	
Route ( hash ) 
	on ok ( set hash )
	
InitialLogin
	call com.anfelisa.user.GetRole
	loadingFlag displaySpinner 
	on ok (set loggedInUser.role) triggers ( RouteChanged )
	on unauthorized triggers ( DisplayError Logout )
	
Logout 
	on ok ( 
		set loggedInUser
		set username
		set password
	) triggers ( Route RouteChanged )

DisplayError ( error ) 
	fromAppState( language, texts)
	on ok ( set message) 

DisplayErrorAndLogout ( error ) 
	fromAppState( language, texts)
	on ok (set message) triggers ( Logout)

DisplayMessage ( messageKey ) 
	fromAppState( language, texts)
	on ok (set message) 

ClearToast 
	on ok (set message)
	
DisplaySaveBugDialog
	on ok (set displaySaveBugDialog)

DisplayVersionMismatchDialog
	on ok (set displayVersionMismatchDialog)

CancelVersionMismatchDialog
	on ok (set displayVersionMismatchDialog)

DisplayVersionMismatchErrorDialog
	on ok (set displayVersionMismatchErrorDialog)

async CallSaveBug
	fromAppState( loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set displaySaveBugDialog)

HideSaveBugDialog
	on ok (set displaySaveBugDialog) triggers (DisplayMessage)






ui {
	loggedInUser {
		username
		role
		password
	}
	hash location.hash
	username storage
	password storage
	displaySpinner
	language
	texts
	displaySaveBugDialog
	displayVersionMismatchDialog
	displayVersionMismatchErrorDialog
	message {
		type
		text
	}
	group mainView {
		privacyPolicyView {
		}
		loginView {
			username
			saveInLocalStorage
		}
		registrationView {
			displayUsernameSpinner
	        available
	        username
	        email
	        emailInvalid
	        passwordMismatch
		}
		forgotPasswordView {
			username
		}
		resetPasswordView {
			token
			passwordMismatch
		}
		dashboardView {
	    	List boxList {
				openTodaysCards
				categoryName
				categoryId
				boxId
				quality0Count
				quality1Count
				quality2Count
				quality3Count
				quality4Count
				quality5Count
				List countsPerDayNextWeek
				maxCardsPerDay
	    	}
	        deleteBox {
	            confirmDelete
	            boxId
	        }
		}
		boxSettingsView {
	    	maxIntervalInvalid
	    	maxCardsPerDayInvalid
	    	tooManyCardsStatus
			dictionaryLookupInvalid
			
			boxId
			maxInterval
			maxCardsPerDay
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
			categoryId
			
			allActiveCards
			allCards
		} 
		allActiveCardsView {
			boxId
			editable
			List cardList {
				cardId
				given
				wanted
				image
				cardAuthor
				cardIndex
				categoryId
				rootCategoryId
				priority
				next
			}
			List selectedCardIds
		} 
		profileView {
			username
			email
			role
			showDeleteUserDialog
		}
		userListView {
			List userList {
				userId 
				username
				password
				email
				role
				emailConfirmed
			} 
			showDeleteUserDialog 
			usernameToBeDeleted
		}
		cardView {
			cardId
			categoryId
			categoryName
			count
			given
			image
			lastQuality
			rootCategoryId
			scheduledCardId
			reinforceCardId
			scheduledDate
			scoredDate
			wanted
			openTodaysCards
			allTodaysCards
			index
			enableScoreButtons
			displayImage
			boxId
			reverse
		}
		authorView {
	        filterNonScheduled
	        reverse
			reverseBoxExists
			boxId
				
	        priority
			categoryTree {
				selectedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List CategoryTreeItem childCategories
					nonScheduledCount
					editable
				}
				rootCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List CategoryTreeItem childCategories
					nonScheduledCount
					editable
				}
				
				displayDeleteCategory
				
				categoryName
				displayEditCategory
				displayNewCategory
				
				displayInviteUser
				usernameSearchString
				List usernames
				List invitedUsernames
				
				dropAllowed
				dropTargetCategoryId
				movedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List CategoryTreeItem childCategories
				}
				
				previewCsv
			}
	        cardView {
		        List cardList {
					cardId
					given
					wanted
					image
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        }
		        naturalInputOrder
		        filter
		        editedCard {
		        	cardId
		        	given
		        	wanted
		        	index
		        	image
		        }
		        newCard {
		        	given
		        	wanted
		        	index
		        	image
		        	file
		        	displaySpinner
		        	displayTranslateSpinner
		        }
		        List cardDuplicates
		        deleteCard {
		        	confirmDelete
		        	cardId
		        }
		        dictionaryValue
		        List selectedCardIds
		        List movedCardIds
		        dragTargetCardId
	        }
        }
	}
}