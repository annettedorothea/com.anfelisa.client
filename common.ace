HttpClient common





ACE 
Init 
	fromAppState (rootContainer.token )
	on ok (
		set rootContainer.language
		set rootContainer.messageContainer.messages
	)
	on user (
		set rootContainer.loggedInUser.token
	) triggers ( GetUserInfo )
	on noUser triggers ( 
		RouteChanged
	)
	
GetUserInfo (token)
	call com.anfelisa.user.GetUserInfo
	loadingFlag rootContainer.spinner.display 
	on ok (
		set rootContainer.loggedInUser.username
		set rootContainer.loggedInUser.token
	) triggers (RouteChanged)
	on error triggers (Logout) 
	

RouteChanged
	fromAppState ( rootContainer.hash, rootContainer.loggedInUser ) 
	on login ( 
		set rootContainer.mainView 
	)
	on privacyPolicy ( 
		set rootContainer.mainView 
	)
	on registration ( 
		set rootContainer.mainView
	)
	on confirmEmail triggers (
		registration.ConfirmEmail
	)
	on forgotPassword ( 
		set rootContainer.mainView 
	)
	on resetPassword ( 
		set rootContainer.mainView 
	)
	on dashboard (
		set rootContainer.mainView
	) triggers (
		box.InitBoxesForDay
	)
	on categories (
		set rootContainer.mainView
	) triggers (
		category.LoadCategoryTree
	)
	on profile (
		set rootContainer.mainView
	) triggers ( 
		profile.LoadUser
	)
	on nextCard (
		set rootContainer.mainView
	) triggers (
		box.LoadNextCard
	)
	on boxSettings (
		set rootContainer.mainView
	) triggers (
		box.LoadSettings
	)
	on allActiveCards (
		set rootContainer.mainView
	) triggers (
		box.LoadActiveCards
	)
	on boxCreate ( 
		set rootContainer.mainView
	)
	on invalid triggers (
		Route
	)
	
Route ( hash ) 
	on ok ( set rootContainer.hash )
	
RouteToHome on ok ( set rootContainer.hash )
RouteToDashboard on ok ( set rootContainer.hash )
RouteToQueryCards (boxId) on ok ( set rootContainer.hash )
RouteToAuthorView (categoryId, reverse) on ok ( set rootContainer.hash )
RouteToBoxSettings (boxId) on ok ( set rootContainer.hash )
RouteToActiveCards (boxId) on ok ( set rootContainer.hash )
RouteToForgotPassword on ok ( set rootContainer.hash )
RouteToPrivacyPolicy on ok ( set rootContainer.hash )
RouteToRegistration on ok ( set rootContainer.hash )
RouteToProfileView on ok ( set rootContainer.hash )
	
Logout 
	on ok ( 
		set rootContainer.loggedInUser
		set rootContainer.token
	) triggers ( Route )
	
DisplayToast ( textKey, args ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

DisplayErrorToast ( textKey, args  ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

DisplayWarningToast ( textKey, args ) 
	fromAppState( rootContainer.language, rootContainer.messageContainer.messages)
	on ok ( 
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

HideToast (id)
	fromAppState( rootContainer.messageContainer.messages)
	on ok (
		set rootContainer.messageContainer.messages
	) triggers ( delayInMillis 1200 DestroyToast ) 
	
DestroyToast (id)
	fromAppState( rootContainer.messageContainer.messages)
	on ok (set rootContainer.messageContainer.messages)
	
DisplaySaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

DisplayVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

CancelVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

DisplayVersionMismatchErrorDialog
	on ok (set rootContainer.versionMismatchErrorDialog.display)

async CallSaveBug
	fromAppState( rootContainer.loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

HideSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display) triggers (DisplayToast )
	




ui JSX rootContainer {
	loggedInUser {
		username
		token
	}
	hash location
	token storage
	spinner { 
		display
	} 
	language
	saveBugDialog {
		display
	}
	versionMismatchDialog {
		display
	}
	versionMismatchErrorDialog {
		display
	}
	messageContainer {
		List messages {
			type
			text
			id
			visible
			code
			textKey
			args
		}
	}
	group mainView {
		privacyPolicyView {
			display
		}
		loginView {
			username TextInput {
				value
				actions {
					"onChange" login.UsernameChanged
					"onClick" RouteToRegistration
				}
			}
			password PasswordInput {
				value
				actions {
					"onChange" login.PasswordChanged
				}
			}
			saveInLocalStorage CheckBox {
				checked
				actions {
					"onChange" login.ToggleSaveInLocalStorage
				}			
			}
			login Button {
				actions {
					"onClick" login.Login
				}
			}
		}
		registrationView {
	        username TextInput {
	        	value
	        	displayUsernameSpinner
	        	available
	        	actions {
	        		"onChange" registration.UsernameChanged
	        	}
	        }
			password PasswordInput {
				value
				actions {
	        		"onChange" registration.PasswordChanged
	        	}
			}
			passwordRepetition PasswordInput {
				value
				passwordMismatch
				actions {
	        		"onChange" registration.PasswordRepetitionChanged
	        	}
			}
	        email TextInput {
	        	value
	        emailInvalid
	        	actions {
	        		"onChange" registration.EmailChanged
	        	}
	        }
	        buttons {
				register Button {
					disabled
					actions {
						"onClick" registration.RegisterUser
					}
				}
				cancel Button {
					actions {
						"onClick" Route
					}
				}
			}
		}
		forgotPasswordView {
			username TextInput {
	        	value
	        	actions {
	        		"onChange" password.UsernameForgotPasswordChanged
	        	}
	        }
	        buttons {
				forgotPassword Button {
					disabled
					actions {
						"onClick" password.ForgotPassword
					}
				}
				cancel Button {
					actions {
						"onClick" Route
					}
				}
			}
		}
		resetPasswordView {
			token
			password PasswordInput {
				value
				actions {
	        		"onChange" password.PasswordChanged
	        	}
			}
			passwordRepetition PasswordInput {
				value
				passwordMismatch
				actions {
	        		"onChange" password.PasswordRepetitionChanged
	        	}
			}
	        buttons {
				resetPassword Button {
					disabled
					actions {
						"onClick" password.ResetPassword
					}
				}
				cancel Button {
					actions {
						"onClick" Route
					}
				}
			}
		}
		dashboardView {
	    	List boxList {
				openTodaysCards
				categoryName
				categoryId
				listId boxId
				quality0Count
				quality1Count
				quality2Count
				quality3Count
				quality4Count
				quality5Count
				List countsPerDayNextWeek
				maxCardsPerDay
				categoryAuthor
				editable
				reverse
				archived
				deletable
				edit Button {
					categoryId
					reverse
					actions {
						"onClick" RouteToAuthorView
					}
				}
				settings Button {
					boxId
					actions {
						"onClick" RouteToBoxSettings
					}
				}
				archive Button {
					boxId
					archived
					actions {
						"onClick" box.ArchiveBox
					}
				}
				delete Button {
					boxId
					deletable
					actions {
						"onClick" box.DeleteBoxClick
					}
				}
				queryCards Button {
					boxId
					actions {
						"onClick" RouteToQueryCards
					}
				}
				activeCards Button {
					boxId
					actions {
						"onClick" RouteToActiveCards
					}
				}
				actions {
					"onClick" box.BoxClick
				}
	    	}
	        deleteBox {
	            confirmDelete
	            boxId
	        }
	        newBox Button {
	        	actions {
	        		"onClick" Route
	        	}
	        }
		}
		boxSettingsView {
			boxId
			boxSettings {
		    	maxIntervalInvalid
		    	maxCardsPerDayInvalid
		    	tooManyCardsStatus
				dictionaryLookupInvalid
				
				boxId
				maxInterval
				maxCardsPerDay
				categoryName
				dictionaryLookup
				givenLanguage
				wantedLanguage
				categoryId
				deletable
				
				allActiveCards
				allCards
			}
		} 
		allActiveCardsView {
			boxId
			editable
			List activeCardList {
				cardId
				given
				wanted
				cardAuthor
				cardIndex
				categoryId
				rootCategoryId
				priority
				next
				ef
				interval
				count
				lastQuality
			}
			List selectedCardIds

			List selectedLastQualityFilters
		} 
		profileView {
			username
			email
			role
			showDeleteUserDialog
		}
		queryCardView {
			nextCard {
				cardId
				categoryId
				categoryName
				count
				given
				lastQuality
				rootCategoryId
				scheduledCardId
				reinforceCardId
				scheduledDate
				scoredDate
				wanted
				index
			}
			openTodaysCards
			allTodaysCards
			reverse
			enableScoreButtons
			boxId
		}
		authorView {

			boxId
	        reverse
			
			categoryTree {
		        filterNonScheduled
				reverseBoxExists
		        priority
				noComponent selectedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
					dictionaryLookup
					givenLanguage
					wantedLanguage
				}
				rootCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					nonScheduledCount
					editable
					List childCategories
				}
				
				displayDeleteCategory
				
				categoryDialog {
					categoryName
					newCategory
					display
				}
				
				inviteUserDialog {
					display
					usernameSearchString
					List usernames
					List invitedUsers
				}
				
				inviteUserEditableDialog {
					invitedUsername
					editable
					display
				}
				
				deleteCategoryDialog {
					display
				}
				
				dropAllowed
				dropTargetCategoryId
				noComponent movedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
				}
			}
	        cardView {
		        List cardList {
					cardId
					given
					wanted
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        }
		        naturalInputOrder
		        filter
		        noComponent editedCard {
		        	cardId
		        	given
		        	wanted
		        	index
		        }
		        newCard {
		        	given
		        	wanted
		        	index
		        	displaySpinner
		        }
		        List cardDuplicates {
					cardId
					given
					wanted
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        	categoryName
		        }
		        deleteCard {
		        	confirmDelete
		        	cardId
		        }
		        dictionaryValue
		        List selectedCardIds
		        List movedCardIds
		        dragTargetCardId
	        }
        }
	}
	footer {
		loggedInUser
	}
}








