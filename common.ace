HttpClient common



ACE 
Init 
	fromAppState (rootContainer.username, rootContainer.password )
	on user ( 
		set rootContainer.loggedInUser 
		set rootContainer.language
		set rootContainer.messages
	) triggers ( InitialLogin )
	on noUser ( 
		set rootContainer.loggedInUser 
		set rootContainer.language
		set rootContainer.messages
	) triggers ( RouteChanged )

RouteChanged
	fromAppState ( rootContainer.hash, rootContainer.loggedInUser ) 
	on login ( 
		set rootContainer.mainView.loginView 
	)
	on privacyPolicy ( 
		set rootContainer.mainView.privacyPolicyView 
	)
	on registration ( 
		set rootContainer.mainView.registrationView
	)
	on confirmEmail triggers (registration.ConfirmEmail)
	on forgotPassword ( 
		set rootContainer.mainView.forgotPasswordView 
	)
	on resetPassword ( 
		set rootContainer.mainView.resetPasswordView 
	)
	on dashboard triggers (box.InitBoxesForDay)
	on categories (
		set rootContainer.mainView.authorView.filterNonScheduled
		set rootContainer.mainView.authorView.priority
		set rootContainer.mainView.authorView.reverse
	) triggers (category.LoadCategoryTree )
	on profile triggers ( profile.LoadUser )
	on userList triggers (admin.GetAllUsers) 
	on nextCard (set rootContainer.mainView.queryCardView.boxId) triggers (box.LoadNextCard)
	on boxSettings (set rootContainer.mainView.boxSettingsView.boxId) triggers (box.LoadSettings)
	on allActiveCards (set rootContainer.mainView.allActiveCardsView.boxId) triggers (box.LoadActiveCards)
	on boxCreate ( set rootContainer.mainView.boxSettingsView )
	on invalid triggers (Route)
	
Route ( hash ) 
	on ok ( set rootContainer.hash )
	
InitialLogin
	call com.anfelisa.user.GetRole
	loadingFlag rootContainer.spinner 
	on ok (set rootContainer.loggedInUser.role) triggers ( RouteChanged )
	on unauthorized triggers ( DisplayToast Logout )
	
Logout 
	on ok ( 
		set rootContainer.loggedInUser
		set rootContainer.username
		set rootContainer.password
	) triggers ( Route RouteChanged )

DisplayToast ( message ) 
	fromAppState( rootContainer.language, rootContainer.messages)
	on ok ( 
		set rootContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 
	on unauthorized ( 
		set rootContainer.messages
	) triggers ( Logout delayInMillis 5000 HideToast ) 

HideToast (id)
	fromAppState( rootContainer.messages)
	on ok (
		set rootContainer.messages
	) triggers ( delayInMillis 1200 DestroyToast ) 
	
DestroyToast (id)
	fromAppState( rootContainer.messages)
	on ok (set rootContainer.messages)
	
DisplaySaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

DisplayVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

CancelVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

DisplayVersionMismatchErrorDialog
	on ok (set rootContainer.versionMismatchDialog.display)

async CallSaveBug
	fromAppState( rootContainer.loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

HideSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display) triggers (DisplayToast)




ui React_16.8 rootContainer {
	loggedInUser {
		username
		role
		password
	}
	hash location.hash
	username storage
	password storage
	spinner { 
		display
	} 
	language
	saveBugDialog {
		display
	}
	versionMismatchDialog {
		display
	}
	versionMismatchErrorDialog {
		display
	}
	List messages {
		type
		text
		id
		visible
	}
	group mainView {
		privacyPolicyView {
		}
		loginView {
			username
			password
			saveInLocalStorage
		}
		registrationView {
			displayUsernameSpinner
	        available
	        username
	        email
	        emailInvalid
	        passwordMismatch
		}
		forgotPasswordView {
			username
		}
		resetPasswordView {
			token
			passwordMismatch
		}
		dashboardView {
	    	List boxList {
				openTodaysCards
				categoryName
				categoryId
				boxId
				quality0Count
				quality1Count
				quality2Count
				quality3Count
				quality4Count
				quality5Count
				List countsPerDayNextWeek
				maxCardsPerDay
	    	}
	        deleteBox {
	            confirmDelete
	            boxId
	        }
		}
		boxSettingsView {
	    	maxIntervalInvalid
	    	maxCardsPerDayInvalid
	    	tooManyCardsStatus
			dictionaryLookupInvalid
			
			boxId
			maxInterval
			maxCardsPerDay
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
			categoryId
			
			allActiveCards
			allCards
		} 
		allActiveCardsView {
			boxId
			editable
			List activeCardList {
				cardId
				given
				wanted
				image
				cardAuthor
				cardIndex
				categoryId
				rootCategoryId
				priority
				next
				ef
				interval
				count
				lastQuality
			}
			List selectedCardIds
		} 
		profileView {
			username
			email
			role
			showDeleteUserDialog
		}
		userListView {
			List userList {
				userId 
				username
				password
				email
				role
				emailConfirmed
			} 
			showDeleteUserDialog 
			usernameToBeDeleted
		}
		queryCardView {
			cardId
			categoryId
			categoryName
			count
			given
			image
			lastQuality
			rootCategoryId
			scheduledCardId
			reinforceCardId
			scheduledDate
			scoredDate
			wanted
			openTodaysCards
			allTodaysCards
			index
			enableScoreButtons
			displayImage
			boxId
			reverse
		}
		authorView {
	        filterNonScheduled
	        reverse
			reverseBoxExists
			boxId
				
	        priority
			categoryTree {
				selectedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
				}
				rootCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
				}
				
				displayDeleteCategory
				
				categoryName
				displayEditCategory
				displayNewCategory
				
				displayInviteUser
				usernameSearchString
				List usernames
				List invitedUsernames
				
				dropAllowed
				dropTargetCategoryId
				movedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
				}
				
				previewCsv
			}
	        cardView {
		        List cardList {
					cardId
					given
					wanted
					image
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        }
		        naturalInputOrder
		        filter
		        editedCard {
		        	cardId
		        	given
		        	wanted
		        	index
		        	image
		        }
		        newCard {
		        	given
		        	wanted
		        	index
		        	image
		        	file
		        	displaySpinner
		        	displayTranslateSpinner
		        }
		        List cardDuplicates
		        deleteCard {
		        	confirmDelete
		        	cardId
		        }
		        dictionaryValue
		        List selectedCardIds
		        List movedCardIds
		        dragTargetCardId
	        }
        }
	}
}