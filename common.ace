common

target ES6 

ACE {
	init Init {
		on user ( Common.initTexts ) triggers ( InitialLogin )
		on noUser ( Common.initTexts ) triggers ( RouteChanged )
	}
	RouteChanged {
		on login (  Login.render )
		on registration ( Registration.render )
		on dashboard triggers (box.LoadBoxes)
		on profile triggers ( profile.LoadUser )
		on forgotPassword ( ForgotPassword.render )
		on confirmEmail triggers (ConfirmEmail)
		on resetPassword (ResetPassword.render)
		on userList triggers (admin.GetAllUsers) 
		on categories triggers (author.LoadCategories )
		on nextCard triggers (box.LoadNextCard)
		on reinforceCard triggers (box.LoadNextReinforceCard)
		on invalid triggers (Route)
	}
	Route {
		on ok ( Common.updateHash )
	}
	async CheckUsername preUpdateUI (Registration.displayUsernameSpinner) postUpdateUI (Registration.hideUsernameSpinner) {
		on empty
		on available ( Registration.usernameAvailable )
		on notAvailable ( Registration.usernameNotAvailable )
	}
	async RegisterUser preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on ok (Common.displayMessage) triggers (Route)
		on error ( Common.displayError ) 
	}
	async InitialLogin preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on ok ( Common.initUser ) triggers ( RouteChanged )
		on unauthorized ( Common.displayError ) triggers ( Logout )
	}
	async Login preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on saveInLocalStorage ( Common.initUser Common.saveInLocalStorage ) triggers ( Route )
		on doNotSaveInLocalStorage ( Common.initUser ) triggers ( Route )
		on unauthorized ( Common.displayError ) triggers ( Logout )
	}
	Logout {
		on ok ( Common.resetUser ) triggers ( Route )
	}
	async ForgotPassword preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on ok (Common.displayMessage) triggers ( Route )
	}
	async ConfirmEmail preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on ok (Common.displayMessage) triggers (Route)
		on error (Common.displayError) triggers (Route)
	}
	async ResetPassword preUpdateUI (Common.displaySpinner) postUpdateUI (Common.hideSpinner) {
		on ok (Common.displayMessage) triggers (Route)
		on error (Common.displayError) triggers (Route)
	}
	DisplayError {
		on ok (Common.displayError)
	}
	DisplayMessage {
		on ok (Common.displayMessage)
	}
}

views {
	Common {
		displayError
		displayMessage
		displaySpinner
		hideSpinner
		initTexts
		initUser
		saveInLocalStorage
		resetUser
		updateHash
	}
	Login {
		render
	}
	Registration {
		render
		usernameAvailable
		usernameNotAvailable
		displayUsernameSpinner
		hideUsernameSpinner
	}
	ForgotPassword {
		render
	}
	ResetPassword {
		render
	}
}