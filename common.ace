HttpClient common




ACE 
Init 
	fromAppState (rootContainer.username, rootContainer.password )
	on user ( 
		set rootContainer.loggedInUser 
		set rootContainer.language
		set rootContainer.messages
	) triggers ( InitialLogin )
	on noUser ( 
		set rootContainer.loggedInUser 
		set rootContainer.language
		set rootContainer.messages
	) triggers ( 
		RouteChanged
	)

RouteChanged
	fromAppState ( rootContainer.hash, rootContainer.loggedInUser ) 
	on login ( 
		set rootContainer.mainView.loginView 
	)
	on privacyPolicy ( 
		set rootContainer.mainView.privacyPolicyView 
	)
	on registration ( 
		set rootContainer.mainView.registrationView
	)
	on confirmEmail triggers (
		registration.ConfirmEmail
	)
	on forgotPassword ( 
		set rootContainer.mainView.forgotPasswordView 
	)
	on resetPassword ( 
		set rootContainer.mainView.resetPasswordView 
	)
	on dashboard (
		set rootContainer.mainView.dashboardView
	) triggers (
		box.InitBoxesForDay
	)
	on categories (
		set rootContainer.mainView.authorView
	) triggers (
		category.LoadCategoryTree
	)
	on profile triggers ( 
		profile.LoadUser
	)
	on nextCard (
		set rootContainer.mainView.queryCardView
	) triggers (
		box.LoadNextCard
	)
	on boxSettings (
		set rootContainer.mainView.boxSettingsView
	) triggers (
		box.LoadSettings
	)
	on allActiveCards (
		set rootContainer.mainView.allActiveCardsView
	) triggers (
		box.LoadActiveCards
	)
	on boxCreate ( 
		set rootContainer.mainView.boxSettingsView
	)
	on invalid triggers (
		Route
	)
	
	
	
Route ( hash ) 
	on ok ( set rootContainer.hash )
	
InitialLogin
	call com.anfelisa.user.GetRole
	loadingFlag rootContainer.spinner.display 
	on ok (
		set rootContainer.role
	) triggers ( RouteChanged )
	on unauthorized triggers ( DisplayToast Logout )
	
Logout 
	on ok ( 
		set rootContainer.loggedInUser
		set rootContainer.username
		set rootContainer.password
	) triggers ( Route )
	
DisplayToast ( message, error ) 
	fromAppState( rootContainer.language, rootContainer.messages)
	on ok ( 
		set rootContainer.messages
	) triggers ( delayInMillis 5000 HideToast ) 

HideToast (id)
	fromAppState( rootContainer.messages)
	on ok (
		set rootContainer.messages
	) triggers ( delayInMillis 1200 DestroyToast ) 
	
DestroyToast (id)
	fromAppState( rootContainer.messages)
	on ok (set rootContainer.messages)
	
DisplaySaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

DisplayVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

CancelVersionMismatchDialog
	on ok (set rootContainer.versionMismatchDialog.display)

DisplayVersionMismatchErrorDialog
	on ok (set rootContainer.versionMismatchErrorDialog.display)

async CallSaveBug
	fromAppState( rootContainer.loggedInUser.username )
	on ok triggers (HideSaveBugDialog)

CancelSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display)

HideSaveBugDialog
	on ok (set rootContainer.saveBugDialog.display) triggers (DisplayToast)




ui JSX rootContainer {
	loggedInUser {
		username
		password
	}
	hash location.hash
	username storage
	password storage
	role
	spinner { 
		display
	} 
	language
	saveBugDialog {
		display
	}
	versionMismatchDialog {
		display
	}
	versionMismatchErrorDialog {
		display
	}
	List messages {
		type
		text
		id
		visible
		code
		textKey
	}
	group mainView {
		privacyPolicyView {
			display
		}
		loginView {
			username
			password
			saveInLocalStorage
		}
		registrationView {
			displayUsernameSpinner
	        available
	        username
			password
			passwordRepetition
	        passwordMismatch
	        email
	        emailInvalid
		}
		forgotPasswordView {
			username
		}
		resetPasswordView {
			token
			password
			passwordRepetition
			passwordMismatch
		}
		dashboardView {
	    	List boxList {
				openTodaysCards
				categoryName
				categoryId
				boxId
				quality0Count
				quality1Count
				quality2Count
				quality3Count
				quality4Count
				quality5Count
				List countsPerDayNextWeek
				maxCardsPerDay
				categoryAuthor
				editable
				reverse
	    	}
	        deleteBox {
	            confirmDelete
	            boxId
	        }
		}
		boxSettingsView {
	    	maxIntervalInvalid
	    	maxCardsPerDayInvalid
	    	tooManyCardsStatus
			dictionaryLookupInvalid
			
			boxId
			maxInterval
			maxCardsPerDay
			categoryName
			dictionaryLookup
			givenLanguage
			wantedLanguage
			categoryId
			shared
			
			allActiveCards
			allCards
		} 
		allActiveCardsView {
			boxId
			editable
			List activeCardList {
				cardId
				given
				wanted
				cardAuthor
				cardIndex
				categoryId
				rootCategoryId
				priority
				next
				ef
				interval
				count
				lastQuality
			}
			List selectedCardIds
		} 
		profileView {
			username
			email
			role
			showDeleteUserDialog
		}
		queryCardView {
			cardId
			categoryId
			categoryName
			count
			given
			lastQuality
			rootCategoryId
			scheduledCardId
			reinforceCardId
			scheduledDate
			scoredDate
			wanted
			openTodaysCards
			allTodaysCards
			index
			enableScoreButtons
			boxId
			reverse
		}
		authorView {

			boxId
	        reverse
			
			categoryTree {
		        filterNonScheduled
				reverseBoxExists
		        priority
				noComponent selectedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
				}
				rootCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
					nonScheduledCount
					editable
				}
				
				displayDeleteCategory
				
				categoryDialog {
					categoryName
					newCategory
					display
				}
				
				inviteUserDialog {
					display
					usernameSearchString
					List usernames
					List invitedUsernames
				}
				
				deleteCategoryDialog {
					display
				}
				
				dropAllowed
				dropTargetCategoryId
				noComponent movedCategory {
					categoryId
					categoryName
					categoryIndex
					empty
					parentCategoryId
					dictionaryLookup
					givenLanguage
					wantedLanguage
					rootCategoryId
					List childCategories
				}
			}
	        cardView {
		        List cardList {
					cardId
					given
					wanted
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        }
		        naturalInputOrder
		        filter
		        noComponent editedCard {
		        	cardId
		        	given
		        	wanted
		        	index
		        }
		        newCard {
		        	given
		        	wanted
		        	index
		        	displaySpinner
		        }
		        List cardDuplicates {
					cardId
					given
					wanted
					cardAuthor
					cardIndex
					categoryId
					rootCategoryId
		        	next
		        	categoryName
		        }
		        deleteCard {
		        	confirmDelete
		        	cardId
		        }
		        dictionaryValue
		        List selectedCardIds
		        List movedCardIds
		        dragTargetCardId
	        }
        }
	}
}