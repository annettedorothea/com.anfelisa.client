common

target ES6

ACE {
	init Init {
		on forgotPassword (Common.initLanguageInLocalStorage navigation.Boxes.hideBoxes ) triggers ( profile.OpenForgotPassword)
		on newPassword (Common.initLanguageInLocalStorage navigation.Boxes.hideBoxes ) triggers ( profile.OpenNewPassword)
		on register (Common.initLanguageInLocalStorage navigation.Boxes.hideBoxes ) triggers ( profile.OpenRegistration)
		on confirmEmail triggers (profile.ConfirmEmail)

		on box (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes navigation.ReadNextCard )
		on reinforce (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes navigation.ReadReinforceCards )
		on profile (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole profile.OpenProfile navigation.ReadBoxes )
		on profileBoxCreate (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes profile.OpenBoxCreation )
		on profileBoxEdit (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes profile.LoadBox )
		on profilePassword (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes profile.OpenChangePassword )

		on admin (Common.initLanguageInLocalStorage Common.initUserInLocalStorage ) triggers ( GetRole navigation.ReadBoxes admin.LoadAllUsers )
		
		//on courseCreation (Common.initLanguageInLocalStorage Common.initUserInLocalStorage author.Course.renderCreateCourse ) triggers ( GetRole navigation.ReadPrivateCourses navigation.ReadBoxes )
	}
	Route {
		on ok ( Common.updateHash ) triggers ( Init )
	}
	RouteHome {
		on ok ( Common.updateHash ) triggers ( Init )
	}
	Login {
		on ok (Common.initUserInLocalStorage ) triggers ( Route )
		on unauthorized ( Error.renderError ) triggers ( Logout )
	}
	Logout {
		on ok (Common.removeUserFromLocalStorage navigation.Boxes.hideBoxes ) triggers ( Route )
	}
	ValidateRequiredField {
		on fieldEmpty ( Validation.fieldEmpty )
		on fieldNotEmpty ( Validation.fieldNotEmpty )
	}
	OpenReallyDeleteDialog {
		on removeCourseFromUser (ReallyDeleteDialog.displayRemoveCourseFromUserDialog)
		on deleteBox (ReallyDeleteDialog.displayDeleteBoxDialog)
		on removedCard (ReallyDeleteDialog.displayRemoveCardFromBoxDialog)
		on deleteUser (ReallyDeleteDialog.displayDeleteUserDialog)
	}
	CloseAllDialogs {
		on ok 
	}
	SwitchLanguage {
		on ok (Common.initLanguageInLocalStorage) triggers (Init)
	}
	GetRole {
		on ok ( Common.initRoleInLocalStorage Header.renderLogout)
		on unauthorized ( common.Error.renderError ) triggers (common.Logout)
	}
}

views {
	Error {
		renderError
	}
	Message {
		renderMessage
	}
	Common {
		initLanguageInLocalStorage
		updateHash
		initUserInLocalStorage
		initRoleInLocalStorage
		removeUserFromLocalStorage
	}
	Header {
		renderLogout
	}
	Validation {
		fieldEmpty
		fieldNotEmpty
	}
	ReallyDeleteDialog {
		displayRemoveCourseFromUserDialog
		displayDeleteBoxDialog
		displayRemoveCardFromBoxDialog
		displayDeleteUserDialog
	}
}