HttpClient 

card

ACE
	LoadCards
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory, 
			common.rootContainer.mainView.authorView.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.filterNonScheduled,
			common.rootContainer.mainView.authorView.priority,
			common.rootContainer.mainView.authorView.reverse
		)
		call com.anfelisa.card.GetCards
		loadingFlag common.rootContainer.spinner 
		on ok ( merge common.rootContainer.mainView.authorView.cardView )
		on noCategorySelected ( set common.rootContainer.mainView.authorView.cardView.cardList )
	
	CreateCard 
	 	fromAppState (
	 		common.rootContainer.mainView.authorView.cardView.newCard.wanted,
	 		common.rootContainer.mainView.authorView.cardView.newCard.given,
	 		common.rootContainer.mainView.authorView.cardView.newCard.image,
	 		common.rootContainer.mainView.authorView.categoryTree.selectedCategory.categoryId
	 	)
	 	call com.anfelisa.card.CreateCard
		loadingFlag common.rootContainer.spinner 
		on ok ( set common.rootContainer.mainView.authorView.cardView.newCard )
		triggers (LoadCards)
	
	UpdateCard 
	 	fromAppState (
	 		common.rootContainer.mainView.authorView.cardView.editedCard.wanted,
	 		common.rootContainer.mainView.authorView.cardView.editedCard.given,
	 		common.rootContainer.mainView.authorView.cardView.editedCard.image,
	 		common.rootContainer.mainView.authorView.cardView.editedCard.cardId
	 	)
	 	call com.anfelisa.card.UpdateCard
		loadingFlag common.rootContainer.spinner 
		on ok ( set common.rootContainer.mainView.authorView.cardView.editedCard )
		triggers (LoadCards)
	
	UpdateCardPriority(cardId, priority, actualPriority)
	 	call com.anfelisa.card.UpdateCardPriority
		loadingFlag common.rootContainer.spinner 
		on ok triggers (LoadCards)
	
	
	DeleteCard 
	 	fromAppState ( common.rootContainer.mainView.authorView.cardView.deleteCard.cardId )
	 	call com.anfelisa.card.DeleteCard
		loadingFlag common.rootContainer.spinner 
		on ok ( 
			set common.rootContainer.mainView.authorView.cardView.deleteCard
		) triggers (LoadCards)
		on error ( 
			set common.rootContainer.mainView.authorView.cardView.deleteCard
		) triggers (common.DisplayError)


	GivenOfNewCardChanged ( given )
		on ok (merge common.rootContainer.mainView.authorView.cardView.newCard)
	
	WantedOfNewCardChanged ( wanted )
		on ok (merge common.rootContainer.mainView.authorView.cardView.newCard)
	
	CancelNewCard 
		on ok (set common.rootContainer.mainView.authorView.cardView.newCard)
	
	
	GivenOfEditedCardChanged ( given )
		on ok (merge common.rootContainer.mainView.authorView.cardView.editedCard)
	
	WantedOfEditedCardChanged ( wanted )
		on ok (merge common.rootContainer.mainView.authorView.cardView.editedCard)
	
	CancelEditCard 
		on ok (set common.rootContainer.mainView.authorView.cardView.editedCard)
	
	EditCard ( cardId )
		fromAppState (common.rootContainer.mainView.authorView.cardView.cardList)
		on ok (set common.rootContainer.mainView.authorView.cardView.editedCard)
	
	DeleteCardClick ( cardId )
		on ok (set common.rootContainer.mainView.authorView.cardView.deleteCard)
	
	CancelDeleteCard 
		on ok (set common.rootContainer.mainView.authorView.cardView.deleteCard)
	
	FilterCards ( filter )
		on ok (set common.rootContainer.mainView.authorView.cardView.filter)
	
	PassValueToDictionary 
		fromAppState (common.rootContainer.mainView.authorView.cardView.naturalInputOrder, common.rootContainer.mainView.authorView.cardView.newCard.given, common.rootContainer.mainView.authorView.cardView.newCard.wanted)
		on ok (set common.rootContainer.mainView.authorView.cardView.dictionaryValue)
	
	
	ToggleInputOrder
		fromAppState (common.rootContainer.mainView.authorView.cardView.naturalInputOrder)
		on ok (set common.rootContainer.mainView.authorView.cardView.naturalInputOrder)
	
	
	LoadWantedImageOfNewCard ( image )
		on ok ( set common.rootContainer.mainView.authorView.cardView.newCard.image )
	
	LoadWantedImageOfEditedCard ( image )
		on ok ( set common.rootContainer.mainView.authorView.cardView.editedCard.image )
	
	RemoveNewCardImage 
		on ok ( set common.rootContainer.mainView.authorView.cardView.newCard.image )
	
	RemoveEditedCardImage 
		on ok ( set common.rootContainer.mainView.authorView.cardView.editedCard.image )
	
	ToggleScheduleCardSelection ( cardId )
		fromAppState (common.rootContainer.mainView.authorView.cardView.selectedCardIds)
		on ok (set common.rootContainer.mainView.authorView.cardView.selectedCardIds)
	
	ToggleAllScheduleCardSelection 
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.selectedCardIds,
			common.rootContainer.mainView.authorView.cardView.cardList
		)
		on ok (set common.rootContainer.mainView.authorView.cardView.selectedCardIds)
	
	ScheduleSelectedCards
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.selectedCardIds as cardIds,
			common.rootContainer.mainView.authorView.boxId,
			common.rootContainer.mainView.authorView.filterNonScheduled
		) 
	 	call com.anfelisa.box.ScheduleCards
		loadingFlag common.rootContainer.spinner 
		on noFilter triggers (LoadCards)
		on filter triggers (category.LoadCategoryTree)
			
		
	SortSelectedCardsOut 
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.selectedCardIds as cardIds,
			common.rootContainer.mainView.authorView.boxId
		) 
	 	call com.anfelisa.box.SortCardsOut
		loadingFlag common.rootContainer.spinner 
		on ok triggers (LoadCards)
		
	MoveCardsStarted
		fromAppState (common.rootContainer.mainView.authorView.cardView.selectedCardIds) 
		on ok (set common.rootContainer.mainView.authorView.cardView.movedCardIds)
		
	MoveCards
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.movedCardIds,
			common.rootContainer.mainView.authorView.categoryTree.dropTargetCategoryId,
			common.rootContainer.mainView.authorView.categoryTree.rootCategory
		)
	 	call com.anfelisa.card.MoveCards
		loadingFlag common.rootContainer.spinner 
		on ok (
			set common.rootContainer.mainView.authorView.cardView.movedCardIds
		) triggers (category.LoadCategoryTree)
		
		
	ChangeCardOrder ( cardId )
		fromAppState ( common.rootContainer.mainView.authorView.cardView.movedCardIds	)
	 	call com.anfelisa.card.ChangeOrder
		loadingFlag common.rootContainer.spinner 
		on ok (
			set common.rootContainer.mainView.authorView.cardView.movedCardIds
		) triggers (LoadCards)
	
	OnDragEnter ( dragTargetCardId )
		on ok (set common.rootContainer.mainView.authorView.cardView.dragTargetCardId)
		
	OnDragExit ( dragTargetCardId )
		on ok (set common.rootContainer.mainView.authorView.cardView.dragTargetCardId)
		
	SearchDuplicateCards 
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.cardView.newCard.given,
			common.rootContainer.mainView.authorView.cardView.newCard.wanted,
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory.categoryId
		)
		call com.anfelisa.card.GetDuplicates
		loadingFlag common.rootContainer.mainView.authorView.cardView.newCard.displaySpinner 
		on ok ( set common.rootContainer.mainView.authorView.cardView.cardDuplicates )
		
	Translate 
		fromAppState (
			common.rootContainer.mainView.authorView.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.cardView.newCard.given,
			common.rootContainer.mainView.authorView.cardView.newCard.wanted,
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory.givenLanguage,
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory.wantedLanguage
		)
		call com.anfelisa.card.GetTranslation
		loadingFlag common.rootContainer.mainView.authorView.cardView.newCard.displayTranslateSpinner 
		on wantedFetched (merge common.rootContainer.mainView.authorView.cardView.newCard ) triggers (SearchDuplicateCards)
		on givenFetched (merge common.rootContainer.mainView.authorView.cardView.newCard ) triggers (SearchDuplicateCards)
		on error
		on empty
		on targetNotEmtpy
	
	