HttpClient 

card

ACE
	LoadCards
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory, 
			common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.categoryTree.filter.filterNonScheduled.value as filterNonScheduled,
			common.rootContainer.mainView.authorView.categoryTree.filter.priority.value as priority,
			common.rootContainer.mainView.authorView.reverse
		)
		call com.anfelisa.card.GetCards
		set loading common.rootContainer.spinner.display 
		on ok ( 
			merge common.rootContainer.mainView.authorView.categoryTree.cardView
		)
	
	CreateCard 
	 	fromAppState (
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wantedImage,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.givenImage,
	 		common.rootContainer.mainView.authorView.categoryTree.selectedCategory.categoryId
	 	)
	 	call com.anfelisa.card.CreateCard
		set loading common.rootContainer.spinner.display 
		on ok ( merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard )
		triggers (LoadCards)
	
	UpdateCard 
	 	fromAppState (
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.wanted,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.wantedImage,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.given,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.givenImage,
	 		common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.cardId
	 	)
	 	call com.anfelisa.card.UpdateCard
		set loading common.rootContainer.spinner.display 
		on ok ( merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard )
		triggers (LoadCards)
	
	UpdateCardPriority(cardId, priority)
	 	call com.anfelisa.card.UpdateCardPriority
		set loading common.rootContainer.spinner.display 
		on ok triggers (LoadCards)
	
	DeleteCard 
	 	fromAppState ( common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds )
	 	call com.anfelisa.card.DeleteCard
		set loading common.rootContainer.spinner.display 
		on ok ( 
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.deleteCard
		) triggers (LoadCards)

	GivenOfNewCardChanged ( given )
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given
		) triggers ( delayInMillis 1000 takeLatest SearchDuplicateCards )
	
	GivenImageOfNewCardChanged ( givenImage )
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.givenImage
		) triggers ( delayInMillis 1000 takeLatest SearchDuplicateCards )
	
	WantedOfNewCardChanged ( wanted )
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted
		) triggers ( delayInMillis 1000 takeLatest SearchDuplicateCards )
	
	WantedImageOfNewCardChanged ( wantedImage )
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wantedImage
		) triggers ( delayInMillis 1000 takeLatest SearchDuplicateCards )
	
	CancelNewCard 
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard)
	
	
	GivenOfEditedCardChanged ( given )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.given)
	
	GivenImageOfEditedCardChanged ( givenImage )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.givenImage)
	
	WantedOfEditedCardChanged ( wanted )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.wanted)
	
	WantedImageOfEditedCardChanged ( wantedImage )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard.wantedImage)
	
	CancelEditCard 
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard)
	
	EditCard ( cardId )
		fromAppState (common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.cardList)
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.editedCard
		)
	
	DeleteCardClick ( cardId )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.deleteCard)
	
	CancelDeleteCard 
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.deleteCard)
	
	FilterCards ( filter )
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.filter)
	
	PassValueToDictionary 
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder, 
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given, 
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted
		)
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.dictionaryValue
		)
	
	
	ToggleInputOrder
		fromAppState (common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder)
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder)
	
	
	ToggleScheduleCardSelection ( cardId )
		fromAppState (common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds)
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds)
	
	SelectScheduleCardRange ( cardId )
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.cardList,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.filter
		)
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds
		)
		on noSelection triggers (
			ToggleScheduleCardSelection
		)
	
	ToggleAllScheduleCardSelection 
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.cardList,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.filter
		)
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds)
	
	ScheduleSelectedCards
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds as cardIds,
			common.rootContainer.mainView.authorView.boxId,
			common.rootContainer.mainView.authorView.categoryTree.filter.filterNonScheduled.value as filterNonScheduled
		) 
	 	call com.anfelisa.box.ScheduleCards
		set loading common.rootContainer.spinner.display 
		on noFilter triggers (LoadCards)
		on filter triggers (category.ReloadCategoryTree)
			
		
	SortSelectedCardsOut 
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds as cardIds,
			common.rootContainer.mainView.authorView.boxId
		) 
	 	call com.anfelisa.box.SortCardsOut
		set loading common.rootContainer.spinner.display 
		on ok triggers (LoadCards)
	
	MoveCardsClicked
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds,
			common.rootContainer.mainView.authorView.categoryTree.rootCategory
		) 
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards
		)
		
	MoveCardsCancelled
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards)
		
	ExpandTreeItemInMoveDialog ( categoryId  )
		fromAppState (common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog)
		on ok (merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog)
	
	CollapseTreeItemInMoveDialog ( categoryId )
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog,
			common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog.selectedCategory

		)
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog
		)
		on selectParentCategory (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog 
		) triggers( SelectTargetCategory )
	
	SelectTargetCategory ( categoryId  )
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog
		)
		on ok ( merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog.selectedCategory)
		
	MoveCards
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.selectedCardIds,
			common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards.rootCategoryInMoveDialog.selectedCategory
		)
	 	call com.anfelisa.card.MoveCards
		set loading common.rootContainer.spinner.display 
		on ok (
			merge common.rootContainer.mainView.authorView.categoryTree.cardView.moveCards
			set common.rootContainer.mainView.authorView.categoryTree.selectedCategory
		) triggers (category.ReloadCategoryTree)

		
	ChangeCardOrder 
	 	call com.anfelisa.card.ChangeOrder
		set loading common.rootContainer.spinner.display 
		on ok (
		) triggers (LoadCards)
	
	SearchDuplicateCards 
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted,
			common.rootContainer.mainView.authorView.categoryTree.selectedCategory.categoryId
		)
		call com.anfelisa.card.GetDuplicates
		set loading common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.displaySpinner 
		on ok ( merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.cardDuplicates )
		
	Translate 
		fromAppState (
			common.rootContainer.mainView.authorView.categoryTree.cardView.naturalInputOrder,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given,
			common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted,
			common.rootContainer.mainView.authorView.categoryTree.rootCategory.givenLanguage,
			common.rootContainer.mainView.authorView.categoryTree.rootCategory.wantedLanguage
		)
		call com.anfelisa.card.GetTranslation
		set loading common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.displaySpinner 
		on wantedFetched (merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.wanted ) triggers (SearchDuplicateCards)
		on givenFetched (merge common.rootContainer.mainView.authorView.categoryTree.cardView.cardTable.newCard.given ) triggers (SearchDuplicateCards)
		on error
		on empty
		on targetNotEmtpy
		
		
	
	