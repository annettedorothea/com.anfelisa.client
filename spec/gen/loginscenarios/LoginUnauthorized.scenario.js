/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const LoginActionIds  = require("../../gen/actionIds/login/LoginActionIds");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const Verifications = require("../../src/loginscenarios/LoginUnauthorizedVerifications");

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appStates = {};
let verifications = {};
    
describe("loginscenarios.LoginUnauthorized", function () {
    beforeAll(async function () {
    	driver = ScenarioUtils.createDriver();
    	let appState;
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);

		await ScenarioUtils.invokeAction(driver, LoginActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.username = appState;
		
		
		await ScenarioUtils.invokeAction(driver, LoginActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.password = appState;
		
		
		await ScenarioUtils.invokeAction(driver, LoginActionIds.login);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.loggedInUserIsNotSet = appState;
		appStates.usernameInLocalStorageWasNotSet = appState;
		
		verifications.errorMessageShown = await Verifications.errorMessageShown(appState.rootContainer.messages);
		
    });

	it("username", async () => {
		expect(appStates.username.rootContainer.mainView.loginView.username, "username").toEqual(`username-${testId}`)
	});
	
	it("password", async () => {
		expect(appStates.password.rootContainer.mainView.loginView.password, "password").toEqual(`5f4dcc3b5aa765d61d8327deb882cf99`)
	});
	
	it("loggedInUserIsNotSet", async () => {
		expect(appStates.loggedInUserIsNotSet.rootContainer.loggedInUser, "loggedInUserIsNotSet").toEqual(null)
	});
	it("usernameInLocalStorageWasNotSet", async () => {
		expect(appStates.usernameInLocalStorageWasNotSet.rootContainer.token, "usernameInLocalStorageWasNotSet").toEqual(undefined)
	});
	
	it("errorMessageShown", async () => {
		expect(verifications.errorMessageShown, "verifications.errorMessageShown").toBeTrue();
	});

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
    
});





/******* S.D.G. *******/




