/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const BoxActionIds  = require("../../gen/actionIds/box/BoxActionIds");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const RegistrationActionIds  = require("../../gen/actionIds/registration/RegistrationActionIds");
const Verifications = require("../../src/boxscenarios/WantedLanguageChangedVerifications");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appState;
    
describe("boxscenarios.WantedLanguageChanged", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`pas`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		await ScenarioUtils.addNonDeterministicValueClient(
			driver,
			{
				uuid: `uuid-${testId}`
			}
		);
		await ScenarioUtils.addNonDeterministicValueServer(driver, `uuid-${testId}`, "token", `${testId}-TOKEN`);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.registerUser);
		await ScenarioUtils.waitInMillis(1000);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#box/create`]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.categoryNameChanged, [`categoryName`]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.dictionaryLookupChanged);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.givenLanguageChanged, [`de`]);

		await ScenarioUtils.invokeAction(driver, BoxActionIds.wantedLanguageChanged, [`en`]);
		
		appState = await ScenarioUtils.getAppState(driver);
    });

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
	it("dictionaryLookup", async () => {
		expect(appState.rootContainer.mainView.dictionaryLookup, "dictionaryLookup").toEqual(true)
	});
	it("dictionaryLookupInvalid", async () => {
		expect(appState.rootContainer.mainView.dictionaryLookupInvalid, "dictionaryLookupInvalid").toEqual(false)
	});
	it("givenLanguage", async () => {
		expect(appState.rootContainer.mainView.givenLanguage, "givenLanguage").toEqual(`de`)
	});
	it("wantedLanguage", async () => {
		expect(appState.rootContainer.mainView.wantedLanguage, "wantedLanguage").toEqual(`en`)
	});
    
	it("saveEnabled", async () => {
		await Verifications.saveEnabled(driver, testId);
	});
	it("givenLanguageEnabled", async () => {
		await Verifications.givenLanguageEnabled(driver, testId);
	});
	it("wantedLanguageEnabled", async () => {
		await Verifications.wantedLanguageEnabled(driver, testId);
	});
    
});





/******* S.D.G. *******/




