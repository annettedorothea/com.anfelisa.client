/********************************************************************************
 * generated by de.acegen 1.6.0
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const RegistrationActionIds  = require("../../gen/actionIds/registration/RegistrationActionIds");
const Verifications = require("../../src/boxscenarios/RouteToBoxCreateVerifications");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appState;
    
describe("boxscenarios.RouteToBoxCreate", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`pas`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `uuid-${testId}`
			}
		);
		await ScenarioUtils.addSquishyValueServer(driver, `uuid-${testId}`, "token", `${testId}-TOKEN`);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.registerUser);
		await ScenarioUtils.waitInMillis(1000);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#box/create`]);
		
		appState = await ScenarioUtils.getAppState(driver);
    });

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
	it("allActiveCards", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.allActiveCards, "allActiveCards").toEqual(undefined)
	});
	it("allCards", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.allCards, "allCards").toEqual(undefined)
	});
	it("dictionaryLookup", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookup, "dictionaryLookup").toEqual(false)
	});
	it("dictionaryLookupInvalid", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookupInvalid, "dictionaryLookupInvalid").toEqual(undefined)
	});
	it("boxId", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.boxId, "boxId").toEqual(``)
	});
	it("categoryName", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.categoryName, "categoryName").toEqual(``)
	});
	it("categoryId", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.categoryId, "categoryId").toEqual(undefined)
	});
	it("givenLanguage", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.givenLanguage, "givenLanguage").toEqual(``)
	});
	it("maxCardsPerDay", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDay, "maxCardsPerDay").toEqual(8)
	});
	it("maxCardsPerDayInvalid", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDayInvalid, "maxCardsPerDayInvalid").toEqual(undefined)
	});
	it("maxInterval", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.maxInterval, "maxInterval").toEqual(``)
	});
	it("maxIntervalInvalid", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.maxIntervalInvalid, "maxIntervalInvalid").toEqual(undefined)
	});
	it("shared", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.shared, "shared").toEqual(undefined)
	});
	it("tooManyCardsStatus", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.tooManyCardsStatus, "tooManyCardsStatus").toEqual(undefined)
	});
	it("wantedLanguage", async () => {
		expect(appState.rootContainer.mainView.boxSettingsView.boxSettings.wantedLanguage, "wantedLanguage").toEqual(``)
	});
    
	it("saveDisabled", async () => {
		await Verifications.saveDisabled(driver, testId);
	});
	it("givenLanguageDisabled", async () => {
		await Verifications.givenLanguageDisabled(driver, testId);
	});
	it("wantedLanguageDisabled", async () => {
		await Verifications.wantedLanguageDisabled(driver, testId);
	});
    
});





/******* S.D.G. *******/




