/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const LoginActionIds  = require("../../gen/actionIds/login/LoginActionIds");
const RegistrationActionIds  = require("../../gen/actionIds/registration/RegistrationActionIds");
const BoxActionIds  = require("../../gen/actionIds/box/BoxActionIds");
const Verifications = require("../../src/boxscenarios/CreateRootCategoryVerifications");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appStates = {};
let verifications = {};
    
describe("boxscenarios.CreateRootCategory", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();
    	let appState;
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.waitInMillis(200);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `uuid-${testId}`
			}
		);
		await ScenarioUtils.addSquishyValueServer(driver, `uuid-${testId}`, "token", `${testId}-TOKEN`);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.registerUser);
		await ScenarioUtils.waitInMillis(200);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.logout);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.login);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#box/create`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.allActiveCards = appState;
		appStates.allCards = appState;
		appStates.dictionaryLookup0 = appState;
		appStates.dictionaryLookupInvalid0 = appState;
		appStates.boxId = appState;
		appStates.categoryName0 = appState;
		appStates.categoryId = appState;
		appStates.givenLanguage = appState;
		appStates.maxCardsPerDay0 = appState;
		appStates.maxCardsPerDayInvalid0 = appState;
		appStates.maxInterval0 = appState;
		appStates.maxIntervalInvalid0 = appState;
		appStates.shared = appState;
		appStates.tooManyCardsStatus = appState;
		appStates.wantedLanguage = appState;
		
		verifications.saveDisabled = await Verifications.saveDisabled(driver, testId);
		verifications.givenLanguageDisabled = await Verifications.givenLanguageDisabled(driver, testId);
		verifications.wantedLanguageDisabled = await Verifications.wantedLanguageDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.categoryNameChanged, [`categoryWithDictionary`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.categoryName = appState;
		
		verifications.saveEnabled = await Verifications.saveEnabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.maxCardsPerDayChanged, [12]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.maxCardsPerDay = appState;
		appStates.maxCardsPerDayInvalid = appState;
		
		verifications.saveEnabled = await Verifications.saveEnabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.maxIntervalChanged, [30]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.maxInterval = appState;
		appStates.maxIntervalInvalid = appState;
		
		verifications.saveEnabled = await Verifications.saveEnabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.dictionaryLookupChanged);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.dictionaryLookup = appState;
		appStates.dictionaryLookupInvalid = appState;
		
		verifications.saveDisabled = await Verifications.saveDisabled(driver, testId);
		verifications.givenLanguageEnabled = await Verifications.givenLanguageEnabled(driver, testId);
		verifications.wantedLanguageEnabled = await Verifications.wantedLanguageEnabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.givenLanguageChanged, [`de`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.dictionaryLookup1 = appState;
		appStates.dictionaryLookupInvalid1 = appState;
		appStates.givenLanguage1 = appState;
		appStates.wantedLanguage1 = appState;
		
		verifications.saveDisabled = await Verifications.saveDisabled(driver, testId);
		verifications.givenLanguageEnabled = await Verifications.givenLanguageEnabled(driver, testId);
		verifications.wantedLanguageEnabled = await Verifications.wantedLanguageEnabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, BoxActionIds.wantedLanguageChanged, [`en`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.dictionaryLookup2 = appState;
		appStates.dictionaryLookupInvalid2 = appState;
		appStates.givenLanguage2 = appState;
		appStates.wantedLanguage2 = appState;
		
		verifications.saveEnabled = await Verifications.saveEnabled(driver, testId);
		verifications.givenLanguageEnabled = await Verifications.givenLanguageEnabled(driver, testId);
		verifications.wantedLanguageEnabled = await Verifications.wantedLanguageEnabled(driver, testId);
		
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `box-${testId}`
			}
		);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.createRootCategory);
		await ScenarioUtils.waitInMillis(10);
		await ScenarioUtils.waitInMillis(500);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.boxList = appState;
		appStates.deleteBox = appState;
		
		
    });

	it("allActiveCards", async () => {
		expect(appStates.allActiveCards.rootContainer.mainView.boxSettingsView.boxSettings.allActiveCards, "allActiveCards").toEqual(undefined)
	});
	it("allCards", async () => {
		expect(appStates.allCards.rootContainer.mainView.boxSettingsView.boxSettings.allCards, "allCards").toEqual(undefined)
	});
	it("dictionaryLookup0", async () => {
		expect(appStates.dictionaryLookup0.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookup, "dictionaryLookup0").toEqual(false)
	});
	it("dictionaryLookupInvalid0", async () => {
		expect(appStates.dictionaryLookupInvalid0.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookupInvalid, "dictionaryLookupInvalid0").toEqual(undefined)
	});
	it("boxId", async () => {
		expect(appStates.boxId.rootContainer.mainView.boxSettingsView.boxSettings.boxId, "boxId").toEqual(``)
	});
	it("categoryName0", async () => {
		expect(appStates.categoryName0.rootContainer.mainView.boxSettingsView.boxSettings.categoryName, "categoryName0").toEqual(``)
	});
	it("categoryId", async () => {
		expect(appStates.categoryId.rootContainer.mainView.boxSettingsView.boxSettings.categoryId, "categoryId").toEqual(undefined)
	});
	it("givenLanguage", async () => {
		expect(appStates.givenLanguage.rootContainer.mainView.boxSettingsView.boxSettings.givenLanguage, "givenLanguage").toEqual(``)
	});
	it("maxCardsPerDay0", async () => {
		expect(appStates.maxCardsPerDay0.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDay, "maxCardsPerDay0").toEqual(8)
	});
	it("maxCardsPerDayInvalid0", async () => {
		expect(appStates.maxCardsPerDayInvalid0.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDayInvalid, "maxCardsPerDayInvalid0").toEqual(undefined)
	});
	it("maxInterval0", async () => {
		expect(appStates.maxInterval0.rootContainer.mainView.boxSettingsView.boxSettings.maxInterval, "maxInterval0").toEqual(``)
	});
	it("maxIntervalInvalid0", async () => {
		expect(appStates.maxIntervalInvalid0.rootContainer.mainView.boxSettingsView.boxSettings.maxIntervalInvalid, "maxIntervalInvalid0").toEqual(undefined)
	});
	it("shared", async () => {
		expect(appStates.shared.rootContainer.mainView.boxSettingsView.boxSettings.shared, "shared").toEqual(undefined)
	});
	it("tooManyCardsStatus", async () => {
		expect(appStates.tooManyCardsStatus.rootContainer.mainView.boxSettingsView.boxSettings.tooManyCardsStatus, "tooManyCardsStatus").toEqual(undefined)
	});
	it("wantedLanguage", async () => {
		expect(appStates.wantedLanguage.rootContainer.mainView.boxSettingsView.boxSettings.wantedLanguage, "wantedLanguage").toEqual(``)
	});
	
	it("saveDisabled", async () => {
		expect(verifications.saveDisabled, "verifications.saveDisabled").toBeTrue();
	});
	it("givenLanguageDisabled", async () => {
		expect(verifications.givenLanguageDisabled, "verifications.givenLanguageDisabled").toBeTrue();
	});
	it("wantedLanguageDisabled", async () => {
		expect(verifications.wantedLanguageDisabled, "verifications.wantedLanguageDisabled").toBeTrue();
	});
	it("categoryName", async () => {
		expect(appStates.categoryName.rootContainer.mainView.boxSettingsView.boxSettings.categoryName, "categoryName").toEqual(`categoryWithDictionary`)
	});
	
	it("saveEnabled", async () => {
		expect(verifications.saveEnabled, "verifications.saveEnabled").toBeTrue();
	});
	it("maxCardsPerDay", async () => {
		expect(appStates.maxCardsPerDay.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDay, "maxCardsPerDay").toEqual(`12`)
	});
	it("maxCardsPerDayInvalid", async () => {
		expect(appStates.maxCardsPerDayInvalid.rootContainer.mainView.boxSettingsView.boxSettings.maxCardsPerDayInvalid, "maxCardsPerDayInvalid").toEqual(false)
	});
	
	it("saveEnabled", async () => {
		expect(verifications.saveEnabled, "verifications.saveEnabled").toBeTrue();
	});
	it("maxInterval", async () => {
		expect(appStates.maxInterval.rootContainer.mainView.boxSettingsView.boxSettings.maxInterval, "maxInterval").toEqual(`30`)
	});
	it("maxIntervalInvalid", async () => {
		expect(appStates.maxIntervalInvalid.rootContainer.mainView.boxSettingsView.boxSettings.maxIntervalInvalid, "maxIntervalInvalid").toEqual(false)
	});
	
	it("saveEnabled", async () => {
		expect(verifications.saveEnabled, "verifications.saveEnabled").toBeTrue();
	});
	it("dictionaryLookup", async () => {
		expect(appStates.dictionaryLookup.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookup, "dictionaryLookup").toEqual(true)
	});
	it("dictionaryLookupInvalid", async () => {
		expect(appStates.dictionaryLookupInvalid.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookupInvalid, "dictionaryLookupInvalid").toEqual(true)
	});
	
	it("saveDisabled", async () => {
		expect(verifications.saveDisabled, "verifications.saveDisabled").toBeTrue();
	});
	it("givenLanguageEnabled", async () => {
		expect(verifications.givenLanguageEnabled, "verifications.givenLanguageEnabled").toBeTrue();
	});
	it("wantedLanguageEnabled", async () => {
		expect(verifications.wantedLanguageEnabled, "verifications.wantedLanguageEnabled").toBeTrue();
	});
	it("dictionaryLookup1", async () => {
		expect(appStates.dictionaryLookup1.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookup, "dictionaryLookup1").toEqual(true)
	});
	it("dictionaryLookupInvalid1", async () => {
		expect(appStates.dictionaryLookupInvalid1.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookupInvalid, "dictionaryLookupInvalid1").toEqual(true)
	});
	it("givenLanguage1", async () => {
		expect(appStates.givenLanguage1.rootContainer.mainView.boxSettingsView.boxSettings.givenLanguage, "givenLanguage1").toEqual(`de`)
	});
	it("wantedLanguage1", async () => {
		expect(appStates.wantedLanguage1.rootContainer.mainView.boxSettingsView.boxSettings.wantedLanguage, "wantedLanguage1").toEqual(``)
	});
	
	it("saveDisabled", async () => {
		expect(verifications.saveDisabled, "verifications.saveDisabled").toBeTrue();
	});
	it("givenLanguageEnabled", async () => {
		expect(verifications.givenLanguageEnabled, "verifications.givenLanguageEnabled").toBeTrue();
	});
	it("wantedLanguageEnabled", async () => {
		expect(verifications.wantedLanguageEnabled, "verifications.wantedLanguageEnabled").toBeTrue();
	});
	it("dictionaryLookup2", async () => {
		expect(appStates.dictionaryLookup2.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookup, "dictionaryLookup2").toEqual(true)
	});
	it("dictionaryLookupInvalid2", async () => {
		expect(appStates.dictionaryLookupInvalid2.rootContainer.mainView.boxSettingsView.boxSettings.dictionaryLookupInvalid, "dictionaryLookupInvalid2").toEqual(false)
	});
	it("givenLanguage2", async () => {
		expect(appStates.givenLanguage2.rootContainer.mainView.boxSettingsView.boxSettings.givenLanguage, "givenLanguage2").toEqual(`de`)
	});
	it("wantedLanguage2", async () => {
		expect(appStates.wantedLanguage2.rootContainer.mainView.boxSettingsView.boxSettings.wantedLanguage, "wantedLanguage2").toEqual(`en`)
	});
	
	it("saveEnabled", async () => {
		expect(verifications.saveEnabled, "verifications.saveEnabled").toBeTrue();
	});
	it("givenLanguageEnabled", async () => {
		expect(verifications.givenLanguageEnabled, "verifications.givenLanguageEnabled").toBeTrue();
	});
	it("wantedLanguageEnabled", async () => {
		expect(verifications.wantedLanguageEnabled, "verifications.wantedLanguageEnabled").toBeTrue();
	});
	it("boxList", async () => {
		expect(appStates.boxList.rootContainer.mainView.dashboardView.boxList, "boxList").toEqual([
			{ 
				boxId : `box-${testId}`,
				categoryId : `box-${testId}`,
				categoryName : `categoryWithDictionary`,
				countsPerDayNextWeek : [
					0,0,0,0,0,0,0
				],
				
				maxCardsPerDay : 12,
				openTodaysCards : 0,
				quality0Count : 0,
				quality1Count : 0,
				quality2Count : 0,
				quality3Count : 0,
				quality4Count : 0,
				quality5Count : 0,
				categoryAuthor : `username-${testId}`,
				reverse : false,
				editable : true,
				archived : false,
				shared : false
			}
		]
		)
	});
	it("deleteBox", async () => {
		expect(appStates.deleteBox.rootContainer.mainView.dashboardView.deleteBox, "deleteBox").toEqual({ 
			confirmDelete : false,
			boxId : null
		}
		)
	});
	

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
    
});





/******* S.D.G. *******/




