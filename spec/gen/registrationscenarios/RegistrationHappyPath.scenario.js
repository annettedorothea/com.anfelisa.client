/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const RegistrationActionIds  = require("../../gen/actionIds/registration/RegistrationActionIds");
const Verifications = require("../../src/registrationscenarios/RegistrationHappyPathVerifications");

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appStates = {};
let verifications = {};
    
describe("registrationscenarios.RegistrationHappyPath", function () {
    beforeAll(async function () {
    	driver = ScenarioUtils.createDriver();
    	let appState;
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.displayUsernameSpinner = appState;
		appStates.emailInvalid = appState;
		appStates.passwordMismatch = appState;
		appStates.initialEmail = appState;
		appStates.initialUsername = appState;
		appStates.initialPassword = appState;
		appStates.initialPasswordRepetition = appState;
		
		verifications.registerDisabled = await Verifications.registerDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.waitInMillis(10);
		await ScenarioUtils.waitInMillis(200);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.username = appState;
		appStates.usernameAvailable = appState;
		
		verifications.registerDisabled = await Verifications.registerDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.password = appState;
		appStates.passwordRepetition = appState;
		appStates.passwordMatch = appState;
		
		verifications.registerDisabled = await Verifications.registerDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.password2 = appState;
		appStates.passwordRepetition2 = appState;
		appStates.passwordMismatch2 = appState;
		
		verifications.registerDisabled = await Verifications.registerDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.email = appState;
		appStates.emailValid = appState;
		
		verifications.registerEnabled = await Verifications.registerEnabled(driver, testId);
		
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `uuid-${testId}`
			}
		);
		await ScenarioUtils.addSquishyValueServer(driver, `uuid-${testId}`, "token", `${testId}-TOKEN`);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.registerUser);
		await ScenarioUtils.waitInMillis(10);
		await ScenarioUtils.waitInMillis(200);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.autoUserLoggedIn = appState;
		appStates.autoTokenWasSet = appState;
		appStates.infoShown = appState;
		
		verifications.loginDataWasNotSetInLocalStorage = await Verifications.loginDataWasNotSetInLocalStorage(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, CommonActionIds.logout);
		await ScenarioUtils.waitInMillis(10);
		
    });

	it("displayUsernameSpinner", async () => {
		expect(appStates.displayUsernameSpinner.rootContainer.mainView.registrationView.displayUsernameSpinner, "displayUsernameSpinner").toEqual(false)
	});
	it("emailInvalid", async () => {
		expect(appStates.emailInvalid.rootContainer.mainView.registrationView.emailInvalid, "emailInvalid").toEqual(false)
	});
	it("passwordMismatch", async () => {
		expect(appStates.passwordMismatch.rootContainer.mainView.registrationView.emailInvalid, "passwordMismatch").toEqual(false)
	});
	it("initialEmail", async () => {
		expect(appStates.initialEmail.rootContainer.mainView.registrationView.email, "initialEmail").toEqual(``)
	});
	it("initialUsername", async () => {
		expect(appStates.initialUsername.rootContainer.mainView.registrationView.username, "initialUsername").toEqual(``)
	});
	it("initialPassword", async () => {
		expect(appStates.initialPassword.rootContainer.mainView.registrationView.password, "initialPassword").toEqual(``)
	});
	it("initialPasswordRepetition", async () => {
		expect(appStates.initialPasswordRepetition.rootContainer.mainView.registrationView.password, "initialPasswordRepetition").toEqual(``)
	});
	
	it("registerDisabled", async () => {
		expect(verifications.registerDisabled, "verifications.registerDisabled").toBeTrue();
	});
	it("username", async () => {
		expect(appStates.username.rootContainer.mainView.registrationView.username, "username").toEqual(`username-${testId}`)
	});
	it("usernameAvailable", async () => {
		expect(appStates.usernameAvailable.rootContainer.mainView.registrationView.available, "usernameAvailable").toEqual(true)
	});
	
	it("registerDisabled", async () => {
		expect(verifications.registerDisabled, "verifications.registerDisabled").toBeTrue();
	});
	it("password", async () => {
		expect(appStates.password.rootContainer.mainView.registrationView.password, "password").toEqual(`5f4dcc3b5aa765d61d8327deb882cf99`)
	});
	it("passwordRepetition", async () => {
		expect(appStates.passwordRepetition.rootContainer.mainView.registrationView.passwordRepetition, "passwordRepetition").toEqual(``)
	});
	it("passwordMatch", async () => {
		expect(appStates.passwordMatch.rootContainer.mainView.registrationView.passwordMismatch, "passwordMatch").toEqual(true)
	});
	
	it("registerDisabled", async () => {
		expect(verifications.registerDisabled, "verifications.registerDisabled").toBeTrue();
	});
	it("password2", async () => {
		expect(appStates.password2.rootContainer.mainView.registrationView.password, "password2").toEqual(`5f4dcc3b5aa765d61d8327deb882cf99`)
	});
	it("passwordRepetition2", async () => {
		expect(appStates.passwordRepetition2.rootContainer.mainView.registrationView.passwordRepetition, "passwordRepetition2").toEqual(`5f4dcc3b5aa765d61d8327deb882cf99`)
	});
	it("passwordMismatch2", async () => {
		expect(appStates.passwordMismatch2.rootContainer.mainView.registrationView.passwordMismatch, "passwordMismatch2").toEqual(false)
	});
	
	it("registerDisabled", async () => {
		expect(verifications.registerDisabled, "verifications.registerDisabled").toBeTrue();
	});
	it("email", async () => {
		expect(appStates.email.rootContainer.mainView.registrationView.email, "email").toEqual(`info@anfelisa.de`)
	});
	it("emailValid", async () => {
		expect(appStates.emailValid.rootContainer.mainView.registrationView.emailInvalid, "emailValid").toEqual(false)
	});
	
	it("registerEnabled", async () => {
		expect(verifications.registerEnabled, "verifications.registerEnabled").toBeTrue();
	});
	it("autoUserLoggedIn", async () => {
		expect(appStates.autoUserLoggedIn.rootContainer.loggedInUser.username, "autoUserLoggedIn").toEqual(`username-${testId}`)
	});
	it("autoTokenWasSet", async () => {
		expect(appStates.autoTokenWasSet.rootContainer.loggedInUser.token, "autoTokenWasSet").not.toEqual(null)
	});
	it("infoShown", async () => {
		expect(appStates.infoShown.rootContainer.messages, "infoShown").toEqual([
			{ 
				textKey : `confirmEmail`,
				type : `info`,
				visible : true,
				id : 0,
				args : null
			}
		]
		)
	});
	
	it("loginDataWasNotSetInLocalStorage", async () => {
		expect(verifications.loginDataWasNotSetInLocalStorage, "verifications.loginDataWasNotSetInLocalStorage").toBeTrue();
	});
	

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
    
});





/******* S.D.G. *******/




