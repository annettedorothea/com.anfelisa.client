/********************************************************************************
 * generated by de.acegen 1.6.5
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const Verifications = require("../../src/registrationscenarios/RouteToRegistrationVerifications");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appStates = {};
let verifications = {};
    
describe("registrationscenarios.RouteToRegistration", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();
    	let appState;
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.displayUsernameSpinner = appState;
		appStates.emailInvalid = appState;
		appStates.passwordMismatch = appState;
		appStates.email = appState;
		appStates.username = appState;
		appStates.password = appState;
		appStates.passwordRepetition = appState;
		
		verifications.registerDisabled = await Verifications.registerDisabled(driver, testId);
		
    });

	it("displayUsernameSpinner", async () => {
		expect(appStates.displayUsernameSpinner.rootContainer.mainView.registrationView.displayUsernameSpinner, "displayUsernameSpinner").toEqual(false)
	});
	it("emailInvalid", async () => {
		expect(appStates.emailInvalid.rootContainer.mainView.registrationView.emailInvalid, "emailInvalid").toEqual(false)
	});
	it("passwordMismatch", async () => {
		expect(appStates.passwordMismatch.rootContainer.mainView.registrationView.emailInvalid, "passwordMismatch").toEqual(false)
	});
	it("email", async () => {
		expect(appStates.email.rootContainer.mainView.registrationView.email, "email").toEqual(``)
	});
	it("username", async () => {
		expect(appStates.username.rootContainer.mainView.registrationView.username, "username").toEqual(``)
	});
	it("password", async () => {
		expect(appStates.password.rootContainer.mainView.registrationView.password, "password").toEqual(``)
	});
	it("passwordRepetition", async () => {
		expect(appStates.passwordRepetition.rootContainer.mainView.registrationView.password, "passwordRepetition").toEqual(``)
	});
	
	it("registerDisabled", async () => {
		expect(verifications.registerDisabled, "verifications.registerDisabled").toBeTrue();
	});

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
    
});





/******* S.D.G. *******/




