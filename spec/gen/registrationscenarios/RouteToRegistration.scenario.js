/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const Verifications = require("../../src/registrationscenarios/RouteToRegistrationVerifications");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appState;
    
describe("registrationscenarios.RouteToRegistration", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.route, [`#registration`]);
		
		appState = await ScenarioUtils.getAppState(driver);
    });

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
	it("displayUsernameSpinner", async () => {
		expect(appState.rootContainer.mainView.displayUsernameSpinner, "displayUsernameSpinner").toEqual(false)
	});
	it("emailInvalid", async () => {
		expect(appState.rootContainer.mainView.emailInvalid, "emailInvalid").toEqual(false)
	});
	it("passwordMismatch", async () => {
		expect(appState.rootContainer.mainView.emailInvalid, "passwordMismatch").toEqual(false)
	});
	it("email", async () => {
		expect(appState.rootContainer.mainView.email, "email").toEqual(``)
	});
	it("username", async () => {
		expect(appState.rootContainer.mainView.username, "username").toEqual(``)
	});
	it("password", async () => {
		expect(appState.rootContainer.mainView.password, "password").toEqual(``)
	});
	it("passwordRepetition", async () => {
		expect(appState.rootContainer.mainView.password, "passwordRepetition").toEqual(``)
	});
    
	it("registerDisabled", async () => {
		await Verifications.registerDisabled(driver, testId);
	});
    
});





/******* S.D.G. *******/




