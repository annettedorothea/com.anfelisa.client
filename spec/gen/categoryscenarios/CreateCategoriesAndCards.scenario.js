/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const LoginActionIds  = require("../../gen/actionIds/login/LoginActionIds");
const RegistrationActionIds  = require("../../gen/actionIds/registration/RegistrationActionIds");
const BoxActionIds  = require("../../gen/actionIds/box/BoxActionIds");
const CategoryActionIds  = require("../../gen/actionIds/category/CategoryActionIds");
const Verifications = require("../../src/categoryscenarios/CreateCategoriesAndCardsVerifications");

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appStates = {};
let verifications = {};
    
describe("categoryscenarios.CreateCategoriesAndCards", function () {
    beforeAll(async function () {
    	driver = ScenarioUtils.createDriver();
    	let appState;
		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.routeToRegistration);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.waitInMillis(200);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `uuid-${testId}`
			}
		);
		await ScenarioUtils.addSquishyValueServer(driver, `uuid-${testId}`, "token", `${testId}-TOKEN`);
		await ScenarioUtils.invokeAction(driver, RegistrationActionIds.registerUser);
		await ScenarioUtils.waitInMillis(200);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.logout);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.usernameChanged, [`username-${testId}`]);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.passwordChanged, [`password`]);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.toggleSaveInLocalStorage);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.toggleSaveInLocalStorage);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.toggleSaveInLocalStorage);
		await ScenarioUtils.invokeAction(driver, LoginActionIds.login);
		await ScenarioUtils.invokeAction(driver, CommonActionIds.routeToBoxCreate);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.categoryNameChanged, [`categoryWithDictionary`]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.maxCardsPerDayChanged, [12]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.maxIntervalChanged, [30]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.dictionaryLookupChanged);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.givenLanguageChanged, [`de`]);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.wantedLanguageChanged, [`en`]);
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `box-${testId}`
			}
		);
		await ScenarioUtils.invokeAction(driver, BoxActionIds.createRootCategory);
		await ScenarioUtils.waitInMillis(500);

		await ScenarioUtils.invokeAction(driver, CommonActionIds.routeToAuthorView, [`box-${testId}`,`false`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.init = appState;
		
		
		await ScenarioUtils.invokeAction(driver, CategoryActionIds.newCategoryClick);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.newCategoryDialogShown = appState;
		
		verifications.okDisabled = await Verifications.okDisabled(driver, testId);
		
		await ScenarioUtils.invokeAction(driver, CategoryActionIds.categoryNameChanged, [`Ordner 1`]);
		await ScenarioUtils.waitInMillis(10);
		
		appState = await ScenarioUtils.getAppState(driver);
		appStates.categoryNameChanged = appState;
		
		
		await ScenarioUtils.addSquishyValueClient(
			driver,
			{
				uuid: `folder1-${testId}`
			}
		);
		await ScenarioUtils.invokeAction(driver, CategoryActionIds.createCategory);
		await ScenarioUtils.waitInMillis(10);
		await ScenarioUtils.waitInMillis(500);
		
		appState = await ScenarioUtils.getAppState(driver);
		
		
    });

	it("init", async () => {
		expect(appStates.init.rootContainer.mainView.authorView.boxId, "init").toEqual(`box-${testId}`)
	});
	
	it("newCategoryDialogShown", async () => {
		expect(appStates.newCategoryDialogShown.rootContainer.mainView.authorView.categoryTree.categoryDialog, "newCategoryDialogShown").toEqual({ 
			categoryName : ``,
			display : true,
			newCategory : true
		}
		)
	});
	
	it("okDisabled", async () => {
		expect(verifications.okDisabled, "verifications.okDisabled").toBeTrue();
	});
	it("categoryNameChanged", async () => {
		expect(appStates.categoryNameChanged.rootContainer.mainView.authorView.categoryTree.categoryDialog, "categoryNameChanged").toEqual({ 
			categoryName : `Ordner 1`,
			display : true,
			newCategory : true
		}
		)
	});
	
	

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
    
});





/******* S.D.G. *******/




