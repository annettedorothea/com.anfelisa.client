/********************************************************************************
 * generated by de.acegen 1.6.0
 ********************************************************************************/




const ScenarioUtils = require("../../src/ScenarioUtils");
const CommonActionIds  = require("../../gen/actionIds/common/CommonActionIds");
const { Builder } = require('selenium-webdriver');

jasmine.DEFAULT_TIMEOUT_INTERVAL = ScenarioUtils.defaultTimeout;

const testId = ScenarioUtils.generateTestId();

let driver;

let appState;
    
describe("commonscenarios.Init", function () {
    beforeAll(async function () {
    	driver = new Builder()
    			    .forBrowser(ScenarioUtils.browserName)
    			    .build();

		await ScenarioUtils.invokeAction(driver, CommonActionIds.init);
		
		appState = await ScenarioUtils.getAppState(driver);
    });

    afterAll(async function () {
        await ScenarioUtils.tearDown(driver);
    });
    
	it("loggedInUser", async () => {
		expect(appState.rootContainer.loggedInUser, "loggedInUser").toEqual(undefined)
	});
	it("language", async () => {
		expect(appState.rootContainer.language, "language").toEqual(`de`)
	});
	it("messages", async () => {
		expect(appState.rootContainer.messages, "messages").toEqual([
		]
		)
	});
	it("username", async () => {
		expect(appState.rootContainer.mainView.loginView.username, "username").toEqual(``)
	});
	it("password", async () => {
		expect(appState.rootContainer.mainView.loginView.password, "password").toEqual(``)
	});
	it("saveInLocalStorage", async () => {
		expect(appState.rootContainer.mainView.loginView.saveInLocalStorage, "saveInLocalStorage").toEqual(false)
	});
    
    
});





/******* S.D.G. *******/




