/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import React from "react";
import {route} from "../../../../gen/common/ActionFunctions";
import {
    createRootCategory,
    dictionaryLookupChanged,
    givenLanguageChanged,
    maxCardsPerDayChanged,
    maxIntervalChanged,
    rootCategoryNameChanged,
    saveBoxSettings,
    wantedLanguageChanged
} from "../../../../gen/box/ActionFunctions";
import {Texts} from "../../../app/Texts";


export function uiElement(props) {

    const getCardInfo = () => {
        if (props.allCards === 0) {
            return ""
        }
        if (props.allActiveCards === 0 && props.allCards === 1) {
            return Texts.boxSettings.cardInfoZeroOne[props.language];
        }
        if (props.allActiveCards === 1 && props.allCards === 1) {
            return Texts.boxSettings.cardInfoOneOne[props.language];
        }
        if (props.allActiveCards === 1 && props.allCards === 1) {
            return Texts.boxSettings.cardInfoOneOne[props.language];
        }
        if (props.allActiveCards === 0) {
            return Texts.boxSettings.cardInfoZero[props.language].replace("{0}", props.allCards);
        }
        if (props.allActiveCards === 1) {
            return Texts.boxSettings.cardInfoOne[props.language].replace("{0}", props.allCards);
        }
        return Texts.boxSettings.cardInfo[props.language].replace("{0}", props.allActiveCards).replace("{1}", props.allCards);
    }

    const getCardStatusWarning = () => {
        const possibleCards = props.maxCardsPerDay * props.maxInterval;
        if (possibleCards === 1) {
            return Texts.boxSettings.tooManyCardsWarningOne[props.language].replace("{0}", props.allActiveCards);
        }
        return Texts.boxSettings.tooManyCardsWarning[props.language].replace("{0}", possibleCards).replace("{1}", props.allActiveCards)
    }

    const getCardStatusInfo = () => {
        const possibleCards = props.maxCardsPerDay * props.maxInterval;
        if (possibleCards === 1 && props.allActiveCards === 1) {
            return Texts.boxSettings.boxInfoOneOne[props.language];
        }
        if (props.allActiveCards === 1) {
            return Texts.boxSettings.boxInfoOne[props.language].replace("{0}", possibleCards);
        }
        return Texts.boxSettings.boxInfo[props.language].replace("{0}", possibleCards).replace("{1}", props.allActiveCards)
    }

    if (props.categoryName === undefined) {
        return null;
    }

    return <div className="center-wide">
        <div className="form">
            <h1>{Texts.boxSettings.title[props.language]}</h1>
            {props.allCards > 0 ? <h2>{getCardInfo()}</h2> : null}
            {props.tooManyCardsStatus === 2 && props.maxCardsPerDayInvalid !== true && props.maxIntervalInvalid !== true ?
                <div className="line warning">{getCardStatusWarning()}</div> :
                null
            }
            {props.tooManyCardsStatus === 1 && props.maxCardsPerDayInvalid !== true && props.maxIntervalInvalid !== true ?
                <div className="line info">{getCardStatusInfo()}</div> :
                null
            }
            <div className="line">
                <label htmlFor="categoryName">
                    {Texts.boxSettings.categoryName[props.language]}
                </label>
                <div className="inputContainer">
                    <input
                        onChange={(e) => rootCategoryNameChanged(e.target.value)}
                        type="text"
                        value={props.categoryName}
                        id="categoryName"
                        disabled={props.shared}
                    />
                    {!props.categoryName ? <i className="fas fa-times outside error"/> : null}
                </div>
            </div>
            <div className="line">
                <label htmlFor="maxCardsPerDay">
                    {Texts.boxSettings.maxCardsPerDay[props.language]}
                </label>
                <div className="inputContainer">
                    <input
                        onChange={(e) => maxCardsPerDayChanged(e.target.value)}
                        type="text"
                        value={props.maxCardsPerDay}
                        id="maxCardsPerDay"
                    />
                    {props.maxCardsPerDayInvalid === true ? <i className="fas fa-times outside error"/> : null}
                </div>
            </div>
            <div className="line">
                <label htmlFor="maxInterval">
                    {Texts.boxSettings.maxInterval[props.language]}
                </label>
                <div className="inputContainer">
                    <input
                        onChange={(e) => maxIntervalChanged(e.target.value)}
                        type="text"
                        value={props.maxInterval}
                        id="maxInterval"
                    />
                    {props.maxIntervalInvalid === true ? <i className="fas fa-times outside error"/> : null}
                </div>
            </div>
            <div className="noBreak line">
                <input
                    onChange={dictionaryLookupChanged}
                    type="checkbox"
                    value={props.dictionaryLookup}
                    checked={props.dictionaryLookup}
                    id="dictionaryLookupEditCheckbox"
                    disabled={props.shared}
                />
                <select
                    onChange={(e) => givenLanguageChanged(e.target.value)}
                    value={props.givenLanguage}
                    disabled={!props.dictionaryLookup || props.shared}
                    id="givenLanguage"
                >
                    <option value="">{Texts.boxSettings.languages.emtpyFrom[props.language]}</option>
                    <option value="de">{Texts.boxSettings.languages.de[props.language]}</option>
                    <option value="en">{Texts.boxSettings.languages.en[props.language]}</option>
                    <option value="fr">{Texts.boxSettings.languages.fr[props.language]}</option>
                </select>
                <select
                    onChange={(e) => wantedLanguageChanged(e.target.value)}
                    value={props.wantedLanguage}
                    disabled={!props.dictionaryLookup || props.shared}
                    id="wantedLanguage"
                >
                    <option value="">{Texts.boxSettings.languages.emtpyFrom[props.language]}</option>
                    <option value="de">{Texts.boxSettings.languages.de[props.language]}</option>
                    <option value="en">{Texts.boxSettings.languages.en[props.language]}</option>
                    <option value="fr">{Texts.boxSettings.languages.fr[props.language]}</option>
                </select>
                {props.dictionaryLookupInvalid === true ? <i className="fas fa-times outside error"/> : null}
            </div>
            <div className="moreMarginLine hCenter">
                <button
                    id="save"
                    onClick={() => props.boxId ? saveBoxSettings() : createRootCategory()}
                    disabled={(props.maxCardsPerDayInvalid ||
                        props.maxIntervalInvalid ||
                        props.dictionaryLookupInvalid ||
                        !props.categoryName ||
                        !props.categoryName.trim())}
                >
                    {Texts.boxSettings.save[props.language]}
                </button>
                <button
                    id="cancel"
                    onClick={() => route("#dashboard")}>{Texts.boxSettings.cancel[props.language]}</button>
            </div>
        </div>
    </div>
}


/******* S.D.G. *******/



