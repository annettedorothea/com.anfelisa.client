/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import { div, h1, label, input, table, tbody, ul, li, tr, td } from "../../../../gen/components/ReactHelper";

export function uiElement(attributes) {
	return div({}, [
		h1({}, ["BOXSETTINGSVIEW"]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "maxIntervalInvalid"
			}, ["MAXINTERVALINVALID"]), 
			input({
				id: "maxIntervalInvalid",
				value: attributes.maxIntervalInvalid, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.maxIntervalInvalid])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "maxCardsPerDayInvalid"
			}, ["MAXCARDSPERDAYINVALID"]), 
			input({
				id: "maxCardsPerDayInvalid",
				value: attributes.maxCardsPerDayInvalid, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.maxCardsPerDayInvalid])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "tooManyCardsStatus"
			}, ["TOOMANYCARDSSTATUS"]), 
			input({
				id: "tooManyCardsStatus",
				value: attributes.tooManyCardsStatus, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.tooManyCardsStatus])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "dictionaryLookupInvalid"
			}, ["DICTIONARYLOOKUPINVALID"]), 
			input({
				id: "dictionaryLookupInvalid",
				value: attributes.dictionaryLookupInvalid, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.dictionaryLookupInvalid])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "boxId"
			}, ["BOXID"]), 
			input({
				id: "boxId",
				value: attributes.boxId, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.boxId])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "maxInterval"
			}, ["MAXINTERVAL"]), 
			input({
				id: "maxInterval",
				value: attributes.maxInterval, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.maxInterval])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "maxCardsPerDay"
			}, ["MAXCARDSPERDAY"]), 
			input({
				id: "maxCardsPerDay",
				value: attributes.maxCardsPerDay, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.maxCardsPerDay])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "categoryName"
			}, ["CATEGORYNAME"]), 
			input({
				id: "categoryName",
				value: attributes.categoryName, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.categoryName])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "dictionaryLookup"
			}, ["DICTIONARYLOOKUP"]), 
			input({
				id: "dictionaryLookup",
				value: attributes.dictionaryLookup, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.dictionaryLookup])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "givenLanguage"
			}, ["GIVENLANGUAGE"]), 
			input({
				id: "givenLanguage",
				value: attributes.givenLanguage, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.givenLanguage])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "wantedLanguage"
			}, ["WANTEDLANGUAGE"]), 
			input({
				id: "wantedLanguage",
				value: attributes.wantedLanguage, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.wantedLanguage])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "categoryId"
			}, ["CATEGORYID"]), 
			input({
				id: "categoryId",
				value: attributes.categoryId, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.categoryId])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "allActiveCards"
			}, ["ALLACTIVECARDS"]), 
			input({
				id: "allActiveCards",
				value: attributes.allActiveCards, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.allActiveCards])
		]),
		div({class: ""}, [
			label({
				class: "",
				htmlFor: "allCards"
			}, ["ALLCARDS"]), 
			input({
				id: "allCards",
				value: attributes.allCards, 
				class: "", 
				onChange:(e) => console.log(e.target.value),
				type: "text"
			}), 
			div({class: ""}, [attributes.allCards])
		])
	]);
}



/******* S.D.G. *******/



