/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import React from "react";
import {route} from "../../../../../gen/common/ActionFunctions";
import {archiveBox, deleteBoxClick} from "../../../../../gen/box/ActionFunctions";
import {Texts} from "../../../../app/Texts";
import {translate} from "../../../../AppUtils";


export const BoxListItem = (props) => {
	const categoryRoute = `#categories/${props.categoryId}${props.reverse ? "/reverse" : ""}`;

	const onEditClick = (e) => {
		e.stopPropagation();
		route(categoryRoute);
	}

	const onSettingsClick = (e) => {
		e.stopPropagation();
		route(`#box/settings/${props.boxId}`);
	}

	const onArchiveClick = (e, archived) => {
		e.stopPropagation();
		archiveBox(archived, props.boxId).then();
	}

	const onDeleteClick = (e) => {
		e.stopPropagation();
		if (props.deletable) {
			deleteBoxClick(props.boxId);
		}
	}

	if (props.archived === true) {
		return <a className="tile box">
			<h2>
				{!props.editable ?
					translate(Texts.box.sharedTitle, [props.categoryName, props.categoryAuthor]) :
					props.categoryName}
				{props.reverse ? <i className="fas fa-arrows-alt-h withmarginleft"/> : null}
			</h2>
			<br/>
			<div className="buttons button4">
				<i
					className="fas fa-box-open"
					onClick={(e) => onArchiveClick(e, false)}
					title={translate(Texts.box.unarchiveBox)}
				/>
			</div>
		</a>
	}

	return <a
		className="tile box active"
		id={props.boxId}
		onClick={() => props.openTodaysCards > 0 ?
			route(`#box/${props.boxId}`) :
			route(categoryRoute)}
	>
		<h2>
			{!props.editable ?
				translate(Texts.box.sharedTitle, [props.categoryName, props.categoryAuthor]) :
				props.categoryName}
			{props.reverse ? <i className="fas fa-arrows-alt-h withmarginleft"/> : null}
		</h2>
		{statistics(props)}
		<br/>
		{cardsNextDays(props)}
		<div className="buttons button1">
			<i
				className="fas fa-edit"
				onClick={(e) => onEditClick(e)}
				title={translate(Texts.box.edit)}
			/>
		</div>
		<div className="buttons button2">
			<i
				className="fas fa-cog"
				onClick={(e) => onSettingsClick(e)}
				title={translate(Texts.box.settings)}
			/>
		</div>
		<div className="buttons button3">
			<i
				className="fas fa-archive"
				onClick={(e) => onArchiveClick(e, true)}
				title={translate(Texts.box.archiveBox)}
			/>
		</div>
		<div className="buttons button4">
			<i
				className={`far fa-trash-alt ${props.deletable ? "danger" : "disabled"}`}
				onClick={(e) => onDeleteClick(e)}
				title={props.deletable ?
					translate(Texts.box.deleteTitle) :
					translate(Texts.box.deleteTitleShared)}
			/>
		</div>
		{props.openTodaysCards > 0 ? <span className="badge">{props.openTodaysCards}</span> : null}
	</a>
}

const cardsNextDays = (props) => {
	const onClick = (e) => {
		e.stopPropagation();
		route(`#box/active-cards/${props.boxId}`);
	}
	if (props.countsPerDayNextWeek && props.countsPerDayNextWeek.length === 7 && props.maxCardsPerDay && props.maxCardsPerDay > 0) {
		let index = 0;
		let items = props.countsPerDayNextWeek.map((count) => {
			index++;
			let date = new Date();
			date.setDate(date.getDate() + index);
			date.setHours(0, 0, 0, 0);
			const day = date.getDay();
			return cardsNextDaysItem({
				maxCardsPerDay: props.maxCardsPerDay,
				count,
				day,
				language: props.language,
				rounded: index === 1 ? "rounded-left" : index === 7 ? "rounded-right" : ""
			});
		});
		return <div
			className="cards-next-days"
			onClick={(e) => onClick(e)}
		>
			{items}
		</div>
	}
	return null;
}

const cardsNextDaysItem = (item) => {
	const toDoFactor = item.count * 1.0 / item.maxCardsPerDay;
	return <div
		key={item.day}
		className={`${item.rounded} cards-next-days-item`}
		style={{background: `rgba(192, 192, 192, ${toDoFactor})`}}
	>
		{item.count}
	</div>
}

const rounded = (width, elementWidthBefore, elementWidthAfter) => {
	if (width === 100) {
		return "rounded"
	}
	if (elementWidthBefore === 0) {
		return "rounded-left"
	}
	if (elementWidthAfter === 0) {
		return "rounded-right"
	}
}

const statistics = (props) => {
	const all =
		props.quality0Count +
		props.quality1Count +
		props.quality2Count +
		props.quality3Count +
		props.quality4Count +
		props.quality5Count;
	if (all > 0) {
		let qualityMap = [];
		qualityMap[0] = {
			key: 0,
			value: props.quality0Count
		};
		qualityMap[1] = {
			key: 1,
			value: props.quality1Count
		};
		qualityMap[2] = {
			key: 2,
			value: props.quality2Count
		};
		qualityMap[3] = {
			key: 3,
			value: props.quality3Count
		};
		qualityMap[4] = {
			key: 4,
			value: props.quality4Count
		};
		qualityMap[5] = {
			key: 5,
			value: props.quality5Count
		};
		qualityMap.sort((a, b) => {
			return a.value - b.value;
		});
		let sum = 0;
		let i = 0;
		qualityMap.forEach(e => {
			e.percentage = Math.round(e.value * 100 / all);
			if (sum + e.percentage > 100 || sum + e.percentage < 100 && i === 6) {
				e.percentage = 100 - sum;
			}
			sum += e.percentage;
			i++;
		});
		const width0 = qualityMap.find(e => e.key === 0).percentage;
		const width1 = qualityMap.find(e => e.key === 1).percentage;
		const width2 = qualityMap.find(e => e.key === 2).percentage;
		const width3 = qualityMap.find(e => e.key === 3).percentage;
		const width4 = qualityMap.find(e => e.key === 4).percentage;
		const width5 = qualityMap.find(e => e.key === 5).percentage;

		return <div className="statistics">
			<div
				className={`${rounded(width5, 0, width4 + width3 + width2 + width1 + width0)} quality5`}
				style={{width: `${width5}%`}}
			/>
			<div
				className={`${rounded(width4, width5, width3 + width2 + width1 + width0)} quality4`}
				style={{width: `${width4}%`}}
			/>
			<div
				className={`${rounded(width3, width5 + width4, width2 + width1 + width0)} quality3`}
				style={{width: `${width3}%`}}
			/>
			<div
				className={`${rounded(width2, width5 + width4 + width3, width1 + width0)} quality2`}
				style={{width: `${width2}%`}}
			/>
			<div
				className={`${rounded(width1, width5 + width4 + width3 + width2, width0)} quality1`}
				style={{width: `${width1}%`}}
			/>
			<div
				className={`${rounded(width0, width5 + width4 + width3 + width2 + width1, 0)} quality0`}
				style={{width: `${width0}%`}}
			/>
		</div>
	}
	return null;
}



/******* S.D.G. *******/



