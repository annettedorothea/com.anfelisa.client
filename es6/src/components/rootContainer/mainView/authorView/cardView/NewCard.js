/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import {button, i, td, textarea, tr} from "../../../../../../gen/components/ReactHelper";
import {
    cancelNewCard,
    createCard,
    givenOfNewCardChanged,
    passValueToDictionary,
    translate,
    wantedOfNewCardChanged
} from "../../../../../../gen/card/ActionFunctions";
import {Texts} from "../../../../../app/Texts";
import React from "react";

export function uiElement(attributes) {

    const onAltKeyUp = (e) => {
        e.preventDefault();
        if (e.keyCode === 13 && e.altKey && isValid()) {
            onCreate();
        }
        if (e.keyCode === 27) {
            onCancel();
        }
    }

    const onCreate = () => {
        createCard();
        document.getElementById(attributes.naturalInputOrder === true ? "given" : "wanted").focus();
    }

    const onCancel = () => {
        cancelNewCard();
        document.getElementById(attributes.naturalInputOrder === true ? "given" : "wanted").focus();
    }

    const onBlurGiven = () => {
        if (attributes.naturalInputOrder === true && !!attributes.dictionaryLookup && (!attributes.wanted || attributes.wanted.length === 0)) {
            passValueToDictionary();
        }
        if (attributes.naturalInputOrder === true && attributes.dictionaryLookup === true) {
            translate();
        }
    }

    const onBlurWanted = () => {
        if (attributes.naturalInputOrder === false && !!attributes.dictionaryLookup && (!attributes.given || attributes.given.length === 0)) {
            passValueToDictionary();
        }
        if (attributes.naturalInputOrder === false && attributes.dictionaryLookup === true) {
            translate();
        }
    }

    const renderGiven = () => {
        return td({class: "textarea input"}, [
            textarea({
                onChange: (event) => givenOfNewCardChanged(event.target.value),
                autoComplete: "off",
                value: attributes.given,
                placeholder: `${Texts.cardList.given[attributes.language]} ${attributes.dictionaryLookup ? "(" + Texts.categoryList.languages[attributes.givenLanguage][attributes.language] + ")" : ""}`,
                onKeyUp: onAltKeyUp,
                onBlur: onBlurGiven,
                id: "given"
            })

        ]);
    }

    const renderWanted = () => {
        return td({class: "textarea input"}, [
            textarea({
                onChange: (event) => wantedOfNewCardChanged(event.target.value),
                autoComplete: "off",
                value: attributes.wanted,
                placeholder: `${Texts.cardList.wanted[attributes.language]} ${attributes.dictionaryLookup ? "(" + Texts.categoryList.languages[attributes.wantedLanguage][attributes.language] + ")" : ""}`,
                onKeyUp: onAltKeyUp,
                onBlur: onBlurWanted,
                id: "wanted"
            }),
        ]);
    }

    const isValid = () => {
        return attributes.given && attributes.given.length > 0 && (attributes.wanted && attributes.wanted.length > 0 || attributes.image.length > 0);
    }

    return tr({class: "notPrinted inputRow"}, [
        td(),
        attributes.naturalInputOrder === true ? renderGiven() : renderWanted(),
        attributes.naturalInputOrder === true ? renderWanted() : renderGiven(),
        td({class: "top"}, [
            attributes.displaySpinner || attributes.displayTranslateSpinner ? i({class: "fas fa-cog fa-spin"}) : null
        ]),
        td({class: "noBreak input"}, [
            button({
                disabled: !isValid(),
                onClick: () => onCreate()
            }, [
                i({class: "fas fa-check"})
            ]),
            button({
                onClick: () => onCancel()
            }, [
                i({class: "fas fa-times"})
            ])
        ]),
    ]);
}


/******* S.D.G. *******/



