/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import React from "react";
import {
	checkDropAllowed, collapseTreeItem,
	expandTreeItem,
	itemDropped,
	moveCategoryStarted, selectTreeItem
} from "../../../../../../gen/category/ActionFunctions";
import {Texts} from "../../../../../app/Texts";

const categoryItem = (props) => {
	const selected = props.selectedCategory && props.selectedCategory.categoryId === props.categoryId;
	const dropAllowed = props.dropAllowed && props.selectedCategory.editable;
	return <div
		className={`categoryItem depth_${props.depth}`}
		key={props.categoryId}
	>
		{props.expanded === true ?
			expandedCategoryItem({
				...props,
				selected,
				depth: props.depth + 1,
				dropAllowed
			}) :
			collapsedCategoryItem({
				...props,
				selected,
				dropAllowed,
				depth: props.depth + 1
			})}
	</div>
}

const collapsedCategoryItem = (props) => {
	return <div className="collapsedCategoryItem">
		{props.empty === false ?
			<i
				className="fas fa-caret-right"
				onClick={() => expandTreeItem(props.categoryId)}
			/> :
			<i className="fas fa-caret-right disabled"/>
		}
		{
			selectableCategoryItem({
				selected: props.selected,
				categoryName: props.categoryName,
				nonScheduledCount: props.nonScheduledCount,
				categoryId: props.categoryId,
				dropAllowed: props.dropAllowed,
				dropTargetCategoryId: props.dropTargetCategoryId,
				depth: props.depth,
				language: props.language,
			})
		}
	</div>
}

const selectableCategoryItem = (props) => {
	const onDragStart = (event) => {
		event.dataTransfer.setData('Text', props.categoryName);
		moveCategoryStarted(props.categoryId)
	}

	const drop = (event) => {
		event.preventDefault();
		itemDropped(event.altKey);
	}

	const onDragOver = (event) => {
		if (!!props.dropAllowed) {
			event.preventDefault();
		}
	}

	const onDragEnter = (event) => {
		checkDropAllowed(props.categoryId, event.altKey);
	}
	return <span
		draggable={true}
		onDragStart={(event) => onDragStart(event)}
		onDragEnter={(event) => onDragEnter(event)}
		onDragOver={onDragOver}
		onDrop={drop}
	>
        <span
			className={`item ${props.selected ? "selected" : "notSelected"} ${props.dropAllowed && props.dropTargetCategoryId === props.categoryId ? "dropAllowed" : ""}`}
			onClick={() => props.selected ? "" : selectTreeItem(props.categoryId)}
		>
            {props.categoryName}
			{props.nonScheduledCount === 0 ?
				<span className="nonScheduledCount">{Texts.categoryList.nonScheduledNone[props.language]}</span> : null
			}
			{props.nonScheduledCount === 1 ?
				<span
					className="nonScheduledCount">{Texts.categoryList.nonScheduledSingular[props.language]}</span> : null
			}
			{props.nonScheduledCount > 1 ?
				<span
					className="nonScheduledCount">{Texts.categoryList.nonScheduled[props.language].replace("{0}", props.nonScheduledCount)}</span> : null
			}
        </span>
    </span>
}

const expandedCategoryItem = (props) => {
	let children = [];
	if (props.childCategories) {
		children = props.childCategories.map((category) => {
			return categoryItem({
				...category,
				depth: props.depth,
				language: props.language,
				selectedCategory: props.selectedCategory,
				dropAllowed: props.dropAllowed,
				dropTargetCategoryId: props.dropTargetCategoryId
			});
		});
	}
	return <div className="expandedCategoryItem">
		{props.depth > 1 ?
			<i
				className="fas fa-caret-down"
				onClick={() => collapseTreeItem(props.categoryId)}
			/> : null
		}
		{selectableCategoryItem({...props})}
		<div>{children}</div>
	</div>
}


export const RootCategory = (props) => {
	const selected = props.selectedCategory && props.selectedCategory.categoryId === props.categoryId;
	return <div className="categoryItem depth_1">
		{expandedCategoryItem({
			...props,
			selected,
			depth: 1
		})}
	</div>
	}



/******* S.D.G. *******/



