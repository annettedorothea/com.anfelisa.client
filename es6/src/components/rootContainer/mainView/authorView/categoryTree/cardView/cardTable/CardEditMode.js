/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/


import React from "react";
import {translate} from "../../../../../../../AppUtils";
import {Texts} from "../../../../../../../app/Texts";
import {CardInput} from "./CardInput";
import {CardPreview} from "./CardPreview";

export const CardEditMode = (props) => {
    if (!(props.given.indexOf(props.filter) >= 0 || props.wanted.indexOf(props.filter) >= 0)) {
        return null;
    }

    const onAltKeyUp = (e) => {
        e.preventDefault();
        if (e.keyCode === 13 && e.altKey && isValid()) {
            onUpdate();
        }
        if (e.keyCode === 27) {
            onCancel();
        }
    }

    const onUpdate = () => {
        props.updateCard().then();
    }

    const onCancel = () => {
        props.cancelEditCard();
    }


    const isValid = () => {
        return (props.editedCard.given && props.editedCard.given.length > 0 || props.editedCard.givenImage && props.editedCard.givenImage.length > 0)
            && (props.editedCard.wanted && props.editedCard.wanted.length > 0 || props.editedCard.wantedImage && props.editedCard.wantedImage.length > 0);
    }

    const renderGiven = () => {
        return CardInput({
            text: props.editedCard.given,
            placeholder: `${translate(Texts.cardList.given)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.givenLanguage]) + ")" : ""}`,
            onTextChanged: (event) => props.givenOfEditedCardChanged(event.target.value),
            onKeyUp: onAltKeyUp,
            image: props.editedCard.givenImage,
            imageFileId: "givenImageEdit",
            onImageChanged: props.givenImageOfEditedCardChanged,
        })
    }

    const renderWanted = () => {
        return CardInput({
            text: props.editedCard.wanted,
            placeholder: `${translate(Texts.cardList.wanted)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.wantedLanguage]) + ")" : ""}`,
            onTextChanged: (event) => props.wantedOfEditedCardChanged(event.target.value),
            onKeyUp: onAltKeyUp,
            image: props.editedCard.wantedImage,
            imageFileId: "wantedImageEdit",
            onImageChanged: props.wantedImageOfEditedCardChanged,
        })
    }

    return <div className="cardListItem">
        <div className="notPrinted">
        </div>
        {props.naturalInputOrder === true ? renderGiven() : renderWanted()}
        {props.naturalInputOrder === true ? renderWanted() : renderGiven()}
        <div className="noBreak notPrinted">
            <button
                disabled={!isValid()}
                onClick={onUpdate}
            >
                <i className="fas fa-check"/>
            </button>
            <button
                onClick={onCancel}
            >
                <i className="fas fa-times"/>
            </button>
        </div>
        <div className="noBreak notPrinted">
            {props.next ?
                <i className="far fa-calendar-check" title={new Date(props.next).toLocaleDateString()}></i> : ""}
        </div>
    </div>
}


/******* S.D.G. *******/



