/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import React from "react";
import {translate} from "../../../../../../../AppUtils";
import {Texts} from "../../../../../../../app/Texts";

export const CardListItem = (props) => {
	if (!(props.given.indexOf(props.filter) >= 0 || props.wanted.indexOf(props.filter) >= 0)) {
		return null;
	}
	const editable = props.rootCategory.editable;
	const editMode = props.cardId === props.editedCard.cardId && editable;

	const onCheckboxClicked = (e) => {
		if (e.nativeEvent.shiftKey === true) {
			props.selectScheduleCardRange(props.cardId)
		} else {
			props.toggleScheduleCardSelection(props.cardId)
		}
	}

	const onDragStart = (event) => {
		if (editable) {
			event.dataTransfer.setData("Text", props.given);
			props.moveCardsStarted();
		}
	}

	const onDrop = (event) => {
		if (editable) {
			event.preventDefault();
			props.changeCardOrder().then();
		}
	}

	const onDragOver = (event) => {
		if (editable) {
			event.preventDefault();
			if (props.cardId !== props.dragTargetCardId) {
				props.onDragEnter(props.cardId);
			}
		}
	}

	const onDragLeave = () => {
		if (editable) {
			props.onDragExit(props.cardId);
		}
	}

	const onAltKeyUp = (e) => {
		e.preventDefault();
		if (e.keyCode === 13 && e.altKey && isValid()) {
			onUpdate();
		}
		if (e.keyCode === 27) {
			onCancel();
		}
	}

	const onUpdate = () => {
		props.updateCard().then();
		document.getElementById(props.naturalInputOrder === true ? "given" : "wanted").focus();
	}

	const onCancel = () => {
		props.cancelEditCard();
		document.getElementById(props.naturalInputOrder === true ? "given" : "wanted").focus();
	}


	const isValid = () => {
		return props.given && props.given.length > 0 && props.wanted && props.wanted.length > 0;
	}

	const renderGiven = () => {
		if (editMode === true) {
			return <td className="textarea input">
                <textarea
					onChange={(event) => props.givenOfEditedCardChanged(event.target.value)}
					autoComplete="off"
					value={props.editedCard.given}
					placeholder={`${translate(Texts.cardList.given)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.givenLanguage]) + ")" : ""}`}
					onKeyUp={onAltKeyUp}
				>

                </textarea>
			</td>

		}
		return <td onDoubleClick={() => editable ? props.editCard(props.cardId) : {}}>
			<pre>{props.given}</pre>
		</td>
	}

	const renderWanted = () => {
		if (editMode === true) {
			return <td className="textarea input">
                <textarea
					onChange={(event) => props.wantedOfEditedCardChanged(event.target.value)}
					autoComplete="off"
					value={props.editedCard.wanted}
					placeholder={`${translate(Texts.cardList.wanted)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.wantedLanguage]) + ")" : ""}`}
					onKeyUp={onAltKeyUp}
				>

                </textarea>
			</td>

		}
		return <td onDoubleClick={() => editable ? props.editCard(props.cardId) : {}}>
			<pre>{props.wanted}</pre>
		</td>
	}

	const priority = () => {
		const priorityChanged = (priority) => {
			if (editable) {
				props.updateCardPriority(props.cardId, priority).then();
			}
		}
		const priorityClass = (index) => {
			if (props.priority && index <= props.priority) {
				return "fa fa-star";
			}
			return "far fa-star";
		}
		return <td className="priority noBreak">
			<i
				className={priorityClass(1)}
				onClick={
					editable ?
						() => priorityChanged(props.priority === 1 ? null : 1) :
						() => {
						}
				}
			/>
			<i
				className={priorityClass(2)}
				onClick={
					editable ?
						() => priorityChanged(props.priority === 2 ? null : 2) :
						() => {
						}
				}
			/>
			<i
				className={priorityClass(3)}
				onClick={
					editable ?
						() => priorityChanged(props.priority === 3 ? null : 3) :
						() => {
						}
				}
			/>
		</td>
	}

	return <tr
		onDragOver={onDragOver}
		onDrop={onDrop}
		onDragLeave={onDragLeave}
		className={props.cardId === props.dragTargetCardId ? "dragTarget" : ""}
	>
		<td className="notPrinted">
			<input
				type="checkbox"
				onChange={onCheckboxClicked}
				checked={props.selectedCardIds.indexOf(props.cardId) >= 0}
			/>
		</td>
		{props.naturalInputOrder === true ? renderGiven() : renderWanted()}
		{props.naturalInputOrder === true ? renderWanted() : renderGiven()}
		{priority()}
		{editable ? editMode === false ?
				<td className="noBreak notPrinted">
					<button onClick={() => props.editCard(props.cardId)}>
						<i className="fas fa-pen"/>
					</button>
					<button onClick={() => props.deleteCardClick(props.cardId)}>
						<i className="fas fa-times"/>
					</button>
					{props.selectedCardIds.indexOf(props.cardId) >= 0 ?
						<i
							className="fas fa-align-justify"
							draggable={true}
							onDragStart={(event) => onDragStart(event)}
						/> :
						null
					}
				</td> :
				<td className="noBreak notPrinted">
					<button
						disabled={!isValid()}
						onClick={onUpdate}
					>
						<i className="fas fa-check"/>
					</button>
					<button
						onClick={onCancel}
					>
						<i className="fas fa-times"/>
					</button>
				</td> :
			null
		}
		<td className="noBreak notPrinted alignRight">
			{props.next ? new Date(props.next).toLocaleDateString() : ""}
		</td>
	</tr>
}



/******* S.D.G. *******/



