/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/


import React from "react";
import {translate} from "../../../../../../../AppUtils";
import {Texts} from "../../../../../../../app/Texts";
import {CardInput} from "./CardInput";
import {setFocus} from "../../CardView";

export const NewCard = (props) => {

    if (props.rootCategory && !props.rootCategory.editable) {
        return null
    }

    const onAltKeyUp = (e) => {
        e.preventDefault();
        if (e.keyCode === 13 && e.altKey && isValid()) {
            onCreate();
        }
        if (e.keyCode === 27) {
            onCancel();
        }
    }

    const onCreate = () => {
        props.createCard().then(setFocus(props.naturalInputOrder, true));
    }

    const onCancel = () => {
        props.cancelNewCard()
    }

    const onBlurGiven = () => {
        if (props.naturalInputOrder === true && !!props.rootCategory.dictionaryLookup && (!props.wanted || props.wanted.length === 0)) {
            props.passValueToDictionary();
        }
        if (props.naturalInputOrder === true && props.rootCategory.dictionaryLookup === true) {
            props.translate().then();
        }
    }

    const onBlurWanted = () => {
        if (props.naturalInputOrder === false && !!props.rootCategory.dictionaryLookup && (!props.given || props.given.length === 0)) {
            props.passValueToDictionary();
        }
        if (props.naturalInputOrder === false && props.rootCategory.dictionaryLookup === true) {
            props.translate().then();
        }
    }

    const renderGiven = () => {
        return CardInput({
            text: props.given,
            placeholder: `${translate(Texts.cardList.given)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.givenLanguage]) + ")" : ""}`,
            onTextChanged: (event) => props.givenOfNewCardChanged(event.target.value),
            onKeyUp: onAltKeyUp,
            onBlur: onBlurGiven,
            image: props.givenImage,
            imageFileId: "givenImage",
            onImageChanged: props.givenImageOfNewCardChanged,
            id: "given",
        })
    }

    const renderWanted = () => {
        return CardInput({
            text: props.wanted,
            placeholder: `${translate(Texts.cardList.wanted)} ${props.rootCategory.dictionaryLookup ? "(" + translate(Texts.categoryList.languages[props.rootCategory.wantedLanguage]) + ")" : ""}`,
            onTextChanged: (event) => props.wantedOfNewCardChanged(event.target.value),
            onKeyUp: onAltKeyUp,
            onBlur: onBlurWanted,
            image: props.wantedImage,
            imageFileId: "wantedImage",
            onImageChanged: props.wantedImageOfNewCardChanged,
            id: "wanted",
        })
    }

    const isValid = () => {
        return (props.given && props.given.length > 0 || props.givenImage && props.givenImage.length > 0) && (props.wanted && props.wanted.length > 0 || props.wantedImage && props.wantedImage.length > 0);
    }
    return <div className="cardListItem edit">
        <div/>
        <div className="givenAndWanted">
            {props.naturalInputOrder === true ? renderGiven() : renderWanted()}
            {props.naturalInputOrder === true ? renderWanted() : renderGiven()}
        </div>
        <div className="buttonsContainer">
            <div className="buttons">
                <button
                    disabled={!isValid()}
                    onClick={onCreate}
                    id="create-card"
                >
                    <i className="fas fa-check"/>
                </button>
                <button
                    onClick={onCancel}
                >
                    <i className="fas fa-times"/>
                </button>
            </div>
        </div>
        <div>
            {props.displaySpinner ? <i className="fas fa-cog fa-spin"/> : null}
        </div>
    </div>

}


/******* S.D.G. *******/



