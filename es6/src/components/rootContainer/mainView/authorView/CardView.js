/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import {
    button, cardDuplicatesItem,
    cardListItem,
    deleteCard,
    div,
    h1,
    i,
    input,
    newCard,
    table,
    tbody,
    th,
    thead,
    tr,td
} from "../../../../../gen/components/ReactHelper";
import {Texts} from "../../../../app/Texts";
import {
    filterCards,
    scheduleSelectedCards,
    sortSelectedCardsOut,
    toggleAllScheduleCardSelection,
    toggleInputOrder
} from "../../../../../gen/card/ActionFunctions";
import React from "react";
import DuplicateCardItem from "../../../../web/CardList/DuplicateCardItem";

export function uiElement(attributes) {
    if (!attributes.categoryTree || !attributes.cardList) {
        return null;
    }
    const editable = attributes.categoryTree.rootCategory.editable;
    const cardItems = attributes.cardList.filter((card) => (card.given.indexOf(attributes.filter) >= 0 || card.wanted.indexOf(attributes.filter) >= 0)).map((card) => {
        return cardListItem({
            ...card,
            id: card.cardId,
            selectedCardIds: attributes.selectedCardIds,
            dragTargetCardId: attributes.dragTargetCardId,
            language: attributes.language,
            naturalInputOrder: attributes.naturalInputOrder,
            editable,
            editedCard: attributes.editedCard,
            dictionaryLookup: attributes.categoryTree.selectedCategory.dictionaryLookup,
            givenLanguage: attributes.categoryTree.selectedCategory.givenLanguage,
            wantedLanguage: attributes.categoryTree.selectedCategory.wantedLanguage,
        })
    });
    const duplicateCards = attributes.cardDuplicates.map((card) => {
        return cardDuplicatesItem({
            ...card,
            id: card.cardId,
            naturalInputOrder: attributes.naturalInputOrder,
        })
    });

    if (editable) {
        cardItems.push(
            newCard({
                id: "new",
                dictionaryLookup: attributes.categoryTree.selectedCategory.dictionaryLookup,
                givenLanguage: attributes.categoryTree.selectedCategory.givenLanguage,
                wantedLanguage: attributes.categoryTree.selectedCategory.wantedLanguage,
                language: attributes.language,
                naturalInputOrder: attributes.naturalInputOrder,
            })
        );
    }
    return div({}, [
        h1({}, [
            attributes.categoryTree.selectedCategory.categoryName,
            attributes.reverse === true ? i({class: "fas fa-arrows-alt-h"}) : null,
        ]),
        deleteCard({...attributes.deleteCard, language: attributes.language}),
        attributes.deleteCard.confirmDelete === true && editable ? div() : null,
        table({class: "cardTable"}, [
            thead({}, [
                tr({class: "notPrinted"}, [
                    th({colSpan: 4}, [
                        button({
                            title: Texts.cardList.toggleInputOrder[attributes.language],
                            onClick: () => toggleInputOrder()
                        }, [
                            i({class: "fas fa-arrows-alt-h"})
                        ]),
                        input({
                            type: "text",
                            onChange: (event) => filterCards(event.target.value),
                            autoComplete: "off",
                            value: attributes.filter,
                            placeholder: Texts.cardList.filterCards[attributes.language]
                        }),
                    ]),
                ]),
                tr({class: "notPrinted"}, [
                    th({}, [
                        input({
                            type: "checkbox",
                            onChange: () => toggleAllScheduleCardSelection(),
                            checked: attributes.cardList.length > 0 && attributes.selectedCardIds.length === attributes.cardList.length,
                        }),
                    ]),
                    th({colSpan: 4}, [
                        button({
                            disabled: attributes.selectedCardIds.length === 0,
                            onClick: () => scheduleSelectedCards()
                        }, [
                            Texts.cardList.scheduleSelectedCards[attributes.language]
                        ]),
                        button({
                            disabled: attributes.selectedCardIds.length === 0,
                            onClick: () => sortSelectedCardsOut()
                        }, [
                            Texts.cardList.sortSelectedCardsOut[attributes.language]
                        ]),
                    ]),
                ]),
            ]),
            tbody({}, [
                ...cardItems,
                duplicateCards.length > 0 && editable ? tr({}, [
                    td(),
                    td({colSpan: 5}, [Texts.cardList.duplicateCards[attributes.language]]),
                ]): null,
                ...duplicateCards
            ]),
        ]),
        
    ]);
}


/******* S.D.G. *******/



