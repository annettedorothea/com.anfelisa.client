/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import {
    button,
    div,
    h2,
    i,
    input,
    rootCategory,
    table,
    tbody,
    td,
    th,
    thead,
    tr
} from "../../../../../gen/components/ReactHelper";
import {
    cancelNewCategory,
    cancelPreviewCsv,
    categoryNameChanged,
    createCategory,
    editCategoryClick,
    importCsv,
    newCategoryClick,
    previewCsv,
    swapPreviewCsv
} from "../../../../../gen/category/ActionFunctions";
import {route} from "../../../../../gen/common/ActionFunctions";
import React from "react";
import {Texts} from "../../../../app/Texts";

export function uiElement(attributes) {
    const onCsvFileChange = (event) => {
        let files = event.target.files;

        if (files.length > 0) {
            const file = files[0];
            event.target.value = null;
            let reader = new FileReader();
            reader.onload = function () {
                previewCsv(reader.result);
            };
            reader.readAsText(file);
        }
    }

    const csvPreview = () => {
        let csv = attributes.previewCsv.map((row) => {
            return tr({key: row[2]}, [
                td({}, [row[0]]),
                td({}, [row[1]]),
            ]);
        });
        return div({class: "modal"}, [
            div({class: "modalContent"}, [
                h2({}, [Texts.categoryTree.csvPreview.title[attributes.language]]),
                table({}, [
                    thead({}, [
                        tr({}, [
                            th({}, [
                                Texts.categoryTree.csvPreview.given[attributes.language],
                                attributes.selectedCategory.attributes ? ' (' + Texts.categoryTree.csvPreview.languages[attributes.selectedCategory.attributes][attributes.language] + ')' : ""
                            ]),
                            th({}, [
                                Texts.categoryTree.csvPreview.wanted[attributes.language],
                                attributes.selectedCategory.wantedLanguage ? ' (' + Texts.categoryTree.csvPreview.languages[attributes.selectedCategory.wantedLanguage][attributes.language] + ')' : ""
                            ]),
                        ])
                    ]),
                    tbody({}, [csv])
                ]),
                button({
                    onClick: () => swapPreviewCsv()
                }, [Texts.categoryTree.csvPreview.swap[attributes.language]]),
                button({
                    onClick: () => importCsv()
                }, [Texts.categoryTree.csvPreview.ok[attributes.language]]),
                button({
                    onClick: () => cancelPreviewCsv()
                }, [Texts.categoryTree.csvPreview.cancel[attributes.language]])
            ])
        ]);
    }

    const newCategory = () => {
        const disabled =
            !attributes.categoryName ||
            attributes.categoryName.length === 0 ||
            attributes.dictionaryLookup && (attributes.givenLanguage.length === 0 || attributes.wantedLanguage.length === 0);
        return div({class: "modal"}, [
            div({class: "modalContent form"}, [
                h2({}, [Texts.categoryTree.newCategory.title[attributes.language]]),
                div({class: "line"}, [
                    input({
                        type: "text",
                        onChange: (event) => categoryNameChanged(event.target.value),
                        autoComplete: "off",
                        value: attributes.categoryName,
                        placeholder: attributes.selectedCategory === undefined ? Texts.categoryTree.newCategory.newRootCategory[attributes.language] : Texts.categoryTree.newCategory.newChildCategory[attributes.language]
                    })
                ]),
                button({
                    disabled,
                    onClick: () => createCategory()
                }, [Texts.categoryTree.newCategory.ok[attributes.language]]),
                button({
                    onClick: () => cancelNewCategory()
                }, [Texts.categoryTree.newCategory.cancel[attributes.language]]),
            ])
        ]);
    }

    console.log(attributes);
    if (!attributes.rootCategory) {
        return null;
    }

    return div({class: "categoryTree"}, [
        attributes.previewCsv && attributes.previewCsv.length > 0 && attributes.rootCategory.editable ?
            csvPreview() : null,
        attributes.displayNewCategory && attributes.rootCategory.editable ?
            newCategory() : null,

        div({}, [
            button({
                onClick: () => route("#dashboard"),
                title: Texts.categoryTree.back[attributes.language]
            }, [
                i({class: "fa fa-arrow-left"})
            ]),
            attributes.rootCategory.editable ?
                button({
                    disabled: !attributes.selectedCategory,
                    onClick: () => newCategoryClick(),
                    title: attributes.selectedCategory === undefined ? Texts.categoryTree.newCategory.newRootCategory[attributes.language] : Texts.categoryTree.newCategory.newChildCategory[attributes.language]
                }, [
                    i({class: "fas fa-plus"})
                ]) :
                null,
            attributes.rootCategory.editable ?
                button({
                    disabled: !attributes.selectedCategory,
                    onClick: () => editCategoryClick(),
                    title: Texts.categoryTree.editCategory[attributes.language]
                }, [
                    i({class: "fas fa-pen"})
                ]) :
                null
        ]),

        div({class: "categoryTreeItems"}, [
            rootCategory({
                ...attributes.rootCategory,
                childCategories: attributes.rootCategory.childCategories,
                selectedCategory: attributes.selectedCategory,
                texts: attributes.texts,
                language: attributes.language,
                key: attributes.rootCategory.categoryId,
                dropAllowed: attributes.dropAllowed && attributes.rootCategory.editable,
                dropTargetCategoryId: attributes.dropTargetCategoryId,
            })
        ]),
    ]);
}


/******* S.D.G. *******/



