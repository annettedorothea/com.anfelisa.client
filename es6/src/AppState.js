import * as R from "ramda";
import {setRootContainerState} from "./components/RootContainer";

/********************************************************************************
 * generated by de.acegen 1.5.6
 ********************************************************************************/


let appState = {};

export function get(path) {
    const lens = R.lensPath(path);
    return R.view(lens, appState);
}

export function getLocation() {
    return location.hash;
}

export function getStorage(path) {
    return localStorage.getItem(R.last(path));
}

function normalizeData(data, path, attributes) {
    const value = data[R.last(path)];
    if (!value) {
        return value;
    }
    if (attributes) {
        return R.pick(attributes, data[R.last(path)]);
    } else {
        return data[R.last(path)]
    }
}

export function set(data, path, attributes) {
    const normalizedData = normalizeData(data, path, attributes);
    const lens = R.lensPath(path);
    appState = R.set(lens, normalizedData, appState);
}

export function setLocation(data, path) {
    location.hash = data[R.last(path)];
}

export function setStorage(data, path) {
    const lastParam = R.last(path);
    if (data[lastParam]) {
        localStorage.setItem(lastParam, data[lastParam]);
    } else {
        localStorage.removeItem(lastParam);
    }
}

export function merge(data, path, attributes) {
    if (attributes) {
        const lens = R.lensPath(path);
        const appStateValue = R.view(lens, appState);
        const normalizedData = normalizeData(data, path, attributes);
        const mergedData = R.mergeDeepRight(appStateValue, normalizedData);
        appState = R.set(lens, mergedData, appState);
    } else {
        set(data, path, attributes);
    }
}

export function mergeLocation(data, path) {
    if (data[R.last(path)]) {
        location.hash = data[R.last(path)];
    }
}

export function mergeStorage(data, path) {
    const lastParam = R.last(path);
    if (data[lastParam]) {
        localStorage.setItem(lastParam, data[lastParam]);
    }
}

export function createInitialAppState() {
    appState = {};
}

export function setInitialAppState(initialAppState) {
    appState = initialAppState;
}



export function stateUpdated() {
    setRootContainerState(appState.rootContainer);
}




/******* S.D.G. *******/



