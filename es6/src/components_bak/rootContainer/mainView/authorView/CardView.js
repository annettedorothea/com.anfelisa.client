/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import React from "react";

import { CardListItem } from "./cardView/CardListItem";
import { NewCard } from "./cardView/NewCard";
import { CardDuplicatesItem } from "./cardView/CardDuplicatesItem";
import { DeleteCard } from "./cardView/DeleteCard";
import {Texts} from "../../../../app/Texts";
import {
	filterCards,
	scheduleSelectedCards, sortSelectedCardsOut,
	toggleAllScheduleCardSelection,
	toggleInputOrder
} from "../../../../../gen/card/ActionFunctions";
import {translate} from "../../../../AppUtils";

export const CardView = (props) => {
	if (!props.categoryTree || !props.cardList) {
		return null;
	}
	const editable = props.categoryTree.rootCategory.editable;
	const cardItems = props.cardList.filter((card) => (card.given.indexOf(props.filter) >= 0 || card.wanted.indexOf(props.filter) >= 0)).map((card) => {
		return <CardListItem
			{...card}
			key={card.cardId}
			selectedCardIds={props.selectedCardIds}
			dragTargetCardId={props.dragTargetCardId}
			naturalInputOrder={props.naturalInputOrder}
			editable={editable}
			editedCard={props.editedCard}
			dictionaryLookup={props.categoryTree.rootCategory.dictionaryLookup}
			givenLanguage={props.categoryTree.rootCategory.givenLanguage}
			wantedLanguage={props.categoryTree.rootCategory.wantedLanguage}
		/>
	});
	const duplicateCards = props.cardDuplicates.map((card) => {
		return <CardDuplicatesItem
			{...card}
			key={card.cardId}
			naturalInputOrder={props.naturalInputOrder}
		/>
	});

	if (editable) {
		cardItems.push(
			<NewCard
				key={"new"}
				dictionaryLookup={props.categoryTree.rootCategory.dictionaryLookup}
				givenLanguage={props.categoryTree.rootCategory.givenLanguage}
				wantedLanguage={props.categoryTree.rootCategory.wantedLanguage}
				naturalInputOrder={props.naturalInputOrder}
				{...props.newCard}
			/>
		);
	}

	const dictionary = () => {
		if (!props.categoryTree.rootCategory.givenLanguage || !props.categoryTree.rootCategory.wantedLanguage) {
			return null;
		}
		const setFocus = () => {
			document.getElementById(props.naturalInputOrder === true ? "wanted" : "given").focus();
		}

		const value = props.dictionaryValue;

		if (!value || value.length === 0) {
			return <div className="iframePlaceholder"/>
		}

		const languageMap = {
			"de": "deutsch",
			"fr": "franzoesisch",
			"en": "englisch"
		};
		const sourceLanguage = props.naturalInputOrder === true ? props.categoryTree.rootCategory.givenLanguage : props.categoryTree.rootCategory.wantedLanguage;
		const targetLanguage = props.naturalInputOrder === true ? props.categoryTree.rootCategory.wantedLanguage : props.categoryTree.rootCategory.givenLanguage;

		const src = `https://www.linguee.de/${languageMap[sourceLanguage]}-${languageMap[targetLanguage]}/search?query=${value}`;
		return <div className="dictionaryWrapper">
			<iframe
				src={src}
				frameBorder={0}
				onLoad={setFocus}
				sandbox="allow-scripts"
			/>
		</div>
	}

	return <div>
		<h1>
			{props.categoryTree.selectedCategory.categoryName}
			{props.reverse === true ? <i className="fas fa-arrows-alt-h"/> : null}
		</h1>
		<DeleteCard
			{...props.deleteCard}
		/>
		{props.deleteCard.confirmDelete === true && editable ? <div/> : null}
		<table>
			<thead>
			<tr className="notPrinted">
				<th colSpan={4}>
					<button
						title={translate(Texts.cardList.toggleInputOrder)}
						onClick={toggleInputOrder}
					>
						<i className="fas fa-arrows-alt-h"/>
					</button>
					<input
						type="text"
						onChange={(event) => filterCards(event.target.value)}
						autoComplete="off"
						placeholder={translate(Texts.cardList.filterCards)}
						value={props.filter}
					/>
				</th>
			</tr>
			<tr>
				<th>
					<input
						type="checkbox"
						onChange={toggleAllScheduleCardSelection}
						checked={props.cardList.length > 0 && props.selectedCardIds.length === props.cardList.length}
					/>
				</th>
				<th colSpan={4}>
					<button
						disabled={props.selectedCardIds.length === 0}
						onClick={scheduleSelectedCards}
					>
						{translate(Texts.cardList.scheduleSelectedCards)}
					</button>
					<button
						disabled={props.selectedCardIds.length === 0}
						onClick={sortSelectedCardsOut}
					>
						{translate(Texts.cardList.sortSelectedCardsOut)}
					</button>
				</th>
			</tr>
			</thead>
			<tbody>
			{cardItems}
			{duplicateCards.length > 0 && editable ?
				<tr>
					<td/>
					<td colSpan={5}>{translate(Texts.cardList.duplicateCards)}</td>
				</tr> : null}
			{duplicateCards}
			</tbody>
		</table>
		{dictionary()}
	</div>

}



/******* S.D.G. *******/



