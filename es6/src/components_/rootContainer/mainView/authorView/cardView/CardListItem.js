/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import {
    cancelEditCard,
    changeCardOrder,
    deleteCardClick,
    editCard,
    givenOfEditedCardChanged,
    moveCardsStarted,
    onDragEnter,
    onDragExit,
    toggleScheduleCardSelection,
    updateCard,
    updateCardPriority,
    wantedOfEditedCardChanged
} from "../../../../../../gen/card/ActionFunctions";
import React from "react";
import {Texts} from "../../../../../app/Texts";

export function uiElement(props) {

    const editMode = props.cardId === props.editedCard.cardId && props.editable;

    const onDragStart = (event) => {
        if (props.editable) {
            event.dataTransfer.setData("Text", props.given);
            moveCardsStarted();
        }
    }

    const onDrop = (event) => {
        if (props.editable) {
            event.preventDefault();
            changeCardOrder();
        }
    }

    const onDragOver = (event) => {
        if (props.editable) {
            event.preventDefault();
            if (props.cardId !== props.dragTargetCardId) {
                onDragEnter(props.cardId);
            }
        }
    }

    const onDragLeave = () => {
        if (props.editable) {
            onDragExit(props.cardId);
        }
    }

    const onAltKeyUp = (e) => {
        e.preventDefault();
        if (e.keyCode === 13 && e.altKey && isValid()) {
            onUpdate();
        }
        if (e.keyCode === 27) {
            onCancel();
        }
    }

    const onUpdate = () => {
        updateCard();
        document.getElementById(props.naturalInputOrder === true ? "given" : "wanted").focus();
    }

    const onCancel = () => {
        cancelEditCard();
        document.getElementById(props.naturalInputOrder === true ? "given" : "wanted").focus();
    }


    const isValid = () => {
        return props.given && props.given.length > 0 && (props.wanted && props.wanted.length > 0 || props.image.length > 0);
    }

    const renderGiven = () => {
        if (editMode === true) {
            return <td className="textarea input">
                <textarea
                    onChange={(event) => givenOfEditedCardChanged(event.target.value)}
                    autoComplete="off"
                    value={props.editedCard.given}
                    placeholder={`${Texts.cardList.given[props.language]} ${props.dictionaryLookup ? "(" + Texts.categoryList.languages[props.givenLanguage][props.language] + ")" : ""}`}
                    onKeyUp={onAltKeyUp}
                >
                    
                </textarea>
            </td>

        }
        return <td onDoubleClick={() => props.editable ? editCard(props.cardId) : {}}>
            <pre>{props.given}</pre>
        </td>
    }

    const renderWanted = () => {
        if (editMode === true) {
            return <td className="textarea input">
                <textarea
                    onChange={(event) => wantedOfEditedCardChanged(event.target.value)}
                    autoComplete="off"
                    value={props.editedCard.wanted}
                    placeholder={`${Texts.cardList.wanted[props.language]} ${props.dictionaryLookup ? "(" + Texts.categoryList.languages[props.wantedLanguage][props.language] + ")" : ""}`}
                    onKeyUp={onAltKeyUp}
                >

                </textarea>
            </td>

        }
        return <td onDoubleClick={() => props.editable ? editCard(props.cardId) : {}}>
            <pre>{props.wanted}</pre>
        </td>
    }

    const priority = () => {
        const priorityChanged = (priority) => {
            if (props.editable) {
                updateCardPriority(props.cardId, priority);
            }
        }
        const priorityClass = (index) => {
            if (props.priority && index <= props.priority) {
                return "fa fa-star";
            }
            return "far fa-star";
        }
        return <td className="priority noBreak">
            <i
                className={priorityClass(1)}
                onClick={
                    props.editable ?
                        () => priorityChanged(props.priority === 1 ? null : 1) :
                        () => {
                        }
                }
            />
            <i
                className={priorityClass(2)}
                onClick={
                    props.editable ?
                        () => priorityChanged(props.priority === 2 ? null : 2) :
                        () => {
                        }
                }
            />
            <i
                className={priorityClass(3)}
                onClick={
                    props.editable ?
                        () => priorityChanged(props.priority === 3 ? null : 3) :
                        () => {
                        }
                }
            />
        </td>
    }

    return <tr
        onDragOver={onDragOver}
        onDrop={onDrop}
        onDragLeave={onDragLeave}
        className={props.cardId === props.dragTargetCardId ? "dragTarget" : ""}
    >
        <td className="notPrinted">
            <input
                type="checkbox"
                onChange={() => toggleScheduleCardSelection(props.cardId)}
                checked={props.selectedCardIds.indexOf(props.cardId) >= 0}
            />
        </td>
        {props.naturalInputOrder === true ? renderGiven() : renderWanted()}
        {props.naturalInputOrder === true ? renderWanted() : renderGiven()}
        {priority()}
        {props.editable ? editMode === false ?
            <td className="noBreak notPrinted">
                <button onClick={() => editCard(props.cardId)}>
                    <i className="fas fa-pen"/>
                </button>
                <button onClick={() => deleteCardClick(props.cardId)}>
                    <i className="fas fa-times"/>
                </button>
                {props.selectedCardIds.indexOf(props.cardId) >= 0 ?
                    <i
                        className="fas fa-align-justify"
                        draggable={true}
                        onDragStart={(event) => onDragStart(event)}
                    /> :
                    null
                }
            </td> :
            <td className="noBreak notPrinted">
                <button
                    disabled={!isValid()}
                    onClick={onUpdate}
                >
                    <i className="fas fa-check"/>
                </button>
                <button
                    onClick={onCancel}
                >
                    <i className="fas fa-times"/>
                </button>
            </td> :
            null
        }
        <td className="noBreak notPrinted alignRight">
            {props.next ? new Date(props.next).toLocaleDateString() : ""}
        </td>
    </tr>
}


/******* S.D.G. *******/



