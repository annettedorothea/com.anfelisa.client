/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/


import {Texts} from "../../../../app/Texts";
import {
    filterCards,
    scheduleSelectedCards,
    sortSelectedCardsOut,
    toggleAllScheduleCardSelection,
    toggleInputOrder
} from "../../../../../gen/card/ActionFunctions";
import React from "react";
import {CardListItemComponent} from "../../../../../gen/components/rootContainer/mainView/authorView/cardView/CardListItemComponent";
import {CardDuplicatesItemComponent} from "../../../../../gen/components/rootContainer/mainView/authorView/cardView/CardDuplicatesItemComponent";
import {NewCardComponent} from "../../../../../gen/components/rootContainer/mainView/authorView/cardView/NewCardComponent";
import {DeleteCardComponent} from "../../../../../gen/components/rootContainer/mainView/authorView/cardView/DeleteCardComponent";

export function uiElement(props) {
    if (!props.categoryTree || !props.cardList) {
        return null;
    }
    const editable = props.categoryTree.rootCategory.editable;
    const cardItems = props.cardList.filter((card) => (card.given.indexOf(props.filter) >= 0 || card.wanted.indexOf(props.filter) >= 0)).map((card) => {
        return <CardListItemComponent
            {...card}
            key={card.cardId}
            selectedCardIds={props.selectedCardIds}
            dragTargetCardId={props.dragTargetCardId}
            language={props.language}
            naturalInputOrder={props.naturalInputOrder}
            editable={editable}
            editedCard={props.editedCard}
            dictionaryLookup={props.categoryTree.selectedCategory.dictionaryLookup}
            givenLanguage={props.categoryTree.selectedCategory.givenLanguage}
            wantedLanguage={props.categoryTree.selectedCategory.wantedLanguage}
        />
    });
    const duplicateCards = props.cardDuplicates.map((card) => {
        return <CardDuplicatesItemComponent
            {...card}
            key={card.cardId}
            naturalInputOrder={props.naturalInputOrder}
        />
    });

    if (editable) {
        cardItems.push(
            <NewCardComponent
                key={"new"}
                dictionaryLookup={props.categoryTree.selectedCategory.dictionaryLookup}
                givenLanguage={props.categoryTree.selectedCategory.givenLanguage}
                wantedLanguage={props.categoryTree.selectedCategory.wantedLanguage}
                naturalInputOrder={props.naturalInputOrder}
                language={props.language}
            />
        );
    }

    const dictionary = () => {
        if (!props.categoryTree.selectedCategory.givenLanguage || !props.categoryTree.selectedCategory.wantedLanguage) {
            return null;
        }
        const setFocus = () => {
            document.getElementById(props.naturalInputOrder === true ? "wanted" : "given").focus();
        }

        const value = props.dictionaryValue;

        if (!value || value.length === 0) {
            return <div className="iframePlaceholder"/>
        }

        const languageMap = {
            "de": "deutsch",
            "fr": "franzoesisch",
            "en": "englisch"
        };
        const sourceLanguage = props.naturalInputOrder === true ? props.categoryTree.selectedCategory.givenLanguage : props.categoryTree.selectedCategory.wantedLanguage;
        const targetLanguage = props.naturalInputOrder === true ? props.categoryTree.selectedCategory.wantedLanguage : props.categoryTree.selectedCategory.givenLanguage;

        const src = `https://www.linguee.de/${languageMap[sourceLanguage]}-${languageMap[targetLanguage]}/search?query=${value}`;
        return <div className="dictionaryWrapper">
            <iframe
                src={src}
                frameBorder={0}
                onLoad={setFocus}
            />
        </div>
    }

    return <div>
        <h1>
            {props.categoryTree.selectedCategory.categoryName}
            {props.reverse === true ? i({class: "fas fa-arrows-alt-h"}) : null}
        </h1>
        <DeleteCardComponent
            {...props.deleteCard}
            language={props.language}
        />
        {props.deleteCard.confirmDelete === true && editable ? <div/> : null}
        <table>
            <thead>
            <tr className="notPrinted">
                <th colSpan={4}>
                    <button
                        title={Texts.cardList.toggleInputOrder[props.language]}
                        onClick={toggleInputOrder}
                    >
                        <i className="fas fa-arrows-alt-h"/>
                    </button>
                    <input
                        type="text"
                        onChange={(event) => filterCards(event.target.value)}
                        autoComplete="off"
                        value={props.filter}
                        placeholder={Texts.cardList.filterCards[props.language]}
                    />
                </th>
            </tr>
            <tr>
                <th>
                    <input
                        type="checkbox"
                        onChange={toggleAllScheduleCardSelection}
                        checked={props.cardList.length > 0 && props.selectedCardIds.length === props.cardList.length}
                    />
                </th>
                <th colSpan={4}>
                    <button
                        disabled={props.selectedCardIds.length === 0}
                        onClick={scheduleSelectedCards}
                    >
                        {Texts.cardList.scheduleSelectedCards[props.language]}
                    </button>
                    <button
                        disabled={props.selectedCardIds.length === 0}
                        onClick={sortSelectedCardsOut}
                    >
                        {Texts.cardList.sortSelectedCardsOut[props.language]}
                    </button>
                </th>
            </tr>
            </thead>
            <tbody>
            {cardItems}
            {duplicateCards.length > 0 && editable ?
                <tr>
                    <td/>
                    <td colSpan={5}>{Texts.cardList.duplicateCards[props.language]}</td>
                </tr> : null}
            {duplicateCards}
            </tbody>
        </table>
        {dictionary()}
    </div>

}


/******* S.D.G. *******/



