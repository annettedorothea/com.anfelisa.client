/********************************************************************************
 * generated by de.acegen 0.9.10
 ********************************************************************************/




import Command from "../../gen/ace/Command";

export default class AsynchronousCommand extends Command {
    
    httpGet(url, authorize) {
        return new Promise((resolve, reject) => {
            const headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append("Accept", "application/json");
            if (authorize === true) {
                let authorization = this.basicAuth();
                if (authorization !== undefined) {
                    headers.append("Authorization", authorization);
                }
            }

            if (url.indexOf("?") < 0) {
            	url += "?uuid=" + this.commandData.uuid;
            } else {
            	url += "&uuid=" + this.commandData.uuid;
            }

            const options = {
                method: 'GET',
                headers: headers,
                mode: 'cors',
                cache: 'no-cache'
            };
            
            const request = new Request(url, options);

            let status;
            let statusText;
            fetch(request).then(function (response) {
                status = response.status;
                statusText = response.statusText;
                if (status >= 300) {
                    return response.text();
                } else {
                    return response.json();
                }
            }).then(function (data) {
                if (status >= 300) {
                    const error = {
                        code: status,
                        text: statusText,
                        errorKey: data
                    };
                    reject(error);
                } else {
                    resolve(data);
                }
            }).catch(function (error) {
                const status = {
                    code: error.name,
                    text: error.message
                };
                reject(status);
            });
        });
    }

    httpChange(methodType, url, authorize, data) {
        return new Promise((resolve, reject) => {
            const headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append("Accept", "application/json");
            if (authorize === true) {
                let authorization = this.basicAuth();
                if (authorization !== undefined) {
                    headers.append("Authorization", authorization);
                }
            }

		    if (url.indexOf("?") < 0) {
		        url += "?uuid=" + this.commandData.uuid;
		    } else {
		        url += "&uuid=" + this.commandData.uuid;
		    }

            const options = {
                method: methodType,
                headers: headers,
                mode: 'cors',
                cache: 'no-cache',
                body: JSON.stringify(data)
            };

            const request = new Request(url, options);

            let status;
            let statusText;
            fetch(request).then(function (response) {
                status = response.status;
                statusText = response.statusText;
                return response.text();
            }).then(function (data) {
                if (status >= 300) {
                    const error = {
                        code: status,
                        text: statusText,
                        errorKey: data
                    };
                    reject(error);
                } else {
	                if (data) {
	                    resolve(JSON.parse(data));
	                } else {
	                    resolve();
	                }
                }
            }).catch(function (error) {
                const status = {
                    code: error.name,
                    text: error.message
                };
                reject(status);
            });
        });
    }

    httpPost(url, authorize, data) {
        return this.httpChange("POST", url, authorize, data);
    }

    httpPut(url, authorize, data) {
        return this.httpChange("PUT", url, authorize, data);
    }

    httpDelete(url, authorize, data) {
        return this.httpChange("DELETE", url, authorize, data);
    }
    
    static basicAuth() {
        return "<your authorization>";
    }
    
	
}




/******* S.D.G. *******/





