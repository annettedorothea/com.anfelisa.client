/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/


import AbstractRouteChangedCommand from "../../../gen/common/commands/AbstractRouteChangedCommand";

export default class RouteChangedCommand extends AbstractRouteChangedCommand {
    execute(data) {
        const hashes = data.hash.split("/");
        if (data.hash.startsWith("#confirmemail") && hashes.length >= 2 && hashes[1] && hashes[2]) {
            data.username = hashes[1];
            data.token = hashes[2];
            this.addConfirmEmailOutcome(data);
        } else if (data.hash.startsWith("#resetpassword") && hashes.length >= 1 && hashes[1]) {
            data.resetPasswordView = {
                token: hashes[1],
                password: {
                    value: ""
                },
                passwordRepetition: {
                    value: "",
                    passwordMismatch: false
                },
                buttons: {
                    resetPassword: {
                        disabled: true
                    }
                }
            };
            this.addResetPasswordOutcome(data);
        } else if (data.hash === "#privacypolicy") {
            data.mainView = {
                privacyPolicyView: {}
            };
            this.addPrivacyPolicyOutcome(data);
        } else if (this.isUserLoggedIn(data)) {
            if (data.hash === "#profile") {
                data.profileView = {};
                this.addProfileOutcome(data);
            } else if (data.hash.startsWith("#categories") && hashes.length >= 2) {
                data.rootCategoryId = hashes[1];
                data.authorView = {
                    authorView: {}
                };
                if (hashes[hashes.length - 1] === "reverse") {
                    data.authorView.reverse = true;
                    data.selectedCategoryId = hashes.length === 3 ? data.rootCategoryId : hashes[2];
                } else {
                    data.authorView.reverse = false;
                    data.selectedCategoryId = hashes.length === 2 ? data.rootCategoryId : hashes[2];
                }
                this.addCategoriesOutcome(data);
            } else if (data.hash.startsWith("#box/settings") && hashes.length >= 2 && hashes[2]) {
                data.boxSettingsView = {
                    boxId: hashes[2]
                };
                this.addBoxSettingsOutcome(data);
            } else if (data.hash.startsWith("#box/active-cards") && hashes.length >= 2 && hashes[2]) {
                data.allActiveCardsView = {
                    boxId: hashes[2],
                    selectedLastQualityFilters: [],
                };
                this.addAllActiveCardsOutcome(data);
            } else if (data.hash === "#box/create") {
                data.boxSettingsView = {
                    boxSettings: {
                        maxCardsPerDay: 8,
                        maxInterval: "",
                        boxId: "",
                        categoryName: "",
                        dictionaryLookup: false,
                        wantedLanguage: "",
                        givenLanguage: ""
                    }
                };
                this.addBoxCreateOutcome(data);
            } else if (data.hash.startsWith("#box") && hashes.length >= 1 && hashes[1]) {
                data.queryCardView = {
                    boxId: hashes[1]
                };
                this.addNextCardOutcome(data);
            } else {
                data.dashboardView = {
                    deleteBox: {
                        boxId: undefined
                    }
                };
                this.addDashboardOutcome(data);
            }
        } else {
            if (data.hash === "#registration") {
                data.registrationView = {
                    username: {
                        value: "",
                        displayUsernameSpinner: false,
                        usernameAvailable: undefined,
                    },
                    email: {
                        value: "",
                        emailInvalid: false,
                    },
                    password: {
                        value: ""
                    },
                    passwordRepetition: {
                        value: "",
                        passwordMismatch: false,
                    },
                    buttons: {
                        register: {
                            disabled: true
                        }
                    }
                };
                this.addRegistrationOutcome(data);
            } else if (data.hash === "#forgotpassword") {
                data.forgotPasswordView = {
                    username: {
                        value: ""
                    },
                    buttons: {
                        forgotPassword: {
                            disabled: true
                        }
                    }
                };
                this.addForgotPasswordOutcome(data);
            } else {
                data.loginView = {
                    username: {
                        value: ""
                    },
                    password: {
                        value: ""
                    },
                    saveInLocalStorage: {
                        checked: false
                    }
                };
                this.addLoginOutcome(data);
            }
        }
        return data;
    }

    isUserLoggedIn(data) {
        return (data.loggedInUser && data.loggedInUser.token);
    }
}


/******* S.D.G. *******/



