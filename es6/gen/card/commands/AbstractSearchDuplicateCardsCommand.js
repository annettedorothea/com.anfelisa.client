/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";

export default class AbstractSearchDuplicateCardsCommand extends AsynchronousCommand {
    constructor() {
        super("card.SearchDuplicateCardsCommand");
    }
    
    initCommandData(data) {
        data.naturalInputOrder = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "cardView", "naturalInputOrder"]
        )
        ;
        data.given = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "cardView", "cardTable", "newCard", "given"]
        )
        ;
        data.wanted = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "cardView", "cardTable", "newCard", "wanted"]
        )
        ;
        data.categoryId = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "selectedCategory", "categoryId"]
        )
        ;
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	
	allMandatoryValuesAreSet(data) {
		if (data.categoryId === undefined || data.categoryId === null) {
			console.warn("AbstractSearchDuplicateCardsCommand: categoryId is mandatory but is not set", data);
			return false;
		}
		return true;
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	if (this.allMandatoryValuesAreSet(data)) {
				AppUtils.httpGet(
						`${AppUtils.settings.rootPath}/cards/search?${data.given ? `given=${data.given}` : ""}&${data.wanted ? `wanted=${data.wanted}` : ""}&${data.naturalInputOrder ? `naturalInputOrder=${data.naturalInputOrder}` : ""}&${data.categoryId ? `categoryId=${data.categoryId}` : ""}`, 
						data.uuid, 
						true)
					.then((response) => {
						data.cardList = response.cardList;
						this.handleResponse(data, resolve, reject);
					}, (error) => {
						data.error = error;
						this.handleError(data, resolve, reject);
					})
					.catch(x => reject(x));
			} else {
				resolve(data);
			}
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("ok")) {
				events.push(new Event('card.SearchDuplicateCardsOkEvent'));
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}



/******* S.D.G. *******/



