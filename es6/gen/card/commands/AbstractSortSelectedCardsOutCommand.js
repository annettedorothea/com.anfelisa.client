/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";
import LoadCardsAction from "../../../src/card/actions/LoadCardsAction";

export default class AbstractSortSelectedCardsOutCommand extends AsynchronousCommand {
    constructor() {
        super("card.SortSelectedCardsOutCommand");
    }
    
    initCommandData(data) {
        data.cardIds = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "cardView", "selectedCardIds"]
        )
        ;
        data.boxId = AppState.get(
        	["rootContainer", "mainView", "authorView", "boxId"]
        )
        ;
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	
	allMandatoryValuesAreSet(data) {
		if (data.cardIds === undefined || data.cardIds === null) {
			console.warn("AbstractSortSelectedCardsOutCommand: cardIds is mandatory but is not set", data);
			return false;
		}
		if (data.boxId === undefined || data.boxId === null) {
			console.warn("AbstractSortSelectedCardsOutCommand: boxId is mandatory but is not set", data);
			return false;
		}
		return true;
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	if (this.allMandatoryValuesAreSet(data)) {
		    	let payload = {
		    		cardIds : data.cardIds,
		    		boxId : data.boxId
		    	};
				AppUtils.httpPost(
						`${AppUtils.settings.rootPath}/cards/sort-out`, 
						data.uuid, 
						true,
						 payload)
					.then(() => {
						this.handleResponse(data, resolve, reject);
					}, (error) => {
						data.error = error;
						this.handleError(data, resolve, reject);
					})
					.catch(x => reject(x));
			} else {
				resolve(data);
			}
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("ok")) {
				events.push(new Event('card.SortSelectedCardsOutOkEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadCardsAction(), 
						data: {
							keepSelectedCards: data.keepSelectedCards
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}



/******* S.D.G. *******/



