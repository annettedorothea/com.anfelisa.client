/********************************************************************************
 * generated by de.acegen 1.6.5
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";
import SearchDuplicateCardsAction from "../../../src/card/actions/SearchDuplicateCardsAction";

export default class AbstractTranslateCommand extends AsynchronousCommand {
    constructor() {
        super("card.TranslateCommand");
    }
    
    initCommandData(data) {
        data.naturalInputOrder = AppState.get(
        	["rootContainer", "mainView", "authorView", "cardView", "naturalInputOrder"]
        )
        ;
        data.given = AppState.get(
        	["rootContainer", "mainView", "authorView", "cardView", "newCard", "given"]
        )
        ;
        data.wanted = AppState.get(
        	["rootContainer", "mainView", "authorView", "cardView", "newCard", "wanted"]
        )
        ;
        data.givenLanguage = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "rootCategory", "givenLanguage"]
        )
        ;
        data.wantedLanguage = AppState.get(
        	["rootContainer", "mainView", "authorView", "categoryTree", "rootCategory", "wantedLanguage"]
        )
        ;
        data.outcomes = [];
    }

	addWantedFetchedOutcome(data) {
		data.outcomes.push("wantedFetched");
	}
	addGivenFetchedOutcome(data) {
		data.outcomes.push("givenFetched");
	}
	addErrorOutcome(data) {
		data.outcomes.push("error");
	}
	addEmptyOutcome(data) {
		data.outcomes.push("empty");
	}
	addTargetNotEmtpyOutcome(data) {
		data.outcomes.push("targetNotEmtpy");
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
			AppUtils.httpGet(
					`${AppUtils.settings.rootPath}/card/translation?${data.sourceValue ? `sourceValue=${data.sourceValue}` : ""}&${data.sourceLanguage ? `sourceLanguage=${data.sourceLanguage}` : ""}&${data.targetLanguage ? `targetLanguage=${data.targetLanguage}` : ""}`, 
					data.uuid, 
					true).then((response) => {
				data.targetValue = response.targetValue;
				this.handleResponse(data, resolve, reject);
			}, (error) => {
				data.error = error;
				this.handleError(data, resolve, reject);
			});
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("wantedFetched")) {
				events.push(new Event('card.TranslateWantedFetchedEvent'));
				actionsToBeTriggered.push(
					{
						action: new SearchDuplicateCardsAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("givenFetched")) {
				events.push(new Event('card.TranslateGivenFetchedEvent'));
				actionsToBeTriggered.push(
					{
						action: new SearchDuplicateCardsAction(), 
						data: {
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}


}



/******* S.D.G. *******/



