/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import * as AppUtils from "../../src/app/AppUtils";
import * as ACEController from "./ACEController";

export let settings;

function getServerInfo() {
    return AppUtils.httpGet(settings.rootPath + '/server/info');
}

export function loadSettings() {
    return AppUtils.httpGet("settings.json").then((loadedSettings) => {
        settings = loadedSettings;
        if (!settings.clientVersion) {
            settings.clientVersion = "";
        }
        if (!settings.aceScenariosApiKey) {
            settings.aceScenariosApiKey = "";
        }
        if (!settings.aceScenariosBaseUrl) {
            settings.aceScenariosBaseUrl = "";
        }
        if (!settings.rootPath) {
            settings.rootPath = "";
        }
        if (!settings.timelineSize) {
            settings.timelineSize = 0;
        }
		if (!settings.mode) {
		    settings.mode = "live";
		}
        if (settings.rootPath.startsWith("/")) {
            settings.rootPath = settings.rootPath.substring(1);
        }
        if (settings.rootPath.endsWith("/")) {
            settings.rootPath = settings.rootPath.substring(0, settings.rootPath.length - 1);
        }
    });
}

export function saveTimeline(description, creator) {
    return getServerInfo().then((serverInfo) => {
        const browser = getBrowserInfo();
        const uuid = AppUtils.createUUID();
        const data = {
            description,
            timeline: JSON.stringify(ACEController.timeline),
            creator,
            clientVersion: settings.clientVersion,
            device: browser.name + " " + browser.version,
            apiKey: settings.aceScenariosApiKey,
            serverVersion: serverInfo.serverVersion
        };
        return AppUtils.httpPost(settings.aceScenariosBaseUrl + 'api/client-timeline/create', uuid, false, data).then(() => {
            return new Promise((resolve) => {
                resolve(uuid);
            });
        });
    });
}

export function loadTimeline(id) {
    return AppUtils.httpGet(settings.aceScenariosBaseUrl + `api/timeline?id=${id}&apiKey=${settings.aceScenariosApiKey}`, AppUtils.createUUID(), false);
}

function getBrowserInfo() {
    let ua = navigator.userAgent, tem,
        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return {name: 'IE ', version: (tem[1] || '')};
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\bOPR\/(\d+)/);
        if (tem != null) {
            return {name: 'Opera', version: tem[1]};
        }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) {
        M.splice(1, 1, tem[1]);
    }
    return {
        name: M[0],
        version: M[1]
    };
}




/******* S.D.G. *******/





