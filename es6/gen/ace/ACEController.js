/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import * as AppUtils from "../../src/app/AppUtils";
import * as Utils from "./Utils";
import * as AppState from "./AppState";
import Event from "./Event";

export let timeline = [];
export let listeners = {};
export let delayedActions = {};

let actionQueue = [];

export function registerListener(eventName, listener) {
    if (!eventName.trim()) {
        throw new Error('cannot register listener for empty eventName');
    }
    if (!listener) {
        throw new Error('cannot register undefined listener for event ' + eventName);
    }
    let listenersForEventName;
    if (listeners[eventName] === undefined) {
        listeners[eventName] = [];
    }
    listenersForEventName = listeners[eventName];
    listenersForEventName.push(listener);
}

export function addItemToTimeLine(item) {
	if (Utils.settings && Utils.settings.timelineSize > 0) {
	    timeline.push(AppUtils.deepCopy(item));
		if (timeline.length > Utils.settings.timelineSize) {
		    timeline.shift();
		    while (timeline.length > 0 && timeline.length > 0 && !timeline[0].appState) {
		        timeline.shift();
		    }
		}
	}
}

export function addActionToQueue(action) {
	actionQueue.push(action);
    applyNextActions();
}

function applyNextActions() {
    let nextAction = actionQueue.shift();
    if (nextAction) {
		if (nextAction.action.asynchronous) {
            nextAction.action.applyAction(nextAction.data).then(() => {
		    	applyNextActions();
		    }, (error) => {
		        AppUtils.displayUnexpectedError(error);
		    	applyNextActions();
		    });
		} else {
			try {
                nextAction.action.applyAction(nextAction.data);
		    	applyNextActions();
			} catch(error) {
		        AppUtils.displayUnexpectedError(error);
		    	applyNextActions();
			}
		}
    }
}

export function startReplay(timeline, pauseInMillis) {
    AppUtils.startReplay();

    let events = [];
	
	let appStateWasSet = false;
    for (let i = 0; i < timeline.length; i++) {
        let item = timeline[i];
        if (item.event && appStateWasSet && item.event.eventName !== "TriggerAction") {
            events.push({
            	event: new Event(item.event.eventName),
            	data: item.event.data
            });
        }
		if (item.appState && !appStateWasSet) {
		    AppState.setInitialAppState(item.appState);
		    appStateWasSet = true;
		}
    }

	setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
}

function replayNextEvent(events, pauseInMillis) {
    let nextEvent = events.shift();
    if (nextEvent) {
    	nextEvent.event.replay(nextEvent.data);
    	setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
    } else {
        setTimeout(() => finishReplay(), pauseInMillis);
    }
}

function finishReplay() {
    console.info("replay finished");
    timeline = [];
    actionQueue = [];
    AppUtils.createInitialAppState();
    AppUtils.startApp();
}




/******* S.D.G. *******/




