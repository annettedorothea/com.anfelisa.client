/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import * as AppUtils from "../../src/AppUtils";
import * as AppState from "../../src/AppState";
import Event from "./Event";

export let timeline = [];
export let listeners = {};

export function registerListener(eventName, listener) {
	if (!listener) {
		console.warn("you try to register an undefined listener for event " + eventName)
	} else {
		let listenersForEventName;
		if (listeners[eventName] === undefined) {
			listeners[eventName] = [];
		}
		listenersForEventName = listeners[eventName];
		listenersForEventName.push(listener);
	}
}

export function addItemToTimeLine(item) {
	if (AppUtils.settings && AppUtils.settings.timelineSize > 0) {
	    timeline.push(AppUtils.deepCopy(item));
		if (timeline.length > AppUtils.settings.timelineSize) {
		    timeline.shift();
		    while (timeline.length > 0 && timeline.length > 0 && !timeline[0].appState) {
		        timeline.shift();
		    }
		}
	}
}

export function startReplay(timeline, pauseInMillis) {
    AppUtils.startReplay();

    let events = [];
	
	let appStateWasSet = false;
    for (let i = 0; i < timeline.length; i++) {
        let item = timeline[i];
        if (item.event && appStateWasSet && item.event.eventName !== "TriggerAction") {
            events.push({
            	event: new Event(item.event.eventName),
            	data: item.event.data
            });
        }
		if (item.appState && !appStateWasSet) {
		    AppState.setInitialAppState(item.appState);
            AppState.stateUpdated();
		    appStateWasSet = true;
		}
    }
    
    console.info(`replay ${events.length} events`);

	setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
}

function replayNextEvent(events, pauseInMillis) {
    let nextEvent = events.shift();
    if (nextEvent) {
    	console.info("replay", nextEvent);
    	nextEvent.event.replay(nextEvent.data);
		AppState.stateUpdated();
    	setTimeout(() => replayNextEvent(events, pauseInMillis), pauseInMillis);
    } else {
        setTimeout(() => finishReplay(), pauseInMillis);
    }
}

function finishReplay() {
    console.info("replay finished");
    timeline = [];
    AppState.createInitialAppState();
    AppUtils.startApp();
}




/******* S.D.G. *******/




