/********************************************************************************
 * generated by de.acegen 1.0.1
 ********************************************************************************/




import SynchronousCommand from "../../../gen/ace/SynchronousCommand";
import TriggerAction from "../../../gen/ace/TriggerAction";
import * as AppState from "../../ace/AppState";
import CollapseTreeItemOkEvent from "../../../gen/category/events/CollapseTreeItemOkEvent";
import CollapseTreeItemSelectParentCategoryEvent from "../../../gen/category/events/CollapseTreeItemSelectParentCategoryEvent";
import SelectTreeItemAction from "../../../src/category/actions/SelectTreeItemAction";

export default class AbstractCollapseTreeItemCommand extends SynchronousCommand {
    constructor(commandData) {
        super(commandData, "category.CollapseTreeItemCommand");
        this.ok = "ok";
        this.selectParentCategory = "selectParentCategory";
        this.commandData.rootCategory = AppState.get_authorView_categoryTree_rootCategory();
        this.commandData.selectedCategory = AppState.get_authorView_categoryTree_selectedCategory();
    }

    publishEvents() {
		switch (this.commandData.outcome) {
		case this.ok:
			new CollapseTreeItemOkEvent(this.commandData).publish();
			break;
		case this.selectParentCategory:
			new CollapseTreeItemSelectParentCategoryEvent(this.commandData).publish();
			new TriggerAction(new SelectTreeItemAction(this.commandData.categoryId)).publish();
			break;
		default:
			throw 'CollapseTreeItemCommand unhandled outcome: ' + this.commandData.outcome;
		}
    }
}




/******* S.D.G. *******/



