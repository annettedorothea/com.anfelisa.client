/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";
import RouteToDefaultAction from "../../../src/common/actions/RouteToDefaultAction";
import DisplayToastAction from "../../../src/common/actions/DisplayToastAction";

export default class AbstractLoadNextCardCommand extends AsynchronousCommand {
    constructor() {
        super("box.LoadNextCardCommand");
    }
    
    initCommandData(data) {
        data.boxId = AppState.get(
        	["rootContainer", "mainView", "queryCardView", "boxId"]
        )
        ;
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	addFinishedOutcome(data) {
		data.outcomes.push("finished");
	}
	
	allMandatoryValuesAreSet(data) {
		if (!data.boxId) {
			console.warn("AbstractLoadNextCardCommand: boxId is mandatory but is not set", data);
			return false;
		}
		return true;
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	if (this.allMandatoryValuesAreSet(data)) {
				AppUtils.httpGet(
						`${AppUtils.settings.rootPath}/box/next-card?${data.boxId ? `boxId=${data.boxId}` : ""}`, 
						data.uuid, 
						true)
					.then((response) => {
						data.nextCard = response.nextCard;
						data.allTodaysCards = response.allTodaysCards;
						data.openTodaysCards = response.openTodaysCards;
						data.reverse = response.reverse;
						this.handleResponse(data, resolve, reject);
					}, (error) => {
						data.error = error;
						this.handleError(data, resolve, reject);
					})
					.catch(x => reject(x));
			} else {
				resolve(data);
			}
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("ok")) {
				events.push(new Event('box.LoadNextCardOkEvent'));
			}
			if (data.outcomes.includes("finished")) {
				events.push(new Event('box.LoadNextCardFinishedEvent'));
				actionsToBeTriggered.push(
					{
						action: new RouteToDefaultAction(), 
						data: {
						}
					}
				);
				actionsToBeTriggered.push(
					{
						action: new DisplayToastAction(), 
						data: {
							textKey: data.textKey, 
							args: data.args
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}



/******* S.D.G. *******/



