/********************************************************************************
 * generated by de.acegen 0.9.13
 ********************************************************************************/




import AsynchronousCommand from "../../../gen/ace/AsynchronousCommand";
import Utils from "../../ace/Utils";
import AppUtils from "../../../src/app/AppUtils";
import * as AppState from "../../ace/AppState";
import LoadNextCardOkEvent from "../../../gen/box/events/LoadNextCardOkEvent";

export default class AbstractLoadNextCardCommand extends AsynchronousCommand {
    constructor(commandData) {
        super(commandData, "box.LoadNextCardCommand");
        this.ok = "ok";
        this.commandData.boxId = AppState.get_cardView_boxId();
    }

    publishEvents() {
		let promises = [];
	    	
		switch (this.commandData.outcome) {
		case this.ok:
			promises.push(new LoadNextCardOkEvent(this.commandData).publish());
			break;
		default:
			return new Promise((resolve, reject) => {reject('LoadNextCardCommand unhandled outcome: ' + this.commandData.outcome)});
		}
		return Promise.all(promises);
    }
    
	execute() {
	    return new Promise((resolve, reject) => {
	
			AppUtils.httpGet(`${Utils.settings.rootPath}/box/next-card?boxId=${this.commandData.boxId}&todayAtMidnightInUTC=${this.commandData.todayAtMidnightInUTC}`, this.commandData.uuid, true).then((data) => {
				this.commandData.cardId = data.cardId;
				this.commandData.categoryId = data.categoryId;
				this.commandData.count = data.count;
				this.commandData.given = data.given;
				this.commandData.image = data.image;
				this.commandData.lastQuality = data.lastQuality;
				this.commandData.rootCategoryId = data.rootCategoryId;
				this.commandData.scheduledCardId = data.scheduledCardId;
				this.commandData.reinforceCardId = data.reinforceCardId;
				this.commandData.scheduledDate = data.scheduledDate;
				this.commandData.scoredDate = data.scoredDate;
				this.commandData.wanted = data.wanted;
				this.commandData.openTodaysCards = data.openTodaysCards;
				this.commandData.allTodaysCards = data.allTodaysCards;
				this.handleResponse(resolve, reject);
			}, (error) => {
				this.commandData.error = error;
				this.handleError(resolve, reject);
			});
	    });
	}

}




/******* S.D.G. *******/



