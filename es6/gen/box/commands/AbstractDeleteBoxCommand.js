/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";
import LoadBoxesAction from "../../../src/box/actions/LoadBoxesAction";
import DisplayErrorToastAction from "../../../src/common/actions/DisplayErrorToastAction";

export default class AbstractDeleteBoxCommand extends AsynchronousCommand {
    constructor() {
        super("box.DeleteBoxCommand");
    }
    
    initCommandData(data) {
        data.boxId = AppState.get(
        	["rootContainer", "mainView", "dashboardView", "deleteBox", "boxId"]
        )
        ;
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	addErrorOutcome(data) {
		data.outcomes.push("error");
	}
	
	allMandatoryValuesAreSet(data) {
		if (data.boxId === undefined || data.boxId === null) {
			console.warn("AbstractDeleteBoxCommand: boxId is mandatory but is not set", data);
			return false;
		}
		return true;
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	if (this.allMandatoryValuesAreSet(data)) {
				AppUtils.httpDelete(
						`${AppUtils.settings.rootPath}/box/delete?${data.boxId ? `boxId=${data.boxId}` : ""}`, 
						data.uuid, 
						true)
					.then(() => {
						this.handleResponse(data, resolve, reject);
					}, (error) => {
						data.error = error;
						this.handleError(data, resolve, reject);
					})
					.catch(x => reject(x));
			} else {
				resolve(data);
			}
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("ok")) {
				events.push(new Event('box.DeleteBoxOkEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadBoxesAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("error")) {
				events.push(new Event('box.DeleteBoxErrorEvent'));
				actionsToBeTriggered.push(
					{
						action: new DisplayErrorToastAction(), 
						data: {
							textKey: data.textKey, 
							args: data.args
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}



/******* S.D.G. *******/



