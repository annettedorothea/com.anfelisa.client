/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import AsynchronousCommand from "../../../gen/ace/AsynchronousCommand";
import TriggerAction from "../../../gen/ace/TriggerAction";
import Utils from "../../ace/Utils";
import AppUtils from "../../../src/app/AppUtils";
import * as AppState from "../../ace/AppState";
import DeleteBoxErrorEvent from "../../../gen/box/events/DeleteBoxErrorEvent";
import LoadBoxesAction from "../../../src/box/actions/LoadBoxesAction";
import DisplayToastAction from "../../../src/common/actions/DisplayToastAction";

export default class AbstractDeleteBoxCommand extends AsynchronousCommand {
    constructor(commandData) {
        super(commandData, "box.DeleteBoxCommand");
        this.commandData.boxId = AppState.get_rootContainer_dashboardView_deleteBox_boxId();
        this.commandData.outcomes = [];
    }

	addOkOutcome() {
		this.commandData.outcomes.push("ok");
	}
	addErrorOutcome() {
		this.commandData.outcomes.push("error");
	}

    publishEvents() {
		let promises = [];
	    
		if (this.commandData.outcomes.includes("ok")) {
			promises.push(new TriggerAction(new LoadBoxesAction()).publish());
		}
		if (this.commandData.outcomes.includes("error")) {
			promises.push(new DeleteBoxErrorEvent(this.commandData).publish());
			promises.push(new TriggerAction(new DisplayToastAction(this.commandData.message)).publish());
		}
		return Promise.all(promises);
    }
    
	execute() {
	    return new Promise((resolve, reject) => {
	
			AppUtils.httpDelete(`${Utils.settings.rootPath}/box/delete?boxId=${this.commandData.boxId}`, this.commandData.uuid, true).then(() => {
				this.handleResponse(resolve, reject);
			}, (message) => {
				this.commandData.message = message;
				this.handleError(resolve, reject);
			});
	    });
	}

}




/******* S.D.G. *******/



