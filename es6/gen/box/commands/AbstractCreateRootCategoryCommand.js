/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import TriggerAction from "../../ace/TriggerAction";
import * as Utils from "../../ace/Utils";
import * as AppUtils from "../../../src/app/AppUtils";
import * as AppState from "../../ace/AppState";
import RouteAction from "../../../src/common/actions/RouteAction";

export default class AbstractCreateRootCategoryCommand extends AsynchronousCommand {
    constructor() {
        super("box.CreateRootCategoryCommand");
    }
    
    initCommandData(data) {
        data.maxInterval = AppState.get_rootContainer_boxSettingsView_boxSettings_maxInterval();
        data.maxCardsPerDay = AppState.get_rootContainer_boxSettingsView_boxSettings_maxCardsPerDay();
        data.categoryId = AppState.get_rootContainer_boxSettingsView_boxSettings_categoryId();
        data.categoryName = AppState.get_rootContainer_boxSettingsView_boxSettings_categoryName();
        data.dictionaryLookup = AppState.get_rootContainer_boxSettingsView_boxSettings_dictionaryLookup();
        data.givenLanguage = AppState.get_rootContainer_boxSettingsView_boxSettings_givenLanguage();
        data.wantedLanguage = AppState.get_rootContainer_boxSettingsView_boxSettings_wantedLanguage();
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	let payload = {
	    		categoryName : data.categoryName,
	    		dictionaryLookup : data.dictionaryLookup,
	    		givenLanguage : data.givenLanguage,
	    		wantedLanguage : data.wantedLanguage,
	    		maxCardsPerDay : data.maxCardsPerDay,
	    		maxInterval : data.maxInterval
	    	};
			AppUtils.httpPost(`${AppUtils.settings.rootPath}/box/create`, data.uuid, true, payload).then(() => {
				this.handleResponse(data, resolve, reject);
			}, (error) => {
				data.error = error;
				this.handleError(data, resolve, reject);
			});
	    });
	}

    publishEvents(data) {
		if (data.outcomes.includes("ok")) {
			new TriggerAction().publish(
				new RouteAction(), 
					{
						hash: data.hash
					}
			)
		}
    }

}



/******* S.D.G. *******/



