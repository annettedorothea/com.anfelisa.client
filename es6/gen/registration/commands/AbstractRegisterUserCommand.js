/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";
import DisplayToastAction from "../../../src/common/actions/DisplayToastAction";
import LoginAction from "../../../src/registration/actions/LoginAction";
import DisplayErrorToastAction from "../../../src/common/actions/DisplayErrorToastAction";

export default class AbstractRegisterUserCommand extends AsynchronousCommand {
    constructor() {
        super("registration.RegisterUserCommand");
    }
    
    initCommandData(data) {
        data.email = AppState.get(
        	["rootContainer", "mainView", "registrationView", "email", "value"]
        )
        ;
        data.language = AppState.get(
        	["rootContainer", "language"]
        )
        ;
        data.username = AppState.get(
        	["rootContainer", "mainView", "registrationView", "username", "value"]
        )
        ;
        data.password = AppState.get(
        	["rootContainer", "mainView", "registrationView", "password", "value"]
        )
        ;
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	addErrorOutcome(data) {
		data.outcomes.push("error");
	}
	
	allMandatoryValuesAreSet(data) {
		if (!data.password) {
			console.warn("AbstractRegisterUserCommand: password is mandatory but is not set", data);
			return false;
		}
		if (!data.username) {
			console.warn("AbstractRegisterUserCommand: username is mandatory but is not set", data);
			return false;
		}
		if (!data.email) {
			console.warn("AbstractRegisterUserCommand: email is mandatory but is not set", data);
			return false;
		}
		if (!data.language) {
			console.warn("AbstractRegisterUserCommand: language is mandatory but is not set", data);
			return false;
		}
		return true;
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
	    	if (this.allMandatoryValuesAreSet(data)) {
		    	let payload = {
		    		password : data.password,
		    		username : data.username,
		    		email : data.email,
		    		language : data.language
		    	};
				AppUtils.httpPost(
						`${AppUtils.settings.rootPath}/users/register`, 
						data.uuid, 
						false,
						 payload)
					.then(() => {
						this.handleResponse(data, resolve, reject);
					}, (error) => {
						data.error = error;
						this.handleError(data, resolve, reject);
					})
					.catch(x => reject(x));
			} else {
				resolve(data);
			}
	    });
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("ok")) {
				events.push(new Event('registration.RegisterUserOkEvent'));
				actionsToBeTriggered.push(
					{
						action: new DisplayToastAction(), 
						data: {
							textKey: data.textKey, 
							args: data.args
						}
					}
				);
				actionsToBeTriggered.push(
					{
						action: new LoginAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("error")) {
				events.push(new Event('registration.RegisterUserErrorEvent'));
				actionsToBeTriggered.push(
					{
						action: new DisplayErrorToastAction(), 
						data: {
							textKey: data.textKey, 
							args: data.args
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}



/******* S.D.G. *******/



