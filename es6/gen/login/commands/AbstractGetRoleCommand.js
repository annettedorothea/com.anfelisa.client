/********************************************************************************
 * generated by de.acegen 1.3.0
 ********************************************************************************/




import AsynchronousCommand from "../../ace/AsynchronousCommand";
import Event from "../../ace/Event";
import TriggerAction from "../../ace/TriggerAction";
import * as Utils from "../../ace/Utils";
import * as AppUtils from "../../../src/app/AppUtils";
import RouteAction from "../../../src/common/actions/RouteAction";
import DisplayToastAction from "../../../src/common/actions/DisplayToastAction";
import LogoutAction from "../../../src/common/actions/LogoutAction";

export default class AbstractGetRoleCommand extends AsynchronousCommand {
    constructor() {
        super("login.GetRoleCommand");
    }
    
    initCommandData(data) {
        data.outcomes = [];
    }

	addOkOutcome(data) {
		data.outcomes.push("ok");
	}
	addUnauthorizedOutcome(data) {
		data.outcomes.push("unauthorized");
	}

	execute(data) {
	    return new Promise((resolve, reject) => {
			AppUtils.httpGet(`${AppUtils.settings.rootPath}/user/role`, data.uuid, true).then((response) => {
				data.role = response.role;
				this.handleResponse(data, resolve, reject);
			}, (error) => {
				data.error = error;
				this.handleError(data, resolve, reject);
			});
	    });
	}

    publishEvents(data) {
		if (data.outcomes.includes("ok")) {
			new Event('login.GetRoleOkEvent').publish(data);
			AppUtils.stateUpdated(AppState.getAppState());
			new TriggerAction().publish(
				new RouteAction(), 
					{
						hash: data.hash
					}
			)
		}
		if (data.outcomes.includes("unauthorized")) {
			new Event('login.GetRoleUnauthorizedEvent').publish(data);
			AppUtils.stateUpdated(AppState.getAppState());
			new TriggerAction().publish(
				new DisplayToastAction(), 
					{
						message: data.message, 
						error: data.error
					}
			)
			new TriggerAction().publish(
				new LogoutAction(), 
					{
					}
			)
		}
    }

}



/******* S.D.G. *******/



