/********************************************************************************
 * generated by de.acegen
 ********************************************************************************/




import SynchronousCommand from "../../ace/SynchronousCommand";
import Event from "../../ace/Event";
import ConfirmEmailAction from "../../../src/registration/actions/ConfirmEmailAction";
import InitBoxesForDayAction from "../../../src/box/actions/InitBoxesForDayAction";
import LoadCategoryTreeAction from "../../../src/category/actions/LoadCategoryTreeAction";
import LoadUserAction from "../../../src/profile/actions/LoadUserAction";
import LoadNextCardAction from "../../../src/box/actions/LoadNextCardAction";
import LoadSettingsAction from "../../../src/box/actions/LoadSettingsAction";
import LoadActiveCardsAction from "../../../src/box/actions/LoadActiveCardsAction";
import RouteAction from "../../../src/common/actions/RouteAction";
import * as AppUtils from "../../../src/AppUtils";
import * as AppState from "../../../src/AppState";

export default class AbstractRouteChangedCommand extends SynchronousCommand {
    constructor() {
        super("common.RouteChangedCommand");
    }

    initCommandData(data) {
        data.hash = AppState.getLocation(
        	["rootContainer", "hash"]
        )
        ;
        data.loggedInUser = AppState.get(
        	["rootContainer", "loggedInUser"]
        )
        ;
        data.outcomes = [];
    }

	addLoginOutcome(data) {
		data.outcomes.push("login");
	}
	addPrivacyPolicyOutcome(data) {
		data.outcomes.push("privacyPolicy");
	}
	addRegistrationOutcome(data) {
		data.outcomes.push("registration");
	}
	addConfirmEmailOutcome(data) {
		data.outcomes.push("confirmEmail");
	}
	addForgotPasswordOutcome(data) {
		data.outcomes.push("forgotPassword");
	}
	addResetPasswordOutcome(data) {
		data.outcomes.push("resetPassword");
	}
	addDashboardOutcome(data) {
		data.outcomes.push("dashboard");
	}
	addCategoriesOutcome(data) {
		data.outcomes.push("categories");
	}
	addProfileOutcome(data) {
		data.outcomes.push("profile");
	}
	addNextCardOutcome(data) {
		data.outcomes.push("nextCard");
	}
	addBoxSettingsOutcome(data) {
		data.outcomes.push("boxSettings");
	}
	addAllActiveCardsOutcome(data) {
		data.outcomes.push("allActiveCards");
	}
	addBoxCreateOutcome(data) {
		data.outcomes.push("boxCreate");
	}
	addInvalidOutcome(data) {
		data.outcomes.push("invalid");
	}
	
	publishEvents(data) {
		return new Promise((resolve) => {
			const events = [];
			const actionsToBeTriggered = [];
			if (data.outcomes.includes("login")) {
				events.push(new Event('common.RouteChangedLoginEvent'));
			}
			if (data.outcomes.includes("privacyPolicy")) {
				events.push(new Event('common.RouteChangedPrivacyPolicyEvent'));
			}
			if (data.outcomes.includes("registration")) {
				events.push(new Event('common.RouteChangedRegistrationEvent'));
			}
			if (data.outcomes.includes("confirmEmail")) {
				events.push(new Event('common.RouteChangedConfirmEmailEvent'));
				actionsToBeTriggered.push(
					{
						action: new ConfirmEmailAction(), 
						data: {
							username: data.username, 
							token: data.token
						}
					}
				);
			}
			if (data.outcomes.includes("forgotPassword")) {
				events.push(new Event('common.RouteChangedForgotPasswordEvent'));
			}
			if (data.outcomes.includes("resetPassword")) {
				events.push(new Event('common.RouteChangedResetPasswordEvent'));
			}
			if (data.outcomes.includes("dashboard")) {
				events.push(new Event('common.RouteChangedDashboardEvent'));
				actionsToBeTriggered.push(
					{
						action: new InitBoxesForDayAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("categories")) {
				events.push(new Event('common.RouteChangedCategoriesEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadCategoryTreeAction(), 
						data: {
							rootCategoryId: data.rootCategoryId, 
							selectedCategoryId: data.selectedCategoryId
						}
					}
				);
			}
			if (data.outcomes.includes("profile")) {
				events.push(new Event('common.RouteChangedProfileEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadUserAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("nextCard")) {
				events.push(new Event('common.RouteChangedNextCardEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadNextCardAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("boxSettings")) {
				events.push(new Event('common.RouteChangedBoxSettingsEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadSettingsAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("allActiveCards")) {
				events.push(new Event('common.RouteChangedAllActiveCardsEvent'));
				actionsToBeTriggered.push(
					{
						action: new LoadActiveCardsAction(), 
						data: {
						}
					}
				);
			}
			if (data.outcomes.includes("boxCreate")) {
				events.push(new Event('common.RouteChangedBoxCreateEvent'));
			}
			if (data.outcomes.includes("invalid")) {
				events.push(new Event('common.RouteChangedInvalidEvent'));
				actionsToBeTriggered.push(
					{
						action: new RouteAction(), 
						data: {
							hash: data.hash
						}
					}
				);
			}
			
			this.publish(events, data).then(() => {
		  		AppState.stateUpdated();
				this.trigger(actionsToBeTriggered).then(resolve);
			});
		})
	
	}

}




/******* S.D.G. *******/



