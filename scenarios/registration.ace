HttpClient registrationscenarios

scenarios

RegisterUserValidations
	GIVEN RegistrationHappyPath
	WHEN common.RouteToRegistration
	AND 
	WHEN registration.UsernameChanged(value: "username-${testId}") delayInMillis 200
	THEN 
		expectedState 
			username1 common.rootContainer.mainView.registrationView.username.value should be "username-${testId}"
			usernameNotAvailable1 common.rootContainer.mainView.registrationView.username.available should be false
		verifications
			registerDisabled
	AND
	WHEN registration.PasswordChanged(value: "pas")
	THEN 
		expectedState 
			password1 common.rootContainer.mainView.registrationView.password.value should be "cd0acfe085eeb0f874391fb9b8009bed"
			passwordMismatch1 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be true
		verifications
			registerDisabled
	AND
	WHEN registration.PasswordRepetitionChanged(value: "password")
	THEN 
		expectedState 
			password2 common.rootContainer.mainView.registrationView.password.value should be "cd0acfe085eeb0f874391fb9b8009bed"
			passwordRepetition2 common.rootContainer.mainView.registrationView.passwordRepetition.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordMismatch2 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be true
		verifications
			registerDisabled
	AND
	WHEN registration.PasswordRepetitionChanged(value: "pas")
	THEN 
		expectedState 
			password3 common.rootContainer.mainView.registrationView.password.value should be "cd0acfe085eeb0f874391fb9b8009bed"
			passwordRepetition3 common.rootContainer.mainView.registrationView.passwordRepetition.value should be "cd0acfe085eeb0f874391fb9b8009bed"
			passwordMatch3 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be false
		verifications
			registerDisabled
	AND
		WHEN registration.PasswordRepetitionChanged(value: "password")
	THEN 
		expectedState 
			password4 common.rootContainer.mainView.registrationView.password.value should be "cd0acfe085eeb0f874391fb9b8009bed"
			passwordRepetition4 common.rootContainer.mainView.registrationView.passwordRepetition.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordMismatch4 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be true
		verifications
			registerDisabled
	AND
	WHEN registration.PasswordChanged(value: "password")
	THEN 
		expectedState 
			password5 common.rootContainer.mainView.registrationView.password.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordRepetition5 common.rootContainer.mainView.registrationView.passwordRepetition.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordMatch5 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be false
		verifications
			registerDisabled
	AND
	WHEN registration.EmailChanged(value: "email")
	THEN 
		expectedState 
			email common.rootContainer.mainView.registrationView.email.value should be "email"
			emailInvalid common.rootContainer.mainView.registrationView.email.emailInvalid should be true
		verifications
			registerDisabled
	AND	
	WHEN registration.EmailChanged(value: "info@anfelisa.de")
	THEN 
		expectedState 
			emailOk common.rootContainer.mainView.registrationView.email.value should be "info@anfelisa.de"
			emailValid common.rootContainer.mainView.registrationView.email.emailInvalid should be false
		verifications
			registerDisabled
	AND 
	WHEN registration.UsernameChanged(value: "other-${testId}") delayInMillis 200
	THEN 
		expectedState 
			username common.rootContainer.mainView.registrationView.username.value should be "other-${testId}"
			usernameAvailable common.rootContainer.mainView.registrationView.username.available should be true
		verifications
			registerEnabled
	
ConfirmEmail
	GIVEN RegistrationHappyPath
	WHEN registration.ConfirmEmail(username: "username-${testId}", token: "${testId}-TOKEN")
	THEN 
		verifications
			confirmEmailMessageShown(common.rootContainer.messageContainer.messages)
			

ConfirmEmailTokenDoesNotExist
	GIVEN RegistrationHappyPath
	WHEN registration.ConfirmEmail(username: "username-${testId}", token: "DOES_NOT_EXIST")
	THEN 
		verifications
			confirmEmailErrorMessageShown(common.rootContainer.messageContainer.messages)
			
RegistrationHappyPath
	GIVEN commonscenarios.Init
	WHEN common.RouteToRegistration
	THEN
		expectedState 
			displayUsernameSpinner common.rootContainer.mainView.registrationView.username.displayUsernameSpinner should be false
			emailInvalid common.rootContainer.mainView.registrationView.email.emailInvalid should be false
			initialEmail common.rootContainer.mainView.registrationView.email.value should be ""
			initialUsername common.rootContainer.mainView.registrationView.username.value should be ""
			initialPassword common.rootContainer.mainView.registrationView.password.value should be ""
			initialPasswordRepetition common.rootContainer.mainView.registrationView.passwordRepetition.value should be ""
			passwordRepetitionMismatch common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be false
		verifications
			registerDisabled
	AND 
	WHEN registration.UsernameChanged(value: "username-${testId}") delayInMillis 200
	THEN 
		expectedState 
			username common.rootContainer.mainView.registrationView.username.value should be "username-${testId}"
			usernameAvailable common.rootContainer.mainView.registrationView.username.available should be true
		verifications
			registerDisabled
	AND
	WHEN registration.PasswordChanged(value: "password")
	THEN 
		expectedState 
			password common.rootContainer.mainView.registrationView.password.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordRepetition common.rootContainer.mainView.registrationView.passwordRepetition.value should be ""
			passwordRepetitionMatch common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be false
		verifications
			registerDisabled
	AND	
	WHEN registration.PasswordRepetitionChanged(value: "password")
	THEN 
		expectedState 
			password2 common.rootContainer.mainView.registrationView.password.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordRepetition2 common.rootContainer.mainView.registrationView.passwordRepetition.value should be "5f4dcc3b5aa765d61d8327deb882cf99"
			passwordRepetitionMismatch2 common.rootContainer.mainView.registrationView.passwordRepetition.passwordMismatch should be false
		verifications
			registerDisabled
	AND	
	WHEN registration.EmailChanged(value: "info@anfelisa.de")
	THEN 
		expectedState 
			email common.rootContainer.mainView.registrationView.email.value should be "info@anfelisa.de"
			emailValid common.rootContainer.mainView.registrationView.email.emailInvalid should be false
		verifications
			registerEnabled
	AND
	WHEN registration.RegisterUser
		squishyValues {
			uuid "uuid-${testId}"
			squishy com.anfelisa.user.ConfirmEmail.token : "${testId}-TOKEN"
		}
		delayInMillis 200
	THEN 
		expectedState 
			autoUserLoggedIn common.rootContainer.loggedInUser.username should be "username-${testId}"
			autoTokenWasSet common.rootContainer.loggedInUser.token should not be null
		verifications
			loginDataWasNotSetInLocalStorage
			infoShown(common.rootContainer.messageContainer.messages)
	AND
	WHEN
		common.Logout
		
			
