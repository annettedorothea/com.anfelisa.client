/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import AppUtils from "../../../../es6/src/app/AppUtils";
import * as LoginActionIds from "../../../acegen/gen/login/LoginActionIds";
import * as CommonActionIds from "../../../acegen/gen/common/CommonActionIds";

const testId = ScenarioUtils.testId();

context('LoginUnauthorized', () => {
    beforeEach(() => {
    	let nonDeterministicValues;
    	let nonDeterministicValue;
			ScenarioUtils.getCypressFor(CommonActionIds.init, ).should(() => {
				ScenarioUtils.wait(2, 2).should(() => {
					ScenarioUtils.getCypressFor(LoginActionIds.usernameChanged, [`username-${testId}`]).should(() => {
						ScenarioUtils.wait(1, 0).should(() => {
							ScenarioUtils.getCypressFor(LoginActionIds.passwordChanged, [`password`]).should(() => {
								ScenarioUtils.wait(1, 0).should(() => {
								});
							});
						});
					});
				});
			});
    })

    it('loggedInUserIsNotSet usernameInLocalStorateWasNotSet passwordInLocalStorateWasNotSet errorShown ', () => {

ScenarioUtils.getCypressFor(LoginActionIds.login, ).should(() => {
	ScenarioUtils.wait(1, 2).should(() => {
        const appState = JSON.parse(localStorage.getItem('appState'))
        expect(appState.rootContainer.loggedInUser, "loggedInUserIsNotSet").to.eql(null)
        expect(appState.rootContainer.username, "usernameInLocalStorateWasNotSet").to.eql()
        expect(appState.rootContainer.password, "passwordInLocalStorateWasNotSet").to.eql()
        expect(appState.rootContainer.messages, "errorShown").to.eql([
        	{ 
        		code : 401,
        		text : `Unauthorized`,
        		textKey : `loginFailed`,
        		type : `error`,
        		visible : true,
        		id : 0
        	}
        ]
        )
	})
})
    })
})




/******* S.D.G. *******/




