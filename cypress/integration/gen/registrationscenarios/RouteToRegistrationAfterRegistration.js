/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import AppUtils from "../../../../es6/src/app/AppUtils";
import * as CommonActionIds from "../../../acegen/gen/common/CommonActionIds";
import * as RegistrationActionIds from "../../../acegen/gen/registration/RegistrationActionIds";

const testId = ScenarioUtils.testId();

context('RouteToRegistrationAfterRegistration', () => {
    beforeEach(() => {
    	let nonDeterministicValues;
    	let nonDeterministicValue;
			ScenarioUtils.getCypressFor(CommonActionIds.init, ).should(() => {
				ScenarioUtils.wait(2, 2).should(() => {
					ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]).should(() => {
						ScenarioUtils.wait(1, 0).should(() => {
							ScenarioUtils.getCypressFor(RegistrationActionIds.usernameChanged, [`username-${testId}`]).should(() => {
								ScenarioUtils.wait(1, 2).should(() => {
									ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`pas`]).should(() => {
										ScenarioUtils.wait(1, 0).should(() => {
											ScenarioUtils.getCypressFor(RegistrationActionIds.passwordRepetitionChanged, [`password`]).should(() => {
												ScenarioUtils.wait(1, 0).should(() => {
													ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`password`]).should(() => {
														ScenarioUtils.wait(1, 0).should(() => {
															ScenarioUtils.getCypressFor(RegistrationActionIds.emailChanged, [`info@anfelisa.de`]).should(() => {
																ScenarioUtils.wait(1, 0).should(() => {
															nonDeterministicValues = JSON.parse(localStorage.getItem('nonDeterministicValues'));
		if (!nonDeterministicValues) {
			nonDeterministicValues = [];
		}
		nonDeterministicValue = {
			uuid: `uuid-${testId}`
		};
		nonDeterministicValues.push(nonDeterministicValue);
		AppUtils.httpPut(`/api/test/non-deterministic/value?uuid=uuid-${testId}&key=token&value=${testId}-TOKEN`);
		localStorage.setItem('nonDeterministicValues', JSON.stringify(nonDeterministicValues));
																	ScenarioUtils.getCypressFor(RegistrationActionIds.registerUser, ).should(() => {
																		ScenarioUtils.wait(2, 1).should(() => {
																			ScenarioUtils.getCypressFor(CommonActionIds.logout, ).should(() => {
																				ScenarioUtils.wait(2, 0).should(() => {
																				});
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
    })

    it('displayUsernameSpinner emailInvalid passwordMismatch email username password passwordRepetition ', () => {

ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]).should(() => {
	ScenarioUtils.wait(1, 0).should(() => {
        const appState = JSON.parse(localStorage.getItem('appState'))
        expect(appState.rootContainer.mainView.displayUsernameSpinner, "displayUsernameSpinner").to.eql(false)
        expect(appState.rootContainer.mainView.emailInvalid, "emailInvalid").to.eql(false)
        expect(appState.rootContainer.mainView.emailInvalid, "passwordMismatch").to.eql(false)
        expect(appState.rootContainer.mainView.email, "email").to.eql(``)
        expect(appState.rootContainer.mainView.username, "username").to.eql(``)
        expect(appState.rootContainer.mainView.password, "password").to.eql(``)
        expect(appState.rootContainer.mainView.password, "passwordRepetition").to.eql(``)
	})
})
    })
})




/******* S.D.G. *******/




