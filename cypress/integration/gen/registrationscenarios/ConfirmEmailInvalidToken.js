/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import AppUtils from "../../../../es6/src/app/AppUtils";
import * as RegistrationActionIds from "../../../acegen/gen/registration/RegistrationActionIds";
import * as CommonActionIds from "../../../acegen/gen/common/CommonActionIds";

const testId = ScenarioUtils.testId();

context('ConfirmEmailInvalidToken', () => {
    beforeEach(() => {
    	let nonDeterministicValues;
    	let nonDeterministicValue;
			ScenarioUtils.getCypressFor(CommonActionIds.init, ).should(() => {
				ScenarioUtils.wait(2, 2).should(() => {
					ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]).should(() => {
						ScenarioUtils.wait(1, 0).should(() => {
							ScenarioUtils.getCypressFor(RegistrationActionIds.usernameChanged, [`username-${testId}`]).should(() => {
								ScenarioUtils.wait(1, 2).should(() => {
									ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`pas`]).should(() => {
										ScenarioUtils.wait(1, 0).should(() => {
											ScenarioUtils.getCypressFor(RegistrationActionIds.passwordRepetitionChanged, [`password`]).should(() => {
												ScenarioUtils.wait(1, 0).should(() => {
													ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`password`]).should(() => {
														ScenarioUtils.wait(1, 0).should(() => {
															ScenarioUtils.getCypressFor(RegistrationActionIds.emailChanged, [`info@anfelisa.de`]).should(() => {
																ScenarioUtils.wait(1, 0).should(() => {
															nonDeterministicValues = JSON.parse(localStorage.getItem('nonDeterministicValues'));
		if (!nonDeterministicValues) {
			nonDeterministicValues = [];
		}
		nonDeterministicValue = {
			uuid: `uuid-${testId}`
		};
		nonDeterministicValues.push(nonDeterministicValue);
		AppUtils.httpPut(`/api/test/non-deterministic/value?uuid=uuid-${testId}&key=token&value=${testId}-TOKEN`);
		localStorage.setItem('nonDeterministicValues', JSON.stringify(nonDeterministicValues));
																	ScenarioUtils.getCypressFor(RegistrationActionIds.registerUser, ).should(() => {
																		ScenarioUtils.wait(2, 1).should(() => {
																			ScenarioUtils.getCypressFor(CommonActionIds.logout, ).should(() => {
																				ScenarioUtils.wait(2, 0).should(() => {
																					ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]).should(() => {
																						ScenarioUtils.wait(1, 0).should(() => {
																							ScenarioUtils.getCypressFor(RegistrationActionIds.usernameChanged, [`Admin`]).should(() => {
																								ScenarioUtils.wait(1, 2).should(() => {
																									ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`password`]).should(() => {
																										ScenarioUtils.wait(1, 0).should(() => {
																											ScenarioUtils.getCypressFor(RegistrationActionIds.passwordRepetitionChanged, [`password`]).should(() => {
																												ScenarioUtils.wait(1, 0).should(() => {
																													ScenarioUtils.getCypressFor(RegistrationActionIds.emailChanged, [`info@anfelisa.de`]).should(() => {
																														ScenarioUtils.wait(1, 0).should(() => {
																															ScenarioUtils.getCypressFor(RegistrationActionIds.registerUser, ).should(() => {
																																ScenarioUtils.wait(2, 1).should(() => {
																																});
																															});
																														});
																													});
																												});
																											});
																										});
																									});
																								});
																							});
																						});
																					});
																				});
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
    })

    it('confirmEmailFails ', () => {

ScenarioUtils.getCypressFor(RegistrationActionIds.confirmEmail, [`Admin`,`${testId}-TOKEN`]).should(() => {
	ScenarioUtils.wait(2, 1).should(() => {
        const appState = JSON.parse(localStorage.getItem('appState'))
        expect(appState.rootContainer.messages, "confirmEmailFails").to.eql([
        	{ 
        		textKey : `confirmEmail`,
        		type : `info`,
        		visible : true,
        		id : 0
        	},
        	{ 
        		code : 400,
        		text : `Bad Request`,
        		textKey : `usernameAlreadyTaken`,
        		type : `error`,
        		visible : true,
        		id : 1
        	},
        	{ 
        		code : 400,
        		text : `Bad Request`,
        		textKey : `tokenDoesNotMatch`,
        		type : `error`,
        		visible : true,
        		id : 2
        	}
        ]
        )
	})
})
    })
})




/******* S.D.G. *******/




