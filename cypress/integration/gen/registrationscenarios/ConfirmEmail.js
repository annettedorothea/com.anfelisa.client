/********************************************************************************
 * generated by de.acegen 1.2.1
 ********************************************************************************/




import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import AppUtils from "../../../../es6/src/app/AppUtils";
import * as RegistrationActionIds from "../../../acegen/gen/registration/RegistrationActionIds";
import * as CommonActionIds from "../../../acegen/gen/common/CommonActionIds";

const testId = ScenarioUtils.testId();

context('ConfirmEmail', () => {
    beforeEach(() => {
    	let nonDeterministicValues;
    	let nonDeterministicValue;
		ScenarioUtils.getCypressFor(CommonActionIds.init);
		ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]);
		ScenarioUtils.getCypressFor(RegistrationActionIds.usernameChanged, [`username-${testId}`]);
		ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`pas`]);
		ScenarioUtils.getCypressFor(RegistrationActionIds.passwordRepetitionChanged, [`password`]);
		ScenarioUtils.getCypressFor(RegistrationActionIds.passwordChanged, [`password`]);
		ScenarioUtils.getCypressFor(RegistrationActionIds.emailChanged, [`info@anfelisa.de`]);
		nonDeterministicValues = JSON.parse(localStorage.getItem('nonDeterministicValues'));
		if (!nonDeterministicValues) {
			nonDeterministicValues = [];
		}
		nonDeterministicValue = {
			uuid: `uuid-${testId}`
		};
		nonDeterministicValues.push(nonDeterministicValue);
		AppUtils.httpPut(`/api/test/non-deterministic/value?uuid=uuid-${testId}&key=token&value=${testId}-TOKEN`);
		localStorage.setItem('nonDeterministicValues', JSON.stringify(nonDeterministicValues));
		ScenarioUtils.getCypressFor(RegistrationActionIds.registerUser);
    })

			// Hallo?!?!?
    it('confirmsEmail userLoggedIn role ', () => {
		//0
		ScenarioUtils.getCypressFor(RegistrationActionIds.confirmEmail, [`username-${testId}`,`${testId}-TOKEN`]).should(() => {
			const appState = JSON.parse(localStorage.getItem('appState'))
			expect(appState.rootContainer.messages, "confirmsEmail").to.eql([
				{ 
					textKey : `confirmEmail`,
					type : `info`,
					visible : true,
					id : 0
				},
				{ 
					textKey : `emailConfirmed`,
					type : `info`,
					visible : true,
					id : 1
				}
			]
			)
			expect(appState.rootContainer.loggedInUser, "userLoggedIn").to.eql({ 
				password : `5f4dcc3b5aa765d61d8327deb882cf99`,
				username : `username-${testId}`
			}
			)
			expect(appState.rootContainer.role, "role").to.eql(`STUDENT`)
		});
    })
})




/******* S.D.G. *******/




