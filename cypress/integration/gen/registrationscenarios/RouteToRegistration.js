/********************************************************************************
 * generated by de.acegen 1.1.0
 ********************************************************************************/




import * as ScenarioUtils from "../../../acegen/src/ScenarioUtils";
import AppUtils from "../../../../es6/src/app/AppUtils";
import * as CommonActionIds from "../../../acegen/gen/common/CommonActionIds";
import * as Verifications from "../../../acegen/src/registrationscenarios/RouteToRegistrationVerifications";

const testId = ScenarioUtils.testId();

context('RouteToRegistration', () => {
    beforeEach(() => {
    	let nonDeterministicValues;
    	let nonDeterministicValue;
			ScenarioUtils.getCypressFor(CommonActionIds.init, ).should(() => {
				ScenarioUtils.wait(2, 2).should(() => {
				});
			});
    })

    it('displayUsernameSpinner emailInvalid passwordMismatch email username password passwordRepetition registerDisabled', () => {

ScenarioUtils.getCypressFor(CommonActionIds.route, [`#registration`]).should(() => {
	ScenarioUtils.wait(1, 0).should(() => {
        const appState = JSON.parse(localStorage.getItem('appState'))
        expect(appState.rootContainer.mainView.displayUsernameSpinner, "displayUsernameSpinner").to.eql(false)
        expect(appState.rootContainer.mainView.emailInvalid, "emailInvalid").to.eql(false)
        expect(appState.rootContainer.mainView.emailInvalid, "passwordMismatch").to.eql(false)
        expect(appState.rootContainer.mainView.email, "email").to.eql(``)
        expect(appState.rootContainer.mainView.username, "username").to.eql(``)
        expect(appState.rootContainer.mainView.password, "password").to.eql(``)
        expect(appState.rootContainer.mainView.password, "passwordRepetition").to.eql(``)
        Verifications.registerDisabled(testId);
	})
})
    })
})




/******* S.D.G. *******/




